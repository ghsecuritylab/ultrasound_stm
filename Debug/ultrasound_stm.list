
ultrasound_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ed8  0800f5ac  0800f5ac  0001f5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011484  08011484  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08011484  08011484  00021484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801148c  0801148c  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801148c  0801148c  0002148c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011490  08011490  00021490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08011494  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b34  2000007c  08011510  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00004200  20007bb0  08011510  00037bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cff9  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000590a  00000000  00000000  0005d0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001470  00000000  00000000  000629b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  00063e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000319c4  00000000  00000000  000650d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020507  00000000  00000000  00096a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffb6b  00000000  00000000  000b6fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b6b0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005768  00000000  00000000  001b6b8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f594 	.word	0x0800f594

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	0800f594 	.word	0x0800f594

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC1_Init+0x98>)
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <MX_ADC1_Init+0x9c>)
 80005d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_ADC1_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_ADC1_Init+0x98>)
 80005e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80005e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ADC1_Init+0x98>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_ADC1_Init+0x98>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_ADC1_Init+0x98>)
 8000602:	4a17      	ldr	r2, [pc, #92]	; (8000660 <MX_ADC1_Init+0xa0>)
 8000604:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_ADC1_Init+0x98>)
 800060e:	2201      	movs	r2, #1
 8000610:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_ADC1_Init+0x98>)
 8000622:	f000 feef 	bl	8001404 <HAL_ADC_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800062c:	f000 fb38 	bl	8000ca0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000634:	2301      	movs	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_ADC1_Init+0x98>)
 8000642:	f001 f875 	bl	8001730 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800064c:	f000 fb28 	bl	8000ca0 <Error_Handler>
  }

}
 8000650:	bf00      	nop
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2000061c 	.word	0x2000061c
 800065c:	40012000 	.word	0x40012000
 8000660:	0f000001 	.word	0x0f000001

08000664 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <HAL_ADC_MspInit+0x74>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d123      	bne.n	80006ce <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_ADC_MspInit+0x78>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <HAL_ADC_MspInit+0x78>)
 800068c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000690:	6453      	str	r3, [r2, #68]	; 0x44
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_ADC_MspInit+0x78>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_ADC_MspInit+0x78>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_ADC_MspInit+0x78>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_ADC_MspInit+0x78>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b6:	2301      	movs	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ba:	2303      	movs	r3, #3
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <HAL_ADC_MspInit+0x7c>)
 80006ca:	f002 fab9 	bl	8002c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40012000 	.word	0x40012000
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000

080006e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <MX_GPIO_Init+0xa8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a23      	ldr	r2, [pc, #140]	; (800078c <MX_GPIO_Init+0xa8>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_GPIO_Init+0xa8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_GPIO_Init+0xa8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1d      	ldr	r2, [pc, #116]	; (800078c <MX_GPIO_Init+0xa8>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_GPIO_Init+0xa8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_GPIO_Init+0xa8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <MX_GPIO_Init+0xa8>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_GPIO_Init+0xa8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_GPIO_Init+0xa8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a11      	ldr	r2, [pc, #68]	; (800078c <MX_GPIO_Init+0xa8>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_GPIO_Init+0xa8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <MX_GPIO_Init+0xac>)
 8000762:	f002 fc17 	bl	8002f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_GPIO_Init+0xac>)
 8000780:	f002 fa5e 	bl	8002c40 <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020000 	.word	0x40020000

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int i;
	for (i = 0; i < ADC_BUFFER_LENGTH; i++){
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e008      	b.n	80007b2 <main+0x1e>
		adc_char[2*i+1] = 0x00;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a61      	ldr	r2, [pc, #388]	; (800092c <main+0x198>)
 80007a8:	2100      	movs	r1, #0
 80007aa:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < ADC_BUFFER_LENGTH; i++){
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	3301      	adds	r3, #1
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007b8:	dbf2      	blt.n	80007a0 <main+0xc>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fda4 	bl	8001306 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f8dd 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f7ff ff8f 	bl	80006e4 <MX_GPIO_Init>
  MX_LWIP_Init();
 80007c6:	f004 fc39 	bl	800503c <MX_LWIP_Init>
  MX_USART1_UART_Init();
 80007ca:	f000 fcff 	bl	80011cc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80007ce:	f7ff fef7 	bl	80005c0 <MX_ADC1_Init>
  MX_SPI1_Init();
 80007d2:	f000 fa6d 	bl	8000cb0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80007d6:	4856      	ldr	r0, [pc, #344]	; (8000930 <main+0x19c>)
 80007d8:	f000 fe58 	bl	800148c <HAL_ADC_Start>
  udp_client_init(); // initialize udp client
 80007dc:	f000 fcae 	bl	800113c <udp_client_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80007e0:	f004 fd58 	bl	8005294 <MX_LWIP_Process>
	  /* Get Time Stamp */
	  timestamp = HAL_GetTick();
 80007e4:	f000 fde0 	bl	80013a8 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	4b52      	ldr	r3, [pc, #328]	; (8000934 <main+0x1a0>)
 80007ec:	601a      	str	r2, [r3, #0]
	  //serial_printf("Timestamp %d\r\n ", timestamp);
	  //serial_printf("Size of timestamp %d\r\n", sizeof(timestamp));
	  timestamp = changed_endian_4Bytes(timestamp);
 80007ee:	4b51      	ldr	r3, [pc, #324]	; (8000934 <main+0x1a0>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f9ce 	bl	8000b94 <changed_endian_4Bytes>
 80007f8:	4602      	mov	r2, r0
 80007fa:	4b4e      	ldr	r3, [pc, #312]	; (8000934 <main+0x1a0>)
 80007fc:	601a      	str	r2, [r3, #0]
	  memcpy(timestamp_char, (unsigned char *)&timestamp, sizeof(timestamp_char));
 80007fe:	4b4d      	ldr	r3, [pc, #308]	; (8000934 <main+0x1a0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a4d      	ldr	r2, [pc, #308]	; (8000938 <main+0x1a4>)
 8000804:	6013      	str	r3, [r2, #0]

	  /* Use PA15 as TX Pin */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080a:	484c      	ldr	r0, [pc, #304]	; (800093c <main+0x1a8>)
 800080c:	f002 fbdb 	bl	8002fc6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000814:	4849      	ldr	r0, [pc, #292]	; (800093c <main+0x1a8>)
 8000816:	f002 fbd6 	bl	8002fc6 <HAL_GPIO_TogglePin>

	  /* Start ADC Sampling */
	  for (int i = 0; i < ADC_BUFFER_LENGTH; i++){
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	e010      	b.n	8000842 <main+0xae>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8000820:	210a      	movs	r1, #10
 8000822:	4843      	ldr	r0, [pc, #268]	; (8000930 <main+0x19c>)
 8000824:	f000 fef2 	bl	800160c <HAL_ADC_PollForConversion>
		  adc_buffer[i] = HAL_ADC_GetValue(&hadc1);
 8000828:	4841      	ldr	r0, [pc, #260]	; (8000930 <main+0x19c>)
 800082a:	f000 ff73 	bl	8001714 <HAL_ADC_GetValue>
 800082e:	4603      	mov	r3, r0
 8000830:	b2d9      	uxtb	r1, r3
 8000832:	4a43      	ldr	r2, [pc, #268]	; (8000940 <main+0x1ac>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4413      	add	r3, r2
 8000838:	460a      	mov	r2, r1
 800083a:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < ADC_BUFFER_LENGTH; i++){
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	3301      	adds	r3, #1
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000848:	dbea      	blt.n	8000820 <main+0x8c>
	  }

	  /* Read Encoder */
	  encoder = getAMTPos();
 800084a:	f000 f91f 	bl	8000a8c <getAMTPos>
 800084e:	4603      	mov	r3, r0
 8000850:	461a      	mov	r2, r3
 8000852:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <main+0x1b0>)
 8000854:	801a      	strh	r2, [r3, #0]
	  //serial_printf("Encoder Reading: %d\r\n", encoder);
	  encoder = changed_endian_2Bytes(encoder);
 8000856:	4b3b      	ldr	r3, [pc, #236]	; (8000944 <main+0x1b0>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	b21b      	sxth	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f985 	bl	8000b6c <changed_endian_2Bytes>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b37      	ldr	r3, [pc, #220]	; (8000944 <main+0x1b0>)
 8000868:	801a      	strh	r2, [r3, #0]
	  memcpy(encoder_char, &encoder, sizeof(encoder_char));
 800086a:	4b36      	ldr	r3, [pc, #216]	; (8000944 <main+0x1b0>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	4a36      	ldr	r2, [pc, #216]	; (8000948 <main+0x1b4>)
 8000870:	8013      	strh	r3, [r2, #0]

	  /* Pad ADC Data */
	  for (i = 0; i < ADC_BUFFER_LENGTH; i++){
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	e00e      	b.n	8000896 <main+0x102>
		  uint8_t temp = adc_buffer[i];
 8000878:	4a31      	ldr	r2, [pc, #196]	; (8000940 <main+0x1ac>)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	70fb      	strb	r3, [r7, #3]
		  memcpy(adc_char+i*2, &temp, sizeof(temp));
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	461a      	mov	r2, r3
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <main+0x198>)
 800088a:	4413      	add	r3, r2
 800088c:	78fa      	ldrb	r2, [r7, #3]
 800088e:	701a      	strb	r2, [r3, #0]
	  for (i = 0; i < ADC_BUFFER_LENGTH; i++){
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	3301      	adds	r3, #1
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800089c:	dbec      	blt.n	8000878 <main+0xe4>
	  }

	  /* combine input for crc */
	  memcpy(crc_input, timestamp_char, sizeof(timestamp_char));
 800089e:	4b26      	ldr	r3, [pc, #152]	; (8000938 <main+0x1a4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b29      	ldr	r3, [pc, #164]	; (800094c <main+0x1b8>)
 80008a6:	601a      	str	r2, [r3, #0]
	  memcpy(crc_input+sizeof(timestamp_char), &information_byte, sizeof(information_byte));
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <main+0x1bc>)
 80008aa:	4a2a      	ldr	r2, [pc, #168]	; (8000954 <main+0x1c0>)
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	701a      	strb	r2, [r3, #0]
	  memcpy(crc_input+sizeof(timestamp_char)+sizeof(information_byte), encoder_char, sizeof(encoder_char));
 80008b0:	4a29      	ldr	r2, [pc, #164]	; (8000958 <main+0x1c4>)
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <main+0x1b4>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	8013      	strh	r3, [r2, #0]
	  memcpy(crc_input+sizeof(timestamp_char)+sizeof(information_byte)+sizeof(encoder_char), adc_char, sizeof(adc_char));
 80008ba:	4a28      	ldr	r2, [pc, #160]	; (800095c <main+0x1c8>)
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <main+0x198>)
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	461a      	mov	r2, r3
 80008c8:	f00d febf 	bl	800e64a <memcpy>

	  /* calculate crc 32 */
	  crc_result = rc_crc32(0, crc_input, sizeof(crc_input));
 80008cc:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80008d0:	491e      	ldr	r1, [pc, #120]	; (800094c <main+0x1b8>)
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f980 	bl	8000bd8 <rc_crc32>
 80008d8:	4602      	mov	r2, r0
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <main+0x1cc>)
 80008dc:	601a      	str	r2, [r3, #0]
	  crc_result = changed_endian_4Bytes(crc_result);
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <main+0x1cc>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f956 	bl	8000b94 <changed_endian_4Bytes>
 80008e8:	4602      	mov	r2, r0
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <main+0x1cc>)
 80008ec:	601a      	str	r2, [r3, #0]
	  memcpy(crc_char, (unsigned char *)&crc_result, sizeof(crc_char));
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <main+0x1cc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <main+0x1d0>)
 80008f4:	6013      	str	r3, [r2, #0]

	  /* combine everything into message */
	  memcpy(message_buff, marker, sizeof(marker));
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <main+0x1d4>)
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <main+0x1d8>)
 80008fa:	cb03      	ldmia	r3!, {r0, r1}
 80008fc:	6010      	str	r0, [r2, #0]
 80008fe:	6051      	str	r1, [r2, #4]
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	8113      	strh	r3, [r2, #8]
	  memcpy(message_buff+sizeof(marker), crc_input, sizeof(crc_input));
 8000904:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <main+0x1dc>)
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <main+0x1b8>)
 8000908:	4610      	mov	r0, r2
 800090a:	4619      	mov	r1, r3
 800090c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000910:	461a      	mov	r2, r3
 8000912:	f00d fe9a 	bl	800e64a <memcpy>
	  memcpy(message_buff+sizeof(marker)+sizeof(crc_input), crc_char, sizeof(crc_char));
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <main+0x1e0>)
 8000918:	4a12      	ldr	r2, [pc, #72]	; (8000964 <main+0x1d0>)
 800091a:	6812      	ldr	r2, [r2, #0]
 800091c:	601a      	str	r2, [r3, #0]

	  /* send udp pack */
	  char *me = "Hello World";
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <main+0x1e4>)
 8000920:	607b      	str	r3, [r7, #4]
	  udp_client_send(me);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 fbde 	bl	80010e4 <udp_client_send>
  {
 8000928:	e75a      	b.n	80007e0 <main+0x4c>
 800092a:	bf00      	nop
 800092c:	2000105c 	.word	0x2000105c
 8000930:	2000061c 	.word	0x2000061c
 8000934:	2000066c 	.word	0x2000066c
 8000938:	20001058 	.word	0x20001058
 800093c:	40020000 	.word	0x40020000
 8000940:	20000a64 	.word	0x20000a64
 8000944:	20000a60 	.word	0x20000a60
 8000948:	20000664 	.word	0x20000664
 800094c:	20000670 	.word	0x20000670
 8000950:	20000674 	.word	0x20000674
 8000954:	20000000 	.word	0x20000000
 8000958:	20000675 	.word	0x20000675
 800095c:	20000677 	.word	0x20000677
 8000960:	20000668 	.word	0x20000668
 8000964:	20001444 	.word	0x20001444
 8000968:	20000c58 	.word	0x20000c58
 800096c:	080112e4 	.word	0x080112e4
 8000970:	20000c62 	.word	0x20000c62
 8000974:	20001051 	.word	0x20001051
 8000978:	0800f5ac 	.word	0x0800f5ac

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b0b4      	sub	sp, #208	; 0xd0
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000986:	2230      	movs	r2, #48	; 0x30
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f00d fe68 	bl	800e660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	2284      	movs	r2, #132	; 0x84
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00d fe59 	bl	800e660 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b35      	ldr	r3, [pc, #212]	; (8000a84 <SystemClock_Config+0x108>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a34      	ldr	r2, [pc, #208]	; (8000a84 <SystemClock_Config+0x108>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <SystemClock_Config+0x108>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c6:	4b30      	ldr	r3, [pc, #192]	; (8000a88 <SystemClock_Config+0x10c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ce:	4a2e      	ldr	r2, [pc, #184]	; (8000a88 <SystemClock_Config+0x10c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <SystemClock_Config+0x10c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f0:	2302      	movs	r3, #2
 80009f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009fe:	2304      	movs	r3, #4
 8000a00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a04:	2348      	movs	r3, #72	; 0x48
 8000a06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a10:	2303      	movs	r3, #3
 8000a12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 faee 	bl	8002ffc <HAL_RCC_OscConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a26:	f000 f93b 	bl	8000ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a30:	2302      	movs	r3, #2
 8000a32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fd43 	bl	80034dc <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a5c:	f000 f920 	bl	8000ca0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a60:	2340      	movs	r3, #64	; 0x40
 8000a62:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a64:	2300      	movs	r3, #0
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 ff29 	bl	80038c4 <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000a78:	f000 f912 	bl	8000ca0 <Error_Handler>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	37d0      	adds	r7, #208	; 0xd0
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000

08000a8c <getAMTPos>:
    va_start(argp, fmt);
    vprint(fmt, argp);
    va_end(argp);
}

uint16_t getAMTPos() {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af02      	add	r7, sp, #8
	//var to help track status and commands
	uint16_t abs_position = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	80fb      	strh	r3, [r7, #6]
	uint8_t temp[2];
	uint8_t rx_buff = 0xA5;
 8000a96:	23a5      	movs	r3, #165	; 0xa5
 8000a98:	70fb      	strb	r3, [r7, #3]
	uint8_t READPOS = 0x10;		//read command
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t NOP = 0x00;				//NOP command
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	707b      	strb	r3, [r7, #1]

	//send read command
	GPIOA->BSRR = 0x100000U;
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <getAMTPos+0xd8>)
 8000aa4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000aa8:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, &READPOS, &rx_buff, 1, 0xFFFF);
 8000aaa:	1cfa      	adds	r2, r7, #3
 8000aac:	1cb9      	adds	r1, r7, #2
 8000aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	482c      	ldr	r0, [pc, #176]	; (8000b68 <getAMTPos+0xdc>)
 8000ab8:	f003 fb84 	bl	80041c4 <HAL_SPI_TransmitReceive>
	GPIOA->BSRR = 0x0010U;
 8000abc:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <getAMTPos+0xd8>)
 8000abe:	2210      	movs	r2, #16
 8000ac0:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 fc7c 	bl	80013c0 <HAL_Delay>

	//keep read until get 10 (ready)
	while (rx_buff != 0x10) {
 8000ac8:	e012      	b.n	8000af0 <getAMTPos+0x64>
		GPIOA->BSRR = 0x100000U;
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <getAMTPos+0xd8>)
 8000acc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ad0:	619a      	str	r2, [r3, #24]
		HAL_SPI_TransmitReceive(&hspi1, &NOP, &rx_buff, 1, 0xFFFF);
 8000ad2:	1cfa      	adds	r2, r7, #3
 8000ad4:	1c79      	adds	r1, r7, #1
 8000ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2301      	movs	r3, #1
 8000ade:	4822      	ldr	r0, [pc, #136]	; (8000b68 <getAMTPos+0xdc>)
 8000ae0:	f003 fb70 	bl	80041c4 <HAL_SPI_TransmitReceive>
		GPIOA->BSRR = 0x0010U;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <getAMTPos+0xd8>)
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	619a      	str	r2, [r3, #24]
		HAL_Delay(1);
 8000aea:	2001      	movs	r0, #1
 8000aec:	f000 fc68 	bl	80013c0 <HAL_Delay>
	while (rx_buff != 0x10) {
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	2b10      	cmp	r3, #16
 8000af4:	d1e9      	bne.n	8000aca <getAMTPos+0x3e>
	}

	//now is ready: get two bytes that is the 12 bit position
	GPIOA->BSRR = 0x100000U;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <getAMTPos+0xd8>)
 8000af8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000afc:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, &NOP, &rx_buff, 1, 0xFFFF);
 8000afe:	1cfa      	adds	r2, r7, #3
 8000b00:	1c79      	adds	r1, r7, #1
 8000b02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	4817      	ldr	r0, [pc, #92]	; (8000b68 <getAMTPos+0xdc>)
 8000b0c:	f003 fb5a 	bl	80041c4 <HAL_SPI_TransmitReceive>
	GPIOA->BSRR = 0x0010U;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <getAMTPos+0xd8>)
 8000b12:	2210      	movs	r2, #16
 8000b14:	619a      	str	r2, [r3, #24]
	temp[0] = rx_buff;
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	713b      	strb	r3, [r7, #4]

	GPIOA->BSRR = 0x100000U;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <getAMTPos+0xd8>)
 8000b1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b20:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, &NOP, &rx_buff, 1, 0xFFFF);
 8000b22:	1cfa      	adds	r2, r7, #3
 8000b24:	1c79      	adds	r1, r7, #1
 8000b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	480e      	ldr	r0, [pc, #56]	; (8000b68 <getAMTPos+0xdc>)
 8000b30:	f003 fb48 	bl	80041c4 <HAL_SPI_TransmitReceive>
	GPIOA->BSRR = 0x0010U;
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <getAMTPos+0xd8>)
 8000b36:	2210      	movs	r2, #16
 8000b38:	619a      	str	r2, [r3, #24]
	temp[1] = rx_buff;
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	717b      	strb	r3, [r7, #5]

	temp[0] &= ~0xF0;
 8000b3e:	793b      	ldrb	r3, [r7, #4]
 8000b40:	f003 030f 	and.w	r3, r3, #15
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	713b      	strb	r3, [r7, #4]
	abs_position = temp[0] << 8;
 8000b48:	793b      	ldrb	r3, [r7, #4]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	80fb      	strh	r3, [r7, #6]
	abs_position += temp[1];
 8000b50:	797b      	ldrb	r3, [r7, #5]
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	4413      	add	r3, r2
 8000b58:	80fb      	strh	r3, [r7, #6]

	return abs_position;
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40020000 	.word	0x40020000
 8000b68:	20001448 	.word	0x20001448

08000b6c <changed_endian_2Bytes>:

int16_t changed_endian_2Bytes(int16_t value){
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
    return ((value >> 8) & 0x00ff) | ((value & 0x00ff) << 8);
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b21b      	sxth	r3, r3
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <changed_endian_4Bytes>:

unsigned long changed_endian_4Bytes(unsigned long num){
 8000b94:	b480      	push	{r7}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    int byte0, byte1, byte2, byte3;
    byte0 = (num & 0x000000FF) >> 0 ;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	617b      	str	r3, [r7, #20]
    byte1 = (num & 0x0000FF00) >> 8 ;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	613b      	str	r3, [r7, #16]
    byte2 = (num & 0x00FF0000) >> 16 ;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0c1b      	lsrs	r3, r3, #16
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	60fb      	str	r3, [r7, #12]
    byte3 = (num & 0xFF000000) >> 24 ;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	0e1b      	lsrs	r3, r3, #24
 8000bb6:	60bb      	str	r3, [r7, #8]
    return((byte0 << 24) | (byte1 << 16) | (byte2 << 8) | (byte3 << 0));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	061a      	lsls	r2, r3, #24
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	041b      	lsls	r3, r3, #16
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	371c      	adds	r7, #28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <rc_crc32>:

uint32_t rc_crc32(uint32_t crc, unsigned char *buf, size_t len){
 8000bd8:	b480      	push	{r7}
 8000bda:	b08b      	sub	sp, #44	; 0x2c
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
	uint32_t rem;
	uint8_t octet;
	int i, j;
	unsigned char *p, *q;
	/* This check is not thread safe; there is no mutex. */
	if (have_table == 0) {
 8000be4:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <rc_crc32+0xbc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d12b      	bne.n	8000c44 <rc_crc32+0x6c>
        //fprintf(stdout, "Table\n");
		/* Calculate CRC table. */
		for (i = 0; i < 256; i++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
 8000bf0:	e022      	b.n	8000c38 <rc_crc32+0x60>
			rem = i;  /* remainder from polynomial division */
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
			for (j = 0; j < 8; j++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	e012      	b.n	8000c22 <rc_crc32+0x4a>
				if (rem & 1) {
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <rc_crc32+0x3e>
					rem >>= 1;
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	085b      	lsrs	r3, r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
					rem ^= 0xedb88320;
 8000c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <rc_crc32+0xc0>)
 8000c10:	4053      	eors	r3, r2
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
 8000c14:	e002      	b.n	8000c1c <rc_crc32+0x44>
				} else
					rem >>= 1;
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	085b      	lsrs	r3, r3, #1
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
			for (j = 0; j < 8; j++) {
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	dde9      	ble.n	8000bfc <rc_crc32+0x24>
			}
			table[i] = rem;
 8000c28:	491c      	ldr	r1, [pc, #112]	; (8000c9c <rc_crc32+0xc4>)
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < 256; i++) {
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	3301      	adds	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	6a3b      	ldr	r3, [r7, #32]
 8000c3a:	2bff      	cmp	r3, #255	; 0xff
 8000c3c:	ddd9      	ble.n	8000bf2 <rc_crc32+0x1a>
		}
		have_table = 1;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <rc_crc32+0xbc>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
	}
	crc = ~crc;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	60fb      	str	r3, [r7, #12]
	q = buf + len;
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	617b      	str	r3, [r7, #20]
	for (p = buf; p < q; p++) {
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	e010      	b.n	8000c7a <rc_crc32+0xa2>
		octet = *p;  /* Cast to unsigned octet. */
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	74fb      	strb	r3, [r7, #19]
		crc = (crc >> 8) ^ table[(crc & 0xff) ^ octet];
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	0a1a      	lsrs	r2, r3, #8
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	b2d9      	uxtb	r1, r3
 8000c66:	7cfb      	ldrb	r3, [r7, #19]
 8000c68:	404b      	eors	r3, r1
 8000c6a:	490c      	ldr	r1, [pc, #48]	; (8000c9c <rc_crc32+0xc4>)
 8000c6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c70:	4053      	eors	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]
	for (p = buf; p < q; p++) {
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	3301      	adds	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d3ea      	bcc.n	8000c58 <rc_crc32+0x80>
	}
	return ~crc;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43db      	mvns	r3, r3
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	372c      	adds	r7, #44	; 0x2c
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000098 	.word	0x20000098
 8000c98:	edb88320 	.word	0xedb88320
 8000c9c:	2000009c 	.word	0x2000009c

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <MX_SPI1_Init+0x78>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000ce6:	2230      	movs	r2, #48	; 0x30
 8000ce8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cfe:	2207      	movs	r2, #7
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d10:	f003 f9c6 	bl	80040a0 <HAL_SPI_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f7ff ffc1 	bl	8000ca0 <Error_Handler>
  }

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20001448 	.word	0x20001448
 8000d28:	40013000 	.word	0x40013000

08000d2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a25      	ldr	r2, [pc, #148]	; (8000de0 <HAL_SPI_MspInit+0xb4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d143      	bne.n	8000dd6 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <HAL_SPI_MspInit+0xb8>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a24      	ldr	r2, [pc, #144]	; (8000de4 <HAL_SPI_MspInit+0xb8>)
 8000d54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_SPI_MspInit+0xb8>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <HAL_SPI_MspInit+0xb8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <HAL_SPI_MspInit+0xb8>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_SPI_MspInit+0xb8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_SPI_MspInit+0xb8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <HAL_SPI_MspInit+0xb8>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_SPI_MspInit+0xb8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d96:	2370      	movs	r3, #112	; 0x70
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da6:	2305      	movs	r3, #5
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <HAL_SPI_MspInit+0xbc>)
 8000db2:	f001 ff45 	bl	8002c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000db6:	2320      	movs	r3, #32
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4806      	ldr	r0, [pc, #24]	; (8000dec <HAL_SPI_MspInit+0xc0>)
 8000dd2:	f001 ff35 	bl	8002c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40013000 	.word	0x40013000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020400 	.word	0x40020400

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_MspInit+0x44>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_MspInit+0x44>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_MspInit+0x44>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_MspInit+0x44>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x44>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x44>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 fa78 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	e00a      	b.n	8000ebc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ea6:	f3af 8000 	nop.w
 8000eaa:	4601      	mov	r1, r0
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	60ba      	str	r2, [r7, #8]
 8000eb2:	b2ca      	uxtb	r2, r1
 8000eb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dbf0      	blt.n	8000ea6 <_read+0x12>
	}

return len;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	e009      	b.n	8000ef4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	60ba      	str	r2, [r7, #8]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbf1      	blt.n	8000ee0 <_write+0x12>
	}
	return len;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_close>:

int _close(int file)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_isatty>:

int _isatty(int file)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
	return 1;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x50>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x16>
		heap_end = &end;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <_sbrk+0x50>)
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <_sbrk+0x54>)
 8000f84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <_sbrk+0x50>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <_sbrk+0x50>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	466a      	mov	r2, sp
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d905      	bls.n	8000fa6 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <_sbrk+0x58>)
 8000f9c:	220c      	movs	r2, #12
 8000f9e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	e006      	b.n	8000fb4 <_sbrk+0x44>
	}

	heap_end += incr;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <_sbrk+0x50>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <_sbrk+0x50>)
 8000fb0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	2000049c 	.word	0x2000049c
 8000fc4:	20007bb0 	.word	0x20007bb0
 8000fc8:	20007bac 	.word	0x20007bac

08000fcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <SystemInit+0x5c>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a14      	ldr	r2, [pc, #80]	; (8001028 <SystemInit+0x5c>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <SystemInit+0x60>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a11      	ldr	r2, [pc, #68]	; (800102c <SystemInit+0x60>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <SystemInit+0x60>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <SystemInit+0x60>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <SystemInit+0x60>)
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <SystemInit+0x64>)
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <SystemInit+0x60>)
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <SystemInit+0x68>)
 8001002:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <SystemInit+0x60>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a08      	ldr	r2, [pc, #32]	; (800102c <SystemInit+0x60>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x60>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SystemInit+0x5c>)
 8001018:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800101c:	609a      	str	r2, [r3, #8]
#endif
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	40023800 	.word	0x40023800
 8001030:	fef6ffff 	.word	0xfef6ffff
 8001034:	24003010 	.word	0x24003010

08001038 <udp_receive_callback>:
static void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);
/* UDP control module */
static struct udp_pcb *upcb;

static void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
    uint32_t i;

    /* data call back */
    udp_send(upcb, p);
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	68b8      	ldr	r0, [r7, #8]
 800104a:	f00a fe57 	bl	800bcfc <udp_send>
    udp_sendto(upcb, p, addr, port);
 800104e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f00a fe69 	bl	800bd2c <udp_sendto>

    /* print received data */
    printf("get msg from %d:%d:%d:%d port:%d:\r\n",
        *((uint8_t *)&addr->addr), *((uint8_t *)&addr->addr + 1),
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	781b      	ldrb	r3, [r3, #0]
    printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 800105e:	4619      	mov	r1, r3
        *((uint8_t *)&addr->addr), *((uint8_t *)&addr->addr + 1),
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	781b      	ldrb	r3, [r3, #0]
    printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 8001066:	4618      	mov	r0, r3
        *((uint8_t *)&addr->addr + 2), *((uint8_t *)&addr->addr + 3), port);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	3302      	adds	r3, #2
 800106c:	781b      	ldrb	r3, [r3, #0]
    printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 800106e:	461c      	mov	r4, r3
        *((uint8_t *)&addr->addr + 2), *((uint8_t *)&addr->addr + 3), port);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3303      	adds	r3, #3
 8001074:	781b      	ldrb	r3, [r3, #0]
    printf("get msg from %d:%d:%d:%d port:%d:\r\n",
 8001076:	461a      	mov	r2, r3
 8001078:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	9200      	str	r2, [sp, #0]
 800107e:	4623      	mov	r3, r4
 8001080:	4602      	mov	r2, r0
 8001082:	4816      	ldr	r0, [pc, #88]	; (80010dc <udp_receive_callback+0xa4>)
 8001084:	f00d faf4 	bl	800e670 <iprintf>

    if (p != NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d01f      	beq.n	80010ce <udp_receive_callback+0x96>
    {
        struct pbuf *ptmp = p;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	613b      	str	r3, [r7, #16]

        while(ptmp != NULL)
 8001092:	e016      	b.n	80010c2 <udp_receive_callback+0x8a>
        {
            for (i = 0; i < p->len; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e00a      	b.n	80010b0 <udp_receive_callback+0x78>
            {
                printf("%c", *((char *)p->payload + i));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	4413      	add	r3, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f00d fafb 	bl	800e6a0 <putchar>
            for (i = 0; i < p->len; i++)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	895b      	ldrh	r3, [r3, #10]
 80010b4:	461a      	mov	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d3ee      	bcc.n	800109a <udp_receive_callback+0x62>
            }

            ptmp = p->next;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	613b      	str	r3, [r7, #16]
        while(ptmp != NULL)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1e5      	bne.n	8001094 <udp_receive_callback+0x5c>
        }

        printf("\r\n");
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <udp_receive_callback+0xa8>)
 80010ca:	f00d fb59 	bl	800e780 <puts>
    }

    /* release data buffer */
    pbuf_free(p);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f005 fcf4 	bl	8006abc <pbuf_free>
}
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	0800f5b8 	.word	0x0800f5b8
 80010e0:	0800f5dc 	.word	0x0800f5dc

080010e4 <udp_client_send>:


void udp_client_send(char *pData)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    struct pbuf *p;

    /* free buffer */
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(pData), PBUF_POOL);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f88f 	bl	8000210 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2203      	movs	r2, #3
 80010f8:	4619      	mov	r1, r3
 80010fa:	2000      	movs	r0, #0
 80010fc:	f005 f96c 	bl	80063d8 <pbuf_alloc>
 8001100:	60f8      	str	r0, [r7, #12]

    if (p != NULL)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d012      	beq.n	800112e <udp_client_send+0x4a>
    {
        /* fill buffer */
        pbuf_take(p, pData, strlen(pData));
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff f881 	bl	8000210 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	b29b      	uxth	r3, r3
 8001112:	461a      	mov	r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f005 ff4a 	bl	8006fb0 <pbuf_take>

        /* send upd pack */
        udp_send(upcb, p);
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <udp_client_send+0x54>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	4618      	mov	r0, r3
 8001124:	f00a fdea 	bl	800bcfc <udp_send>

        /* free buffer */
        pbuf_free(p);
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f005 fcc7 	bl	8006abc <pbuf_free>
    }
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200004a0 	.word	0x200004a0

0800113c <udp_client_init>:


void udp_client_init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
    ip_addr_t serverIP;
    err_t err;

    IP4_ADDR(&serverIP, SERVER_IP1, SERVER_IP2, SERVER_IP3, SERVER_IP4);
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <udp_client_init+0x78>)
 8001144:	603b      	str	r3, [r7, #0]

    /* create udp control module */
    upcb = udp_new();
 8001146:	f00a fffd 	bl	800c144 <udp_new>
 800114a:	4602      	mov	r2, r0
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <udp_client_init+0x7c>)
 800114e:	601a      	str	r2, [r3, #0]

    if (upcb!=NULL)
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <udp_client_init+0x7c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d028      	beq.n	80011aa <udp_client_init+0x6e>
    {
        /* config local port */
        upcb->local_port = UDP_LOCAL_PORT;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <udp_client_init+0x7c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f242 22b0 	movw	r2, #8880	; 0x22b0
 8001160:	825a      	strh	r2, [r3, #18]

        /* config server IP */
        err= udp_connect(upcb, &serverIP, UDP_REMOTE_PORT);
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <udp_client_init+0x7c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4639      	mov	r1, r7
 8001168:	f242 22b1 	movw	r2, #8881	; 0x22b1
 800116c:	4618      	mov	r0, r3
 800116e:	f00a ff4f 	bl	800c010 <udp_connect>
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]

        if (err == ERR_OK)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10d      	bne.n	800119a <udp_client_init+0x5e>
        {
            /* callback func */
            udp_recv(upcb, udp_receive_callback, NULL);
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <udp_client_init+0x7c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2200      	movs	r2, #0
 8001184:	490d      	ldr	r1, [pc, #52]	; (80011bc <udp_client_init+0x80>)
 8001186:	4618      	mov	r0, r3
 8001188:	f00a ff98 	bl	800c0bc <udp_recv>

            /* send udp pack */
            udp_client_send("udp client connected");
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <udp_client_init+0x84>)
 800118e:	f7ff ffa9 	bl	80010e4 <udp_client_send>

            printf("udp client connected\r\n");
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <udp_client_init+0x88>)
 8001194:	f00d faf4 	bl	800e780 <puts>
            udp_remove(upcb);

            printf("can not connect udp pcb\r\n");
        }
    }
}
 8001198:	e007      	b.n	80011aa <udp_client_init+0x6e>
            udp_remove(upcb);
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <udp_client_init+0x7c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f00a ff9e 	bl	800c0e0 <udp_remove>
            printf("can not connect udp pcb\r\n");
 80011a4:	4808      	ldr	r0, [pc, #32]	; (80011c8 <udp_client_init+0x8c>)
 80011a6:	f00d faeb 	bl	800e780 <puts>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	bbd4fea9 	.word	0xbbd4fea9
 80011b8:	200004a0 	.word	0x200004a0
 80011bc:	08001039 	.word	0x08001039
 80011c0:	0800f5e0 	.word	0x0800f5e0
 80011c4:	0800f5f8 	.word	0x0800f5f8
 80011c8:	0800f610 	.word	0x0800f610

080011cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011d2:	4a15      	ldr	r2, [pc, #84]	; (8001228 <MX_USART1_UART_Init+0x5c>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART1_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART1_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART1_UART_Init+0x58>)
 8001210:	f003 fb08 	bl	8004824 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800121a:	f7ff fd41 	bl	8000ca0 <Error_Handler>
  }

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200014ac 	.word	0x200014ac
 8001228:	40011000 	.word	0x40011000

0800122c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_UART_MspInit+0x7c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d128      	bne.n	80012a0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_UART_MspInit+0x80>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a16      	ldr	r2, [pc, #88]	; (80012ac <HAL_UART_MspInit+0x80>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_UART_MspInit+0x80>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_UART_MspInit+0x80>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_UART_MspInit+0x80>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_UART_MspInit+0x80>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800127e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001290:	2307      	movs	r3, #7
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_UART_MspInit+0x84>)
 800129c:	f001 fcd0 	bl	8002c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40011000 	.word	0x40011000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012ba:	e003      	b.n	80012c4 <LoopCopyDataInit>

080012bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012c2:	3104      	adds	r1, #4

080012c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012cc:	d3f6      	bcc.n	80012bc <CopyDataInit>
  ldr  r2, =_sbss
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012d0:	e002      	b.n	80012d8 <LoopFillZerobss>

080012d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012d4:	f842 3b04 	str.w	r3, [r2], #4

080012d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012dc:	d3f9      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012de:	f7ff fe75 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e2:	f00d f97f 	bl	800e5e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e6:	f7ff fa55 	bl	8000794 <main>
  bx  lr    
 80012ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80012f0:	08011494 	.word	0x08011494
  ldr  r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012f8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80012fc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001300:	20007bb0 	.word	0x20007bb0

08001304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC_IRQHandler>

08001306 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130a:	2003      	movs	r0, #3
 800130c:	f000 fcf0 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f805 	bl	8001320 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001316:	f7ff fd6b 	bl	8000df0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fcfd 	bl	8001d3e <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 fcd3 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000004 	.word	0x20000004
 8001378:	2000000c 	.word	0x2000000c
 800137c:	20000008 	.word	0x20000008

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	2000000c 	.word	0x2000000c
 80013a4:	2000152c 	.word	0x2000152c

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	2000152c 	.word	0x2000152c

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffee 	bl	80013a8 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_Delay+0x40>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffde 	bl	80013a8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2000000c 	.word	0x2000000c

08001404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e031      	b.n	800147e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	2b00      	cmp	r3, #0
 8001420:	d109      	bne.n	8001436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff f91e 	bl	8000664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	d116      	bne.n	8001470 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_ADC_Init+0x84>)
 8001448:	4013      	ands	r3, r2
 800144a:	f043 0202 	orr.w	r2, r3, #2
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 faa0 	bl	8001998 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f023 0303 	bic.w	r3, r3, #3
 8001466:	f043 0201 	orr.w	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
 800146e:	e001      	b.n	8001474 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800147c:	7bfb      	ldrb	r3, [r7, #15]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	ffffeefd 	.word	0xffffeefd

0800148c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_Start+0x1a>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e0a0      	b.n	80015e8 <HAL_ADC_Start+0x15c>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d018      	beq.n	80014ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80014cc:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <HAL_ADC_Start+0x168>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a49      	ldr	r2, [pc, #292]	; (80015f8 <HAL_ADC_Start+0x16c>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0c9a      	lsrs	r2, r3, #18
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80014e0:	e002      	b.n	80014e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f9      	bne.n	80014e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d174      	bne.n	80015e6 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001500:	4b3e      	ldr	r3, [pc, #248]	; (80015fc <HAL_ADC_Start+0x170>)
 8001502:	4013      	ands	r3, r2
 8001504:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001522:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001536:	d106      	bne.n	8001546 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153c:	f023 0206 	bic.w	r2, r3, #6
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	645a      	str	r2, [r3, #68]	; 0x44
 8001544:	e002      	b.n	800154c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800155c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_ADC_Start+0x174>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d136      	bne.n	80015e6 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	e02d      	b.n	80015e6 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_ADC_Start+0x178>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d10e      	bne.n	80015b2 <HAL_ADC_Start+0x126>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d107      	bne.n	80015b2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015b0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_ADC_Start+0x174>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d113      	bne.n	80015e6 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_ADC_Start+0x17c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d10e      	bne.n	80015e6 <HAL_ADC_Start+0x15a>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d107      	bne.n	80015e6 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015e4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	20000004 	.word	0x20000004
 80015f8:	431bde83 	.word	0x431bde83
 80015fc:	fffff8fe 	.word	0xfffff8fe
 8001600:	40012300 	.word	0x40012300
 8001604:	40012000 	.word	0x40012000
 8001608:	40012200 	.word	0x40012200

0800160c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001628:	d113      	bne.n	8001652 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001638:	d10b      	bne.n	8001652 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f043 0220 	orr.w	r2, r3, #32
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e05c      	b.n	800170c <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001652:	f7ff fea9 	bl	80013a8 <HAL_GetTick>
 8001656:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001658:	e01a      	b.n	8001690 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d016      	beq.n	8001690 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <HAL_ADC_PollForConversion+0x6c>
 8001668:	f7ff fe9e 	bl	80013a8 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d20b      	bcs.n	8001690 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	f043 0204 	orr.w	r2, r3, #4
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e03d      	b.n	800170c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b02      	cmp	r3, #2
 800169c:	d1dd      	bne.n	800165a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f06f 0212 	mvn.w	r2, #18
 80016a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d123      	bne.n	800170a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11f      	bne.n	800170a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d111      	bne.n	800170a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d105      	bne.n	800170a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f043 0201 	orr.w	r2, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_ADC_ConfigChannel+0x1c>
 8001748:	2302      	movs	r3, #2
 800174a:	e115      	b.n	8001978 <HAL_ADC_ConfigChannel+0x248>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b09      	cmp	r3, #9
 800175a:	d935      	bls.n	80017c8 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68d9      	ldr	r1, [r3, #12]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	3b1e      	subs	r3, #30
 8001772:	2207      	movs	r2, #7
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43da      	mvns	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	400a      	ands	r2, r1
 8001780:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a7f      	ldr	r2, [pc, #508]	; (8001984 <HAL_ADC_ConfigChannel+0x254>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d10a      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68d9      	ldr	r1, [r3, #12]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	061a      	lsls	r2, r3, #24
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	e035      	b.n	800180e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68d9      	ldr	r1, [r3, #12]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	4603      	mov	r3, r0
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4403      	add	r3, r0
 80017ba:	3b1e      	subs	r3, #30
 80017bc:	409a      	lsls	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	e022      	b.n	800180e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6919      	ldr	r1, [r3, #16]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	2207      	movs	r2, #7
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	400a      	ands	r2, r1
 80017ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6919      	ldr	r1, [r3, #16]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	4603      	mov	r3, r0
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4403      	add	r3, r0
 8001804:	409a      	lsls	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b06      	cmp	r3, #6
 8001814:	d824      	bhi.n	8001860 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b05      	subs	r3, #5
 8001828:	221f      	movs	r2, #31
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	400a      	ands	r2, r1
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3b05      	subs	r3, #5
 8001852:	fa00 f203 	lsl.w	r2, r0, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	635a      	str	r2, [r3, #52]	; 0x34
 800185e:	e04c      	b.n	80018fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d824      	bhi.n	80018b2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b23      	subs	r3, #35	; 0x23
 800187a:	221f      	movs	r2, #31
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43da      	mvns	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	400a      	ands	r2, r1
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3b23      	subs	r3, #35	; 0x23
 80018a4:	fa00 f203 	lsl.w	r2, r0, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
 80018b0:	e023      	b.n	80018fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3b41      	subs	r3, #65	; 0x41
 80018c4:	221f      	movs	r2, #31
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	400a      	ands	r2, r1
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b41      	subs	r3, #65	; 0x41
 80018ee:	fa00 f203 	lsl.w	r2, r0, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a22      	ldr	r2, [pc, #136]	; (8001988 <HAL_ADC_ConfigChannel+0x258>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d109      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1e8>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b12      	cmp	r3, #18
 800190a:	d105      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <HAL_ADC_ConfigChannel+0x25c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a1e      	ldr	r2, [pc, #120]	; (800198c <HAL_ADC_ConfigChannel+0x25c>)
 8001912:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001916:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <HAL_ADC_ConfigChannel+0x258>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d125      	bne.n	800196e <HAL_ADC_ConfigChannel+0x23e>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <HAL_ADC_ConfigChannel+0x254>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d003      	beq.n	8001934 <HAL_ADC_ConfigChannel+0x204>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b11      	cmp	r3, #17
 8001932:	d11c      	bne.n	800196e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_ADC_ConfigChannel+0x25c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a14      	ldr	r2, [pc, #80]	; (800198c <HAL_ADC_ConfigChannel+0x25c>)
 800193a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800193e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <HAL_ADC_ConfigChannel+0x254>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d111      	bne.n	800196e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_ADC_ConfigChannel+0x260>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a11      	ldr	r2, [pc, #68]	; (8001994 <HAL_ADC_ConfigChannel+0x264>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	0c9a      	lsrs	r2, r3, #18
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001960:	e002      	b.n	8001968 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3b01      	subs	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f9      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	10000012 	.word	0x10000012
 8001988:	40012000 	.word	0x40012000
 800198c:	40012300 	.word	0x40012300
 8001990:	20000004 	.word	0x20000004
 8001994:	431bde83 	.word	0x431bde83

08001998 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80019a0:	4b78      	ldr	r3, [pc, #480]	; (8001b84 <ADC_Init+0x1ec>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a77      	ldr	r2, [pc, #476]	; (8001b84 <ADC_Init+0x1ec>)
 80019a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019ac:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <ADC_Init+0x1ec>)
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4973      	ldr	r1, [pc, #460]	; (8001b84 <ADC_Init+0x1ec>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	021a      	lsls	r2, r3, #8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6859      	ldr	r1, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6899      	ldr	r1, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	4a58      	ldr	r2, [pc, #352]	; (8001b88 <ADC_Init+0x1f0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d022      	beq.n	8001a72 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6899      	ldr	r1, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6899      	ldr	r1, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	e00f      	b.n	8001a92 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0202 	bic.w	r2, r2, #2
 8001aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6899      	ldr	r1, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	005a      	lsls	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01b      	beq.n	8001af8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ace:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ade:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6859      	ldr	r1, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	3b01      	subs	r3, #1
 8001aec:	035a      	lsls	r2, r3, #13
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	e007      	b.n	8001b08 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	051a      	lsls	r2, r3, #20
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6899      	ldr	r1, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b4a:	025a      	lsls	r2, r3, #9
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6899      	ldr	r1, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	029a      	lsls	r2, r3, #10
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	609a      	str	r2, [r3, #8]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	40012300 	.word	0x40012300
 8001b88:	0f000001 	.word	0x0f000001

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <__NVIC_SetPriorityGrouping+0x40>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x40>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00
 8001bd0:	05fa0000 	.word	0x05fa0000

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff47 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff5c 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff8e 	bl	8001c44 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5d 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffb0 	bl	8001cac <SysTick_Config>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001d68:	4ba9      	ldr	r3, [pc, #676]	; (8002010 <HAL_ETH_Init+0x2b8>)
 8001d6a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e183      	b.n	8002086 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f003 fa8a 	bl	80052ac <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d98:	4b9e      	ldr	r3, [pc, #632]	; (8002014 <HAL_ETH_Init+0x2bc>)
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	4a9d      	ldr	r2, [pc, #628]	; (8002014 <HAL_ETH_Init+0x2bc>)
 8001d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da2:	6453      	str	r3, [r2, #68]	; 0x44
 8001da4:	4b9b      	ldr	r3, [pc, #620]	; (8002014 <HAL_ETH_Init+0x2bc>)
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001db0:	4b99      	ldr	r3, [pc, #612]	; (8002018 <HAL_ETH_Init+0x2c0>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a98      	ldr	r2, [pc, #608]	; (8002018 <HAL_ETH_Init+0x2c0>)
 8001db6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001dba:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001dbc:	4b96      	ldr	r3, [pc, #600]	; (8002018 <HAL_ETH_Init+0x2c0>)
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4994      	ldr	r1, [pc, #592]	; (8002018 <HAL_ETH_Init+0x2c0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0201 	orr.w	r2, r2, #1
 8001ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001de2:	f7ff fae1 	bl	80013a8 <HAL_GetTick>
 8001de6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001de8:	e011      	b.n	8001e0e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001dea:	f7ff fadd 	bl	80013a8 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001df8:	d909      	bls.n	8001e0e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e13b      	b.n	8002086 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e4      	bne.n	8001dea <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f023 031c 	bic.w	r3, r3, #28
 8001e2e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e30:	f001 fd14 	bl	800385c <HAL_RCC_GetHCLKFreq>
 8001e34:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4a78      	ldr	r2, [pc, #480]	; (800201c <HAL_ETH_Init+0x2c4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d908      	bls.n	8001e50 <HAL_ETH_Init+0xf8>
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4a77      	ldr	r2, [pc, #476]	; (8002020 <HAL_ETH_Init+0x2c8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d804      	bhi.n	8001e50 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e027      	b.n	8001ea0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	4a73      	ldr	r2, [pc, #460]	; (8002020 <HAL_ETH_Init+0x2c8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d908      	bls.n	8001e6a <HAL_ETH_Init+0x112>
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	4a72      	ldr	r2, [pc, #456]	; (8002024 <HAL_ETH_Init+0x2cc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d804      	bhi.n	8001e6a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f043 030c 	orr.w	r3, r3, #12
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	e01a      	b.n	8001ea0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4a6d      	ldr	r2, [pc, #436]	; (8002024 <HAL_ETH_Init+0x2cc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d903      	bls.n	8001e7a <HAL_ETH_Init+0x122>
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4a6c      	ldr	r2, [pc, #432]	; (8002028 <HAL_ETH_Init+0x2d0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d911      	bls.n	8001e9e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	; (8002028 <HAL_ETH_Init+0x2d0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d908      	bls.n	8001e94 <HAL_ETH_Init+0x13c>
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4a69      	ldr	r2, [pc, #420]	; (800202c <HAL_ETH_Init+0x2d4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d804      	bhi.n	8001e94 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e005      	b.n	8001ea0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f043 0310 	orr.w	r3, r3, #16
 8001e9a:	61fb      	str	r3, [r7, #28]
 8001e9c:	e000      	b.n	8001ea0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e9e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001ea8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001eac:	2100      	movs	r1, #0
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fb9a 	bl	80025e8 <HAL_ETH_WritePHYRegister>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001ebe:	6939      	ldr	r1, [r7, #16]
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fc27 	bl	8002714 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0d9      	b.n	8002086 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001ed2:	20ff      	movs	r0, #255	; 0xff
 8001ed4:	f7ff fa74 	bl	80013c0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a7 	beq.w	8002030 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ee2:	f7ff fa61 	bl	80013a8 <HAL_GetTick>
 8001ee6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	461a      	mov	r2, r3
 8001eee:	2101      	movs	r1, #1
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fb11 	bl	8002518 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001ef6:	f7ff fa57 	bl	80013a8 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d90f      	bls.n	8001f28 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f0c:	6939      	ldr	r1, [r7, #16]
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fc00 	bl	8002714 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e0ae      	b.n	8002086 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0da      	beq.n	8001ee8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001f32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f36:	2100      	movs	r1, #0
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fb55 	bl	80025e8 <HAL_ETH_WritePHYRegister>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f48:	6939      	ldr	r1, [r7, #16]
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fbe2 	bl	8002714 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e094      	b.n	8002086 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f5c:	f7ff fa24 	bl	80013a8 <HAL_GetTick>
 8001f60:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	461a      	mov	r2, r3
 8001f68:	2101      	movs	r1, #1
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fad4 	bl	8002518 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001f70:	f7ff fa1a 	bl	80013a8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d90f      	bls.n	8001fa2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f86:	6939      	ldr	r1, [r7, #16]
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fbc3 	bl	8002714 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e071      	b.n	8002086 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0da      	beq.n	8001f62 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	211f      	movs	r1, #31
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 faaf 	bl	8002518 <HAL_ETH_ReadPHYRegister>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fc4:	6939      	ldr	r1, [r7, #16]
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fba4 	bl	8002714 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e056      	b.n	8002086 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d004      	beq.n	8001fec <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	e002      	b.n	8001ff2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	e037      	b.n	8002074 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	e032      	b.n	8002074 <HAL_ETH_Init+0x31c>
 800200e:	bf00      	nop
 8002010:	03938700 	.word	0x03938700
 8002014:	40023800 	.word	0x40023800
 8002018:	40013800 	.word	0x40013800
 800201c:	01312cff 	.word	0x01312cff
 8002020:	02160ebf 	.word	0x02160ebf
 8002024:	039386ff 	.word	0x039386ff
 8002028:	05f5e0ff 	.word	0x05f5e0ff
 800202c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	08db      	lsrs	r3, r3, #3
 8002036:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002040:	4313      	orrs	r3, r2
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	2100      	movs	r1, #0
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 facd 	bl	80025e8 <HAL_ETH_WritePHYRegister>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00b      	beq.n	800206c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fb5a 	bl	8002714 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e00c      	b.n	8002086 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800206c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002070:	f7ff f9a6 	bl	80013c0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002074:	6939      	ldr	r1, [r7, #16]
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fb4c 	bl	8002714 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3720      	adds	r7, #32
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop

08002090 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_ETH_DMATxDescListInit+0x20>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e052      	b.n	8002156 <HAL_ETH_DMATxDescListInit+0xc6>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e030      	b.n	800212e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	015b      	lsls	r3, r3, #5
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	4413      	add	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020dc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3b01      	subs	r3, #1
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	d208      	bcs.n	8002122 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3301      	adds	r3, #1
 8002114:	015b      	lsls	r3, r3, #5
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	4413      	add	r3, r2
 800211a:	461a      	mov	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	e002      	b.n	8002128 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d3ca      	bcc.n	80020cc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f241 0310 	movw	r3, #4112	; 0x1010
 8002140:	440b      	add	r3, r1
 8002142:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	371c      	adds	r7, #28
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002162:	b480      	push	{r7}
 8002164:	b087      	sub	sp, #28
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_ETH_DMARxDescListInit+0x20>
 800217e:	2302      	movs	r3, #2
 8002180:	e056      	b.n	8002230 <HAL_ETH_DMARxDescListInit+0xce>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2202      	movs	r2, #2
 800218e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e034      	b.n	8002208 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	015b      	lsls	r3, r3, #5
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	4413      	add	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021ae:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80021b6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	461a      	mov	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d208      	bcs.n	80021fc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3301      	adds	r3, #1
 80021ee:	015b      	lsls	r3, r3, #5
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	4413      	add	r3, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	e002      	b.n	8002202 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3301      	adds	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d3c6      	bcc.n	800219e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6819      	ldr	r1, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	f241 030c 	movw	r3, #4108	; 0x100c
 800221a:	440b      	add	r3, r1
 800221c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_ETH_TransmitFrame+0x24>
 800225c:	2302      	movs	r3, #2
 800225e:	e0cd      	b.n	80023fc <HAL_ETH_TransmitFrame+0x1c0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002286:	2301      	movs	r3, #1
 8002288:	e0b8      	b.n	80023fc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da09      	bge.n	80022a8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2212      	movs	r2, #18
 8002298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0a9      	b.n	80023fc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d915      	bls.n	80022de <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	4a54      	ldr	r2, [pc, #336]	; (8002408 <HAL_ETH_TransmitFrame+0x1cc>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0a9b      	lsrs	r3, r3, #10
 80022bc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4b51      	ldr	r3, [pc, #324]	; (8002408 <HAL_ETH_TransmitFrame+0x1cc>)
 80022c2:	fba3 1302 	umull	r1, r3, r3, r2
 80022c6:	0a9b      	lsrs	r3, r3, #10
 80022c8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3301      	adds	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e001      	b.n	80022e2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d11c      	bne.n	8002322 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80022f6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002302:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002312:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	461a      	mov	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002320:	e04b      	b.n	80023ba <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	e044      	b.n	80023b2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002336:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d107      	bne.n	800234e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800234c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002356:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3b01      	subs	r3, #1
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d116      	bne.n	8002390 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002370:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	4a25      	ldr	r2, [pc, #148]	; (800240c <HAL_ETH_TransmitFrame+0x1d0>)
 8002376:	fb02 f203 	mul.w	r2, r2, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	4413      	add	r3, r2
 800237e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002382:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800238e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800239e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	461a      	mov	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	3301      	adds	r3, #1
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d3b6      	bcc.n	8002328 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	f241 0314 	movw	r3, #4116	; 0x1014
 80023c2:	4413      	add	r3, r2
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00d      	beq.n	80023ea <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f241 0314 	movw	r3, #4116	; 0x1014
 80023d6:	4413      	add	r3, r2
 80023d8:	2204      	movs	r2, #4
 80023da:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	f241 0304 	movw	r3, #4100	; 0x1004
 80023e4:	4413      	add	r3, r2
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	ac02b00b 	.word	0xac02b00b
 800240c:	fffffa0c 	.word	0xfffffa0c

08002410 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_ETH_GetReceivedFrame+0x1a>
 8002426:	2302      	movs	r3, #2
 8002428:	e070      	b.n	800250c <HAL_ETH_GetReceivedFrame+0xfc>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db5a      	blt.n	80024fa <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d030      	beq.n	80024b4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	2b01      	cmp	r3, #1
 8002462:	d103      	bne.n	800246c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002480:	3b04      	subs	r3, #4
 8002482:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e02b      	b.n	800250c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28
 80024e2:	e00a      	b.n	80024fa <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	461a      	mov	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	460b      	mov	r3, r1
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b82      	cmp	r3, #130	; 0x82
 8002538:	d101      	bne.n	800253e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	e050      	b.n	80025e0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2282      	movs	r2, #130	; 0x82
 8002542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 031c 	and.w	r3, r3, #28
 8002554:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8a1b      	ldrh	r3, [r3, #16]
 800255a:	02db      	lsls	r3, r3, #11
 800255c:	b29b      	uxth	r3, r3
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002564:	897b      	ldrh	r3, [r7, #10]
 8002566:	019b      	lsls	r3, r3, #6
 8002568:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f023 0302 	bic.w	r3, r3, #2
 8002578:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800258a:	f7fe ff0d 	bl	80013a8 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002590:	e015      	b.n	80025be <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002592:	f7fe ff09 	bl	80013a8 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d309      	bcc.n	80025b6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e014      	b.n	80025e0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e4      	bne.n	8002592 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	460b      	mov	r3, r1
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b42      	cmp	r3, #66	; 0x42
 8002608:	d101      	bne.n	800260e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
 800260c:	e04e      	b.n	80026ac <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2242      	movs	r2, #66	; 0x42
 8002612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 031c 	and.w	r3, r3, #28
 8002624:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8a1b      	ldrh	r3, [r3, #16]
 800262a:	02db      	lsls	r3, r3, #11
 800262c:	b29b      	uxth	r3, r3
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002634:	897b      	ldrh	r3, [r7, #10]
 8002636:	019b      	lsls	r3, r3, #6
 8002638:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002664:	f7fe fea0 	bl	80013a8 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800266a:	e015      	b.n	8002698 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800266c:	f7fe fe9c 	bl	80013a8 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267a:	d309      	bcc.n	8002690 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e00d      	b.n	80026ac <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e4      	bne.n	800266c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_ETH_Start+0x16>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e01f      	b.n	800270a <HAL_ETH_Start+0x56>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fa1c 	bl	8002b18 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fa36 	bl	8002b52 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fa80 	bl	8002bec <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fa4d 	bl	8002b8c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fa62 	bl	8002bbc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b0b0      	sub	sp, #192	; 0xc0
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002730:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002738:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002742:	2300      	movs	r3, #0
 8002744:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800274a:	2300      	movs	r3, #0
 800274c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800275a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275e:	663b      	str	r3, [r7, #96]	; 0x60
 8002760:	e001      	b.n	8002766 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800276a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002770:	2300      	movs	r3, #0
 8002772:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002780:	2340      	movs	r3, #64	; 0x40
 8002782:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800278a:	2300      	movs	r3, #0
 800278c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80027e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027ec:	4bab      	ldr	r3, [pc, #684]	; (8002a9c <ETH_MACDMAConfig+0x388>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80027f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80027f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80027f8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80027fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80027fc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80027fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002800:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002806:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800280a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800280c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800280e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002814:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002818:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800281a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800281c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800281e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002820:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002824:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002828:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800282a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800283c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002848:	2001      	movs	r0, #1
 800284a:	f7fe fdb9 	bl	80013c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002856:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002858:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800285a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800285c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800285e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002860:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002862:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002866:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800286c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800286e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002872:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002874:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002878:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800287c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002884:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002886:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002892:	2001      	movs	r0, #1
 8002894:	f7fe fd94 	bl	80013c0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028a0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028aa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80028b4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80028c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028c4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028c8:	4013      	ands	r3, r2
 80028ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80028ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028d2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80028d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80028d8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80028da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80028de:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80028e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80028e4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80028e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80028ea:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80028ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80028f0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80028f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002904:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002910:	2001      	movs	r0, #1
 8002912:	f7fe fd55 	bl	80013c0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800291e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002920:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002924:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800293a:	2001      	movs	r0, #1
 800293c:	f7fe fd40 	bl	80013c0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002948:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800294e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002952:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002958:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800295c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800296e:	2304      	movs	r3, #4
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800297e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800298e:	2300      	movs	r3, #0
 8002990:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002992:	2300      	movs	r3, #0
 8002994:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	f241 0318 	movw	r3, #4120	; 0x1018
 800299e:	4413      	add	r3, r2
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80029a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <ETH_MACDMAConfig+0x38c>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029b2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80029b4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029b6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80029b8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80029ba:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80029bc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80029be:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80029c0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80029c2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80029c4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80029c6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80029c8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80029ca:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80029ce:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80029d2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	f241 0318 	movw	r3, #4120	; 0x1018
 80029e6:	4413      	add	r3, r2
 80029e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029ec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	f241 0318 	movw	r3, #4120	; 0x1018
 80029f6:	4413      	add	r3, r2
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7fe fcde 	bl	80013c0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a12:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a18:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002a1c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a20:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002a24:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a28:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002a2a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a2e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7fe fcb7 	bl	80013c0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a5e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10d      	bne.n	8002a84 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a70:	4413      	add	r3, r2
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6811      	ldr	r1, [r2, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <ETH_MACDMAConfig+0x390>)
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a80:	440b      	add	r3, r1
 8002a82:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f80b 	bl	8002aa8 <ETH_MACAddressConfig>
}
 8002a92:	bf00      	nop
 8002a94:	37c0      	adds	r7, #192	; 0xc0
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	ff20810f 	.word	0xff20810f
 8002aa0:	f8de3f23 	.word	0xf8de3f23
 8002aa4:	00010040 	.word	0x00010040

08002aa8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3305      	adds	r3, #5
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	3204      	adds	r2, #4
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <ETH_MACAddressConfig+0x68>)
 8002aca:	4413      	add	r3, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3303      	adds	r3, #3
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	061a      	lsls	r2, r3, #24
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3302      	adds	r3, #2
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	4313      	orrs	r3, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <ETH_MACAddressConfig+0x6c>)
 8002afa:	4413      	add	r3, r2
 8002afc:	461a      	mov	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	6013      	str	r3, [r2, #0]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40028040 	.word	0x40028040
 8002b14:	40028044 	.word	0x40028044

08002b18 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0208 	orr.w	r2, r2, #8
 8002b32:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7fe fc3f 	bl	80013c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	601a      	str	r2, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0204 	orr.w	r2, r2, #4
 8002b6c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b76:	2001      	movs	r0, #1
 8002b78:	f7fe fc22 	bl	80013c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	601a      	str	r2, [r3, #0]
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b9c:	4413      	add	r3, r2
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6811      	ldr	r1, [r2, #0]
 8002ba4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ba8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bac:	440b      	add	r3, r1
 8002bae:	601a      	str	r2, [r3, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bcc:	4413      	add	r3, r2
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6811      	ldr	r1, [r2, #0]
 8002bd4:	f043 0202 	orr.w	r2, r3, #2
 8002bd8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bdc:	440b      	add	r3, r1
 8002bde:	601a      	str	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c00:	4413      	add	r3, r2
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6811      	ldr	r1, [r2, #0]
 8002c08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c0c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c10:	440b      	add	r3, r1
 8002c12:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c1c:	4413      	add	r3, r2
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f7fe fbcc 	bl	80013c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6819      	ldr	r1, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c32:	440b      	add	r3, r1
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	e175      	b.n	8002f4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c60:	2201      	movs	r2, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	f040 8164 	bne.w	8002f46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x4e>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b12      	cmp	r3, #18
 8002c8c:	d123      	bne.n	8002cd6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	08da      	lsrs	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3208      	adds	r2, #8
 8002c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	08da      	lsrs	r2, r3, #3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3208      	adds	r2, #8
 8002cd0:	69b9      	ldr	r1, [r7, #24]
 8002cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0203 	and.w	r2, r3, #3
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d00b      	beq.n	8002d2a <HAL_GPIO_Init+0xea>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d007      	beq.n	8002d2a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d1e:	2b11      	cmp	r3, #17
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b12      	cmp	r3, #18
 8002d28:	d130      	bne.n	8002d8c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	2203      	movs	r2, #3
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d60:	2201      	movs	r2, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 0201 	and.w	r2, r3, #1
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80be 	beq.w	8002f46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dca:	4b65      	ldr	r3, [pc, #404]	; (8002f60 <HAL_GPIO_Init+0x320>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	4a64      	ldr	r2, [pc, #400]	; (8002f60 <HAL_GPIO_Init+0x320>)
 8002dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd6:	4b62      	ldr	r3, [pc, #392]	; (8002f60 <HAL_GPIO_Init+0x320>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002de2:	4a60      	ldr	r2, [pc, #384]	; (8002f64 <HAL_GPIO_Init+0x324>)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a57      	ldr	r2, [pc, #348]	; (8002f68 <HAL_GPIO_Init+0x328>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d037      	beq.n	8002e7e <HAL_GPIO_Init+0x23e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a56      	ldr	r2, [pc, #344]	; (8002f6c <HAL_GPIO_Init+0x32c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d031      	beq.n	8002e7a <HAL_GPIO_Init+0x23a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a55      	ldr	r2, [pc, #340]	; (8002f70 <HAL_GPIO_Init+0x330>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d02b      	beq.n	8002e76 <HAL_GPIO_Init+0x236>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a54      	ldr	r2, [pc, #336]	; (8002f74 <HAL_GPIO_Init+0x334>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d025      	beq.n	8002e72 <HAL_GPIO_Init+0x232>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a53      	ldr	r2, [pc, #332]	; (8002f78 <HAL_GPIO_Init+0x338>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01f      	beq.n	8002e6e <HAL_GPIO_Init+0x22e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <HAL_GPIO_Init+0x33c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d019      	beq.n	8002e6a <HAL_GPIO_Init+0x22a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a51      	ldr	r2, [pc, #324]	; (8002f80 <HAL_GPIO_Init+0x340>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <HAL_GPIO_Init+0x226>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a50      	ldr	r2, [pc, #320]	; (8002f84 <HAL_GPIO_Init+0x344>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00d      	beq.n	8002e62 <HAL_GPIO_Init+0x222>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4f      	ldr	r2, [pc, #316]	; (8002f88 <HAL_GPIO_Init+0x348>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <HAL_GPIO_Init+0x21e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4e      	ldr	r2, [pc, #312]	; (8002f8c <HAL_GPIO_Init+0x34c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_GPIO_Init+0x21a>
 8002e56:	2309      	movs	r3, #9
 8002e58:	e012      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e5a:	230a      	movs	r3, #10
 8002e5c:	e010      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e5e:	2308      	movs	r3, #8
 8002e60:	e00e      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e62:	2307      	movs	r3, #7
 8002e64:	e00c      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e66:	2306      	movs	r3, #6
 8002e68:	e00a      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e6a:	2305      	movs	r3, #5
 8002e6c:	e008      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e6e:	2304      	movs	r3, #4
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e72:	2303      	movs	r3, #3
 8002e74:	e004      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f002 0203 	and.w	r2, r2, #3
 8002e86:	0092      	lsls	r2, r2, #2
 8002e88:	4093      	lsls	r3, r2
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e90:	4934      	ldr	r1, [pc, #208]	; (8002f64 <HAL_GPIO_Init+0x324>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e9e:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <HAL_GPIO_Init+0x350>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec2:	4a33      	ldr	r2, [pc, #204]	; (8002f90 <HAL_GPIO_Init+0x350>)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ec8:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <HAL_GPIO_Init+0x350>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eec:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <HAL_GPIO_Init+0x350>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ef2:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <HAL_GPIO_Init+0x350>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f16:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <HAL_GPIO_Init+0x350>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f1c:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <HAL_GPIO_Init+0x350>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f40:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <HAL_GPIO_Init+0x350>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	f67f ae86 	bls.w	8002c60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f54:	bf00      	nop
 8002f56:	3724      	adds	r7, #36	; 0x24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020400 	.word	0x40020400
 8002f70:	40020800 	.word	0x40020800
 8002f74:	40020c00 	.word	0x40020c00
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40021400 	.word	0x40021400
 8002f80:	40021800 	.word	0x40021800
 8002f84:	40021c00 	.word	0x40021c00
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	40022400 	.word	0x40022400
 8002f90:	40013c00 	.word	0x40013c00

08002f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa4:	787b      	ldrb	r3, [r7, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fb0:	e003      	b.n	8002fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fb2:	887b      	ldrh	r3, [r7, #2]
 8002fb4:	041a      	lsls	r2, r3, #16
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	619a      	str	r2, [r3, #24]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	887b      	ldrh	r3, [r7, #2]
 8002fd8:	401a      	ands	r2, r3
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d104      	bne.n	8002fea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	041a      	lsls	r2, r3, #16
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002fe8:	e002      	b.n	8002ff0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e25c      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8087 	beq.w	800312e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003020:	4b96      	ldr	r3, [pc, #600]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b04      	cmp	r3, #4
 800302a:	d00c      	beq.n	8003046 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302c:	4b93      	ldr	r3, [pc, #588]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d112      	bne.n	800305e <HAL_RCC_OscConfig+0x62>
 8003038:	4b90      	ldr	r3, [pc, #576]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003044:	d10b      	bne.n	800305e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003046:	4b8d      	ldr	r3, [pc, #564]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d06c      	beq.n	800312c <HAL_RCC_OscConfig+0x130>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d168      	bne.n	800312c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e236      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x7a>
 8003068:	4b84      	ldr	r3, [pc, #528]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a83      	ldr	r2, [pc, #524]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e02e      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x9c>
 800307e:	4b7f      	ldr	r3, [pc, #508]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7e      	ldr	r2, [pc, #504]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b7c      	ldr	r3, [pc, #496]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7b      	ldr	r2, [pc, #492]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e01d      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0xc0>
 80030a2:	4b76      	ldr	r3, [pc, #472]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a75      	ldr	r2, [pc, #468]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b73      	ldr	r3, [pc, #460]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a72      	ldr	r2, [pc, #456]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 80030bc:	4b6f      	ldr	r3, [pc, #444]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a6e      	ldr	r2, [pc, #440]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b6c      	ldr	r3, [pc, #432]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6b      	ldr	r2, [pc, #428]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe f964 	bl	80013a8 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e4:	f7fe f960 	bl	80013a8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	; 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e1ea      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b61      	ldr	r3, [pc, #388]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0xe8>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe f950 	bl	80013a8 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800310c:	f7fe f94c 	bl	80013a8 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1d6      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	4b57      	ldr	r3, [pc, #348]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x110>
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d069      	beq.n	800320e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313a:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b4d      	ldr	r3, [pc, #308]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b08      	cmp	r3, #8
 8003150:	d11c      	bne.n	800318c <HAL_RCC_OscConfig+0x190>
 8003152:	4b4a      	ldr	r3, [pc, #296]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d116      	bne.n	800318c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x17a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e1aa      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	493d      	ldr	r1, [pc, #244]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	e040      	b.n	800320e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d023      	beq.n	80031dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003194:	4b39      	ldr	r3, [pc, #228]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a38      	ldr	r2, [pc, #224]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe f902 	bl	80013a8 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fe f8fe 	bl	80013a8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e188      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ba:	4b30      	ldr	r3, [pc, #192]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4929      	ldr	r1, [pc, #164]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
 80031da:	e018      	b.n	800320e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a26      	ldr	r2, [pc, #152]	; (800327c <HAL_RCC_OscConfig+0x280>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe f8de 	bl	80013a8 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f0:	f7fe f8da 	bl	80013a8 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e164      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d038      	beq.n	800328c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d019      	beq.n	8003256 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	4a15      	ldr	r2, [pc, #84]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7fe f8bb 	bl	80013a8 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003236:	f7fe f8b7 	bl	80013a8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e141      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800324a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x23a>
 8003254:	e01a      	b.n	800328c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_OscConfig+0x280>)
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <HAL_RCC_OscConfig+0x280>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe f8a1 	bl	80013a8 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326a:	f7fe f89d 	bl	80013a8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d903      	bls.n	8003280 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e127      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
 800327c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003280:	4b94      	ldr	r3, [pc, #592]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80a4 	beq.w	80033e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329a:	4b8e      	ldr	r3, [pc, #568]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	4b8b      	ldr	r3, [pc, #556]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a8a      	ldr	r2, [pc, #552]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
 80032b2:	4b88      	ldr	r3, [pc, #544]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c2:	4b85      	ldr	r3, [pc, #532]	; (80034d8 <HAL_RCC_OscConfig+0x4dc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d118      	bne.n	8003300 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032ce:	4b82      	ldr	r3, [pc, #520]	; (80034d8 <HAL_RCC_OscConfig+0x4dc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a81      	ldr	r2, [pc, #516]	; (80034d8 <HAL_RCC_OscConfig+0x4dc>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fe f865 	bl	80013a8 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fe f861 	bl	80013a8 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	; 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0eb      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f4:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <HAL_RCC_OscConfig+0x4dc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x31a>
 8003308:	4b72      	ldr	r3, [pc, #456]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a71      	ldr	r2, [pc, #452]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
 8003314:	e02d      	b.n	8003372 <HAL_RCC_OscConfig+0x376>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x33c>
 800331e:	4b6d      	ldr	r3, [pc, #436]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a6c      	ldr	r2, [pc, #432]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
 800332a:	4b6a      	ldr	r3, [pc, #424]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a69      	ldr	r2, [pc, #420]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	e01c      	b.n	8003372 <HAL_RCC_OscConfig+0x376>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x35e>
 8003340:	4b64      	ldr	r3, [pc, #400]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a63      	ldr	r2, [pc, #396]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
 800334c:	4b61      	ldr	r3, [pc, #388]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a60      	ldr	r2, [pc, #384]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	e00b      	b.n	8003372 <HAL_RCC_OscConfig+0x376>
 800335a:	4b5e      	ldr	r3, [pc, #376]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a5d      	ldr	r2, [pc, #372]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	4b5b      	ldr	r3, [pc, #364]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a5a      	ldr	r2, [pc, #360]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d015      	beq.n	80033a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fe f815 	bl	80013a8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fe f811 	bl	80013a8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e099      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	4b4e      	ldr	r3, [pc, #312]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ee      	beq.n	8003382 <HAL_RCC_OscConfig+0x386>
 80033a4:	e014      	b.n	80033d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a6:	f7fd ffff 	bl	80013a8 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fd fffb 	bl	80013a8 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e083      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b3f      	ldr	r3, [pc, #252]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a3e      	ldr	r2, [pc, #248]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d06f      	beq.n	80034ca <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ea:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d067      	beq.n	80034c6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d149      	bne.n	8003492 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a34      	ldr	r2, [pc, #208]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fd ffcd 	bl	80013a8 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003412:	f7fd ffc9 	bl	80013a8 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e053      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003424:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	019b      	lsls	r3, r3, #6
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	3b01      	subs	r3, #1
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	4313      	orrs	r3, r2
 8003456:	4a1f      	ldr	r2, [pc, #124]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003458:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800345c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fd ff9d 	bl	80013a8 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003472:	f7fd ff99 	bl	80013a8 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e023      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x476>
 8003490:	e01b      	b.n	80034ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 8003498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800349c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fd ff83 	bl	80013a8 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fd ff7f 	bl	80013a8 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e009      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCC_OscConfig+0x4d8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4aa>
 80034c4:	e001      	b.n	80034ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40007000 	.word	0x40007000

080034dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0ce      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f4:	4b69      	ldr	r3, [pc, #420]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d910      	bls.n	8003524 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b66      	ldr	r3, [pc, #408]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 020f 	bic.w	r2, r3, #15
 800350a:	4964      	ldr	r1, [pc, #400]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b62      	ldr	r3, [pc, #392]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0b6      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800353c:	4b58      	ldr	r3, [pc, #352]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a57      	ldr	r2, [pc, #348]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003554:	4b52      	ldr	r3, [pc, #328]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4a51      	ldr	r2, [pc, #324]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800355e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003560:	4b4f      	ldr	r3, [pc, #316]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	494c      	ldr	r1, [pc, #304]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d040      	beq.n	8003600 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b46      	ldr	r3, [pc, #280]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d115      	bne.n	80035be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07d      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359e:	4b40      	ldr	r3, [pc, #256]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e071      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ae:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e069      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035be:	4b38      	ldr	r3, [pc, #224]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4935      	ldr	r1, [pc, #212]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d0:	f7fd feea 	bl	80013a8 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7fd fee6 	bl	80013a8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e051      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 020c 	and.w	r2, r3, #12
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1eb      	bne.n	80035d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003600:	4b26      	ldr	r3, [pc, #152]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d210      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 020f 	bic.w	r2, r3, #15
 8003616:	4921      	ldr	r1, [pc, #132]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b1f      	ldr	r3, [pc, #124]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e030      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4915      	ldr	r1, [pc, #84]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	490d      	ldr	r1, [pc, #52]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800366e:	f000 f81d 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8003672:	4601      	mov	r1, r0
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	fa21 f303 	lsr.w	r3, r1, r3
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800368a:	2000      	movs	r0, #0
 800368c:	f7fd fe48 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023c00 	.word	0x40023c00
 80036a0:	40023800 	.word	0x40023800
 80036a4:	080112f0 	.word	0x080112f0
 80036a8:	20000004 	.word	0x20000004

080036ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	2300      	movs	r3, #0
 80036bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c2:	4b63      	ldr	r3, [pc, #396]	; (8003850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d007      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x32>
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d008      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x38>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f040 80b4 	bne.w	8003840 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d8:	4b5e      	ldr	r3, [pc, #376]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036da:	60bb      	str	r3, [r7, #8]
       break;
 80036dc:	e0b3      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036de:	4b5e      	ldr	r3, [pc, #376]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036e0:	60bb      	str	r3, [r7, #8]
      break;
 80036e2:	e0b0      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036e4:	4b5a      	ldr	r3, [pc, #360]	; (8003850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036ee:	4b58      	ldr	r3, [pc, #352]	; (8003850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d04a      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fa:	4b55      	ldr	r3, [pc, #340]	; (8003850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	f04f 0400 	mov.w	r4, #0
 8003704:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	ea03 0501 	and.w	r5, r3, r1
 8003710:	ea04 0602 	and.w	r6, r4, r2
 8003714:	4629      	mov	r1, r5
 8003716:	4632      	mov	r2, r6
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	f04f 0400 	mov.w	r4, #0
 8003720:	0154      	lsls	r4, r2, #5
 8003722:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003726:	014b      	lsls	r3, r1, #5
 8003728:	4619      	mov	r1, r3
 800372a:	4622      	mov	r2, r4
 800372c:	1b49      	subs	r1, r1, r5
 800372e:	eb62 0206 	sbc.w	r2, r2, r6
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	f04f 0400 	mov.w	r4, #0
 800373a:	0194      	lsls	r4, r2, #6
 800373c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003740:	018b      	lsls	r3, r1, #6
 8003742:	1a5b      	subs	r3, r3, r1
 8003744:	eb64 0402 	sbc.w	r4, r4, r2
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	00e2      	lsls	r2, r4, #3
 8003752:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003756:	00d9      	lsls	r1, r3, #3
 8003758:	460b      	mov	r3, r1
 800375a:	4614      	mov	r4, r2
 800375c:	195b      	adds	r3, r3, r5
 800375e:	eb44 0406 	adc.w	r4, r4, r6
 8003762:	f04f 0100 	mov.w	r1, #0
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	0262      	lsls	r2, r4, #9
 800376c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003770:	0259      	lsls	r1, r3, #9
 8003772:	460b      	mov	r3, r1
 8003774:	4614      	mov	r4, r2
 8003776:	4618      	mov	r0, r3
 8003778:	4621      	mov	r1, r4
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f04f 0400 	mov.w	r4, #0
 8003780:	461a      	mov	r2, r3
 8003782:	4623      	mov	r3, r4
 8003784:	f7fc fd9c 	bl	80002c0 <__aeabi_uldivmod>
 8003788:	4603      	mov	r3, r0
 800378a:	460c      	mov	r4, r1
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	e049      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003790:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	f04f 0400 	mov.w	r4, #0
 800379a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	ea03 0501 	and.w	r5, r3, r1
 80037a6:	ea04 0602 	and.w	r6, r4, r2
 80037aa:	4629      	mov	r1, r5
 80037ac:	4632      	mov	r2, r6
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	f04f 0400 	mov.w	r4, #0
 80037b6:	0154      	lsls	r4, r2, #5
 80037b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037bc:	014b      	lsls	r3, r1, #5
 80037be:	4619      	mov	r1, r3
 80037c0:	4622      	mov	r2, r4
 80037c2:	1b49      	subs	r1, r1, r5
 80037c4:	eb62 0206 	sbc.w	r2, r2, r6
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	f04f 0400 	mov.w	r4, #0
 80037d0:	0194      	lsls	r4, r2, #6
 80037d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037d6:	018b      	lsls	r3, r1, #6
 80037d8:	1a5b      	subs	r3, r3, r1
 80037da:	eb64 0402 	sbc.w	r4, r4, r2
 80037de:	f04f 0100 	mov.w	r1, #0
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	00e2      	lsls	r2, r4, #3
 80037e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037ec:	00d9      	lsls	r1, r3, #3
 80037ee:	460b      	mov	r3, r1
 80037f0:	4614      	mov	r4, r2
 80037f2:	195b      	adds	r3, r3, r5
 80037f4:	eb44 0406 	adc.w	r4, r4, r6
 80037f8:	f04f 0100 	mov.w	r1, #0
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	02a2      	lsls	r2, r4, #10
 8003802:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003806:	0299      	lsls	r1, r3, #10
 8003808:	460b      	mov	r3, r1
 800380a:	4614      	mov	r4, r2
 800380c:	4618      	mov	r0, r3
 800380e:	4621      	mov	r1, r4
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f04f 0400 	mov.w	r4, #0
 8003816:	461a      	mov	r2, r3
 8003818:	4623      	mov	r3, r4
 800381a:	f7fc fd51 	bl	80002c0 <__aeabi_uldivmod>
 800381e:	4603      	mov	r3, r0
 8003820:	460c      	mov	r4, r1
 8003822:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	3301      	adds	r3, #1
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	60bb      	str	r3, [r7, #8]
      break;
 800383e:	e002      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003842:	60bb      	str	r3, [r7, #8]
      break;
 8003844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003846:	68bb      	ldr	r3, [r7, #8]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003850:	40023800 	.word	0x40023800
 8003854:	00f42400 	.word	0x00f42400
 8003858:	007a1200 	.word	0x007a1200

0800385c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_RCC_GetHCLKFreq+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000004 	.word	0x20000004

08003874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003878:	f7ff fff0 	bl	800385c <HAL_RCC_GetHCLKFreq>
 800387c:	4601      	mov	r1, r0
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0a9b      	lsrs	r3, r3, #10
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4a03      	ldr	r2, [pc, #12]	; (8003898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800388a:	5cd3      	ldrb	r3, [r2, r3]
 800388c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40023800 	.word	0x40023800
 8003898:	08011300 	.word	0x08011300

0800389c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038a0:	f7ff ffdc 	bl	800385c <HAL_RCC_GetHCLKFreq>
 80038a4:	4601      	mov	r1, r0
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	0b5b      	lsrs	r3, r3, #13
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4a03      	ldr	r2, [pc, #12]	; (80038c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b2:	5cd3      	ldrb	r3, [r2, r3]
 80038b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	08011300 	.word	0x08011300

080038c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d012      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038ec:	4b69      	ldr	r3, [pc, #420]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a68      	ldr	r2, [pc, #416]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038f6:	6093      	str	r3, [r2, #8]
 80038f8:	4b66      	ldr	r3, [pc, #408]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003900:	4964      	ldr	r1, [pc, #400]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d017      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800391e:	4b5d      	ldr	r3, [pc, #372]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	4959      	ldr	r1, [pc, #356]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800393c:	d101      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800393e:	2301      	movs	r3, #1
 8003940:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d017      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800395a:	4b4e      	ldr	r3, [pc, #312]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003960:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	494a      	ldr	r1, [pc, #296]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003978:	d101      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003986:	2301      	movs	r3, #1
 8003988:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003996:	2301      	movs	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 808b 	beq.w	8003abe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039a8:	4b3a      	ldr	r3, [pc, #232]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	4a39      	ldr	r2, [pc, #228]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b2:	6413      	str	r3, [r2, #64]	; 0x40
 80039b4:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039c0:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a34      	ldr	r2, [pc, #208]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fd fcec 	bl	80013a8 <HAL_GetTick>
 80039d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d4:	f7fd fce8 	bl	80013a8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	; 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e355      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039e6:	4b2c      	ldr	r3, [pc, #176]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039f2:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d035      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d02e      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a10:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a26:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a32:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a38:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d114      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fd fcb0 	bl	80013a8 <HAL_GetTick>
 8003a48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a4c:	f7fd fcac 	bl	80013a8 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e317      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0ee      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a7a:	d111      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a8a:	400b      	ands	r3, r1
 8003a8c:	4901      	ldr	r1, [pc, #4]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
 8003a92:	e00b      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	0ffffcff 	.word	0x0ffffcff
 8003aa0:	4bb0      	ldr	r3, [pc, #704]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4aaf      	ldr	r2, [pc, #700]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003aa6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003aaa:	6093      	str	r3, [r2, #8]
 8003aac:	4bad      	ldr	r3, [pc, #692]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003aae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab8:	49aa      	ldr	r1, [pc, #680]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d010      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003aca:	4ba6      	ldr	r3, [pc, #664]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad0:	4aa4      	ldr	r2, [pc, #656]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ad6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ada:	4ba2      	ldr	r3, [pc, #648]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003adc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	499f      	ldr	r1, [pc, #636]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003af8:	4b9a      	ldr	r3, [pc, #616]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b06:	4997      	ldr	r1, [pc, #604]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b1a:	4b92      	ldr	r3, [pc, #584]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b28:	498e      	ldr	r1, [pc, #568]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b3c:	4b89      	ldr	r3, [pc, #548]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4a:	4986      	ldr	r1, [pc, #536]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b5e:	4b81      	ldr	r3, [pc, #516]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	497d      	ldr	r1, [pc, #500]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b80:	4b78      	ldr	r3, [pc, #480]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	f023 0203 	bic.w	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	4975      	ldr	r1, [pc, #468]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ba2:	4b70      	ldr	r3, [pc, #448]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	f023 020c 	bic.w	r2, r3, #12
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb0:	496c      	ldr	r1, [pc, #432]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bc4:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	4964      	ldr	r1, [pc, #400]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003be6:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf4:	495b      	ldr	r1, [pc, #364]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c08:	4b56      	ldr	r3, [pc, #344]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	4953      	ldr	r1, [pc, #332]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c2a:	4b4e      	ldr	r3, [pc, #312]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	494a      	ldr	r1, [pc, #296]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c4c:	4b45      	ldr	r3, [pc, #276]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5a:	4942      	ldr	r1, [pc, #264]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7c:	4939      	ldr	r1, [pc, #228]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c90:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c9e:	4931      	ldr	r1, [pc, #196]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d011      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cb2:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc0:	4928      	ldr	r1, [pc, #160]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ccc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d00:	4918      	ldr	r1, [pc, #96]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d24:	490f      	ldr	r1, [pc, #60]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d005      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d3a:	f040 80d8 	bne.w	8003eee <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4a:	f7fd fb2d 	bl	80013a8 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d52:	f7fd fb29 	bl	80013a8 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b64      	cmp	r3, #100	; 0x64
 8003d5e:	d903      	bls.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e196      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003d64:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d68:	4b6c      	ldr	r3, [pc, #432]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ee      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d021      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d11d      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d88:	4b64      	ldr	r3, [pc, #400]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d96:	4b61      	ldr	r3, [pc, #388]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9c:	0e1b      	lsrs	r3, r3, #24
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	019a      	lsls	r2, r3, #6
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	061b      	lsls	r3, r3, #24
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	071b      	lsls	r3, r3, #28
 8003dbc:	4957      	ldr	r1, [pc, #348]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02e      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dee:	d129      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003df0:	4b4a      	ldr	r3, [pc, #296]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df6:	0c1b      	lsrs	r3, r3, #16
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e04:	0f1b      	lsrs	r3, r3, #28
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	019a      	lsls	r2, r3, #6
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	061b      	lsls	r3, r3, #24
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	071b      	lsls	r3, r3, #28
 8003e24:	493d      	ldr	r1, [pc, #244]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e32:	f023 021f 	bic.w	r2, r3, #31
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	4937      	ldr	r1, [pc, #220]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01d      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e50:	4b32      	ldr	r3, [pc, #200]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e56:	0e1b      	lsrs	r3, r3, #24
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e5e:	4b2f      	ldr	r3, [pc, #188]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e64:	0f1b      	lsrs	r3, r3, #28
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	019a      	lsls	r2, r3, #6
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	071b      	lsls	r3, r3, #28
 8003e84:	4925      	ldr	r1, [pc, #148]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d011      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	019a      	lsls	r2, r3, #6
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	071b      	lsls	r3, r3, #28
 8003eb4:	4919      	ldr	r1, [pc, #100]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ebc:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a16      	ldr	r2, [pc, #88]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec8:	f7fd fa6e 	bl	80013a8 <HAL_GetTick>
 8003ecc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ed0:	f7fd fa6a 	bl	80013a8 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0d7      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	f040 80cd 	bne.w	8004090 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f02:	f7fd fa51 	bl	80013a8 <HAL_GetTick>
 8003f06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f0a:	f7fd fa4d 	bl	80013a8 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b64      	cmp	r3, #100	; 0x64
 8003f16:	d903      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0ba      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003f1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f20:	4b5e      	ldr	r3, [pc, #376]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f2c:	d0ed      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d02e      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d12a      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f56:	4b51      	ldr	r3, [pc, #324]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f64:	4b4d      	ldr	r3, [pc, #308]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	0f1b      	lsrs	r3, r3, #28
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	019a      	lsls	r2, r3, #6
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	061b      	lsls	r3, r3, #24
 8003f84:	431a      	orrs	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	071b      	lsls	r3, r3, #28
 8003f8a:	4944      	ldr	r1, [pc, #272]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f92:	4b42      	ldr	r3, [pc, #264]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	493d      	ldr	r1, [pc, #244]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d022      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc0:	d11d      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fc2:	4b36      	ldr	r3, [pc, #216]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	0e1b      	lsrs	r3, r3, #24
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	0f1b      	lsrs	r3, r3, #28
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	019a      	lsls	r2, r3, #6
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	431a      	orrs	r2, r3
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	061b      	lsls	r3, r3, #24
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	071b      	lsls	r3, r3, #28
 8003ff6:	4929      	ldr	r1, [pc, #164]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d028      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800400a:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	0e1b      	lsrs	r3, r3, #24
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004018:	4b20      	ldr	r3, [pc, #128]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	0c1b      	lsrs	r3, r3, #16
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	019a      	lsls	r2, r3, #6
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	431a      	orrs	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	071b      	lsls	r3, r3, #28
 800403e:	4917      	ldr	r1, [pc, #92]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	4911      	ldr	r1, [pc, #68]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0e      	ldr	r2, [pc, #56]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004068:	f7fd f99e 	bl	80013a8 <HAL_GetTick>
 800406c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004070:	f7fd f99a 	bl	80013a8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e007      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800408a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800408e:	d1ef      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800

080040a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e084      	b.n	80041bc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fc fe2d 	bl	8000d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040f2:	d902      	bls.n	80040fa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e002      	b.n	8004100 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004108:	d007      	beq.n	800411a <HAL_SPI_Init+0x7a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004112:	d002      	beq.n	800411a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800412a:	d903      	bls.n	8004134 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
 8004132:	e002      	b.n	800413a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	ea42 0103 	orr.w	r1, r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	f003 0204 	and.w	r2, r3, #4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	ea42 0103 	orr.w	r1, r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	430a      	orrs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69da      	ldr	r2, [r3, #28]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041d2:	2301      	movs	r3, #1
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_SPI_TransmitReceive+0x26>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e1fb      	b.n	80045e2 <HAL_SPI_TransmitReceive+0x41e>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041f2:	f7fd f8d9 	bl	80013a8 <HAL_GetTick>
 80041f6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041fe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004206:	887b      	ldrh	r3, [r7, #2]
 8004208:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800420e:	7efb      	ldrb	r3, [r7, #27]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d00e      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x6e>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800421a:	d106      	bne.n	800422a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d102      	bne.n	800422a <HAL_SPI_TransmitReceive+0x66>
 8004224:	7efb      	ldrb	r3, [r7, #27]
 8004226:	2b04      	cmp	r3, #4
 8004228:	d003      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800422a:	2302      	movs	r3, #2
 800422c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004230:	e1cd      	b.n	80045ce <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x80>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x80>
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d103      	bne.n	800424c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800424a:	e1c0      	b.n	80045ce <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b04      	cmp	r3, #4
 8004256:	d003      	beq.n	8004260 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2205      	movs	r2, #5
 800425c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	887a      	ldrh	r2, [r7, #2]
 8004286:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	887a      	ldrh	r2, [r7, #2]
 800428c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042a2:	d802      	bhi.n	80042aa <HAL_SPI_TransmitReceive+0xe6>
 80042a4:	8a3b      	ldrh	r3, [r7, #16]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d908      	bls.n	80042bc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	e007      	b.n	80042cc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d007      	beq.n	80042ea <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042f2:	d97c      	bls.n	80043ee <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_SPI_TransmitReceive+0x13e>
 80042fc:	8a7b      	ldrh	r3, [r7, #18]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d169      	bne.n	80043d6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	881a      	ldrh	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	1c9a      	adds	r2, r3, #2
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004326:	e056      	b.n	80043d6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b02      	cmp	r3, #2
 8004334:	d11b      	bne.n	800436e <HAL_SPI_TransmitReceive+0x1aa>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d016      	beq.n	800436e <HAL_SPI_TransmitReceive+0x1aa>
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	2b01      	cmp	r3, #1
 8004344:	d113      	bne.n	800436e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	881a      	ldrh	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	1c9a      	adds	r2, r3, #2
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b01      	cmp	r3, #1
 800437a:	d11c      	bne.n	80043b6 <HAL_SPI_TransmitReceive+0x1f2>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d016      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	b292      	uxth	r2, r2
 8004394:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	1c9a      	adds	r2, r3, #2
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043b2:	2301      	movs	r3, #1
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043b6:	f7fc fff7 	bl	80013a8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d807      	bhi.n	80043d6 <HAL_SPI_TransmitReceive+0x212>
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d003      	beq.n	80043d6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043d4:	e0fb      	b.n	80045ce <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1a3      	bne.n	8004328 <HAL_SPI_TransmitReceive+0x164>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d19d      	bne.n	8004328 <HAL_SPI_TransmitReceive+0x164>
 80043ec:	e0df      	b.n	80045ae <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x23a>
 80043f6:	8a7b      	ldrh	r3, [r7, #18]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	f040 80cb 	bne.w	8004594 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d912      	bls.n	800442e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	881a      	ldrh	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	1c9a      	adds	r2, r3, #2
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b02      	subs	r3, #2
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800442c:	e0b2      	b.n	8004594 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	330c      	adds	r3, #12
 8004438:	7812      	ldrb	r2, [r2, #0]
 800443a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004454:	e09e      	b.n	8004594 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b02      	cmp	r3, #2
 8004462:	d134      	bne.n	80044ce <HAL_SPI_TransmitReceive+0x30a>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d02f      	beq.n	80044ce <HAL_SPI_TransmitReceive+0x30a>
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	2b01      	cmp	r3, #1
 8004472:	d12c      	bne.n	80044ce <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d912      	bls.n	80044a4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	881a      	ldrh	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	1c9a      	adds	r2, r3, #2
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b02      	subs	r3, #2
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044a2:	e012      	b.n	80044ca <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	7812      	ldrb	r2, [r2, #0]
 80044b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d148      	bne.n	800456e <HAL_SPI_TransmitReceive+0x3aa>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d042      	beq.n	800456e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d923      	bls.n	800453c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	b292      	uxth	r2, r2
 8004500:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	1c9a      	adds	r2, r3, #2
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b02      	subs	r3, #2
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	d81f      	bhi.n	800456a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	e016      	b.n	800456a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f103 020c 	add.w	r2, r3, #12
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	7812      	ldrb	r2, [r2, #0]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800456a:	2301      	movs	r3, #1
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800456e:	f7fc ff1b 	bl	80013a8 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457a:	429a      	cmp	r2, r3
 800457c:	d803      	bhi.n	8004586 <HAL_SPI_TransmitReceive+0x3c2>
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d102      	bne.n	800458c <HAL_SPI_TransmitReceive+0x3c8>
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004592:	e01c      	b.n	80045ce <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	f47f af5b 	bne.w	8004456 <HAL_SPI_TransmitReceive+0x292>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f47f af54 	bne.w	8004456 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f8f0 	bl	8004798 <SPI_EndRxTxTransaction>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d006      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	661a      	str	r2, [r3, #96]	; 0x60
 80045ca:	e000      	b.n	80045ce <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3728      	adds	r7, #40	; 0x28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	603b      	str	r3, [r7, #0]
 80045f6:	4613      	mov	r3, r2
 80045f8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045fa:	e04c      	b.n	8004696 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d048      	beq.n	8004696 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004604:	f7fc fed0 	bl	80013a8 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d902      	bls.n	800461a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d13d      	bne.n	8004696 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004628:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004632:	d111      	bne.n	8004658 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800463c:	d004      	beq.n	8004648 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004646:	d107      	bne.n	8004658 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004656:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004660:	d10f      	bne.n	8004682 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004680:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e00f      	b.n	80046b6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	bf0c      	ite	eq
 80046a6:	2301      	moveq	r3, #1
 80046a8:	2300      	movne	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1a3      	bne.n	80045fc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80046cc:	e057      	b.n	800477e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046d4:	d106      	bne.n	80046e4 <SPI_WaitFifoStateUntilTimeout+0x26>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d048      	beq.n	800477e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80046ec:	f7fc fe5c 	bl	80013a8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d902      	bls.n	8004702 <SPI_WaitFifoStateUntilTimeout+0x44>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d13d      	bne.n	800477e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004710:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471a:	d111      	bne.n	8004740 <SPI_WaitFifoStateUntilTimeout+0x82>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d004      	beq.n	8004730 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472e:	d107      	bne.n	8004740 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004748:	d10f      	bne.n	800476a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004768:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e008      	b.n	8004790 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4013      	ands	r3, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	429a      	cmp	r2, r3
 800478c:	d19f      	bne.n	80046ce <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f7ff ff84 	bl	80046be <SPI_WaitFifoStateUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e027      	b.n	800481c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2200      	movs	r2, #0
 80047d4:	2180      	movs	r1, #128	; 0x80
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7ff ff07 	bl	80045ea <SPI_WaitFlagStateUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e6:	f043 0220 	orr.w	r2, r3, #32
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e014      	b.n	800481c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff ff5d 	bl	80046be <SPI_WaitFifoStateUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480e:	f043 0220 	orr.w	r2, r3, #32
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e000      	b.n	800481c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e040      	b.n	80048b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fc fcf0 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2224      	movs	r2, #36	; 0x24
 8004850:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f82c 	bl	80048c0 <UART_SetConfig>
 8004868:	4603      	mov	r3, r0
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e022      	b.n	80048b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fac4 	bl	8004e08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800488e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800489e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fb4b 	bl	8004f4c <UART_CheckIdleState>
 80048b6:	4603      	mov	r3, r0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4bb1      	ldr	r3, [pc, #708]	; (8004bb4 <UART_SetConfig+0x2f4>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	6939      	ldr	r1, [r7, #16]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a9f      	ldr	r2, [pc, #636]	; (8004bb8 <UART_SetConfig+0x2f8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d121      	bne.n	8004984 <UART_SetConfig+0xc4>
 8004940:	4b9e      	ldr	r3, [pc, #632]	; (8004bbc <UART_SetConfig+0x2fc>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b03      	cmp	r3, #3
 800494c:	d816      	bhi.n	800497c <UART_SetConfig+0xbc>
 800494e:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <UART_SetConfig+0x94>)
 8004950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004954:	08004965 	.word	0x08004965
 8004958:	08004971 	.word	0x08004971
 800495c:	0800496b 	.word	0x0800496b
 8004960:	08004977 	.word	0x08004977
 8004964:	2301      	movs	r3, #1
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e151      	b.n	8004c0e <UART_SetConfig+0x34e>
 800496a:	2302      	movs	r3, #2
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e14e      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004970:	2304      	movs	r3, #4
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e14b      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004976:	2308      	movs	r3, #8
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e148      	b.n	8004c0e <UART_SetConfig+0x34e>
 800497c:	2310      	movs	r3, #16
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	bf00      	nop
 8004982:	e144      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a8d      	ldr	r2, [pc, #564]	; (8004bc0 <UART_SetConfig+0x300>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d134      	bne.n	80049f8 <UART_SetConfig+0x138>
 800498e:	4b8b      	ldr	r3, [pc, #556]	; (8004bbc <UART_SetConfig+0x2fc>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b0c      	cmp	r3, #12
 800499a:	d829      	bhi.n	80049f0 <UART_SetConfig+0x130>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <UART_SetConfig+0xe4>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049d9 	.word	0x080049d9
 80049a8:	080049f1 	.word	0x080049f1
 80049ac:	080049f1 	.word	0x080049f1
 80049b0:	080049f1 	.word	0x080049f1
 80049b4:	080049e5 	.word	0x080049e5
 80049b8:	080049f1 	.word	0x080049f1
 80049bc:	080049f1 	.word	0x080049f1
 80049c0:	080049f1 	.word	0x080049f1
 80049c4:	080049df 	.word	0x080049df
 80049c8:	080049f1 	.word	0x080049f1
 80049cc:	080049f1 	.word	0x080049f1
 80049d0:	080049f1 	.word	0x080049f1
 80049d4:	080049eb 	.word	0x080049eb
 80049d8:	2300      	movs	r3, #0
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e117      	b.n	8004c0e <UART_SetConfig+0x34e>
 80049de:	2302      	movs	r3, #2
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e114      	b.n	8004c0e <UART_SetConfig+0x34e>
 80049e4:	2304      	movs	r3, #4
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e111      	b.n	8004c0e <UART_SetConfig+0x34e>
 80049ea:	2308      	movs	r3, #8
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e10e      	b.n	8004c0e <UART_SetConfig+0x34e>
 80049f0:	2310      	movs	r3, #16
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	bf00      	nop
 80049f6:	e10a      	b.n	8004c0e <UART_SetConfig+0x34e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a71      	ldr	r2, [pc, #452]	; (8004bc4 <UART_SetConfig+0x304>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d120      	bne.n	8004a44 <UART_SetConfig+0x184>
 8004a02:	4b6e      	ldr	r3, [pc, #440]	; (8004bbc <UART_SetConfig+0x2fc>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d00f      	beq.n	8004a30 <UART_SetConfig+0x170>
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d802      	bhi.n	8004a1a <UART_SetConfig+0x15a>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <UART_SetConfig+0x164>
 8004a18:	e010      	b.n	8004a3c <UART_SetConfig+0x17c>
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d005      	beq.n	8004a2a <UART_SetConfig+0x16a>
 8004a1e:	2b30      	cmp	r3, #48	; 0x30
 8004a20:	d009      	beq.n	8004a36 <UART_SetConfig+0x176>
 8004a22:	e00b      	b.n	8004a3c <UART_SetConfig+0x17c>
 8004a24:	2300      	movs	r3, #0
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e0f1      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	77fb      	strb	r3, [r7, #31]
 8004a2e:	e0ee      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004a30:	2304      	movs	r3, #4
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e0eb      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004a36:	2308      	movs	r3, #8
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e0e8      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	bf00      	nop
 8004a42:	e0e4      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a5f      	ldr	r2, [pc, #380]	; (8004bc8 <UART_SetConfig+0x308>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d120      	bne.n	8004a90 <UART_SetConfig+0x1d0>
 8004a4e:	4b5b      	ldr	r3, [pc, #364]	; (8004bbc <UART_SetConfig+0x2fc>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d00f      	beq.n	8004a7c <UART_SetConfig+0x1bc>
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	d802      	bhi.n	8004a66 <UART_SetConfig+0x1a6>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <UART_SetConfig+0x1b0>
 8004a64:	e010      	b.n	8004a88 <UART_SetConfig+0x1c8>
 8004a66:	2b80      	cmp	r3, #128	; 0x80
 8004a68:	d005      	beq.n	8004a76 <UART_SetConfig+0x1b6>
 8004a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a6c:	d009      	beq.n	8004a82 <UART_SetConfig+0x1c2>
 8004a6e:	e00b      	b.n	8004a88 <UART_SetConfig+0x1c8>
 8004a70:	2300      	movs	r3, #0
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e0cb      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004a76:	2302      	movs	r3, #2
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e0c8      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e0c5      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004a82:	2308      	movs	r3, #8
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e0c2      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	77fb      	strb	r3, [r7, #31]
 8004a8c:	bf00      	nop
 8004a8e:	e0be      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a4d      	ldr	r2, [pc, #308]	; (8004bcc <UART_SetConfig+0x30c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d124      	bne.n	8004ae4 <UART_SetConfig+0x224>
 8004a9a:	4b48      	ldr	r3, [pc, #288]	; (8004bbc <UART_SetConfig+0x2fc>)
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa8:	d012      	beq.n	8004ad0 <UART_SetConfig+0x210>
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aae:	d802      	bhi.n	8004ab6 <UART_SetConfig+0x1f6>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <UART_SetConfig+0x204>
 8004ab4:	e012      	b.n	8004adc <UART_SetConfig+0x21c>
 8004ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aba:	d006      	beq.n	8004aca <UART_SetConfig+0x20a>
 8004abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac0:	d009      	beq.n	8004ad6 <UART_SetConfig+0x216>
 8004ac2:	e00b      	b.n	8004adc <UART_SetConfig+0x21c>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e0a1      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004aca:	2302      	movs	r3, #2
 8004acc:	77fb      	strb	r3, [r7, #31]
 8004ace:	e09e      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	e09b      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e098      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004adc:	2310      	movs	r3, #16
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	bf00      	nop
 8004ae2:	e094      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a39      	ldr	r2, [pc, #228]	; (8004bd0 <UART_SetConfig+0x310>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d124      	bne.n	8004b38 <UART_SetConfig+0x278>
 8004aee:	4b33      	ldr	r3, [pc, #204]	; (8004bbc <UART_SetConfig+0x2fc>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afc:	d012      	beq.n	8004b24 <UART_SetConfig+0x264>
 8004afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b02:	d802      	bhi.n	8004b0a <UART_SetConfig+0x24a>
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <UART_SetConfig+0x258>
 8004b08:	e012      	b.n	8004b30 <UART_SetConfig+0x270>
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d006      	beq.n	8004b1e <UART_SetConfig+0x25e>
 8004b10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b14:	d009      	beq.n	8004b2a <UART_SetConfig+0x26a>
 8004b16:	e00b      	b.n	8004b30 <UART_SetConfig+0x270>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e077      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	77fb      	strb	r3, [r7, #31]
 8004b22:	e074      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004b24:	2304      	movs	r3, #4
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e071      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e06e      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004b30:	2310      	movs	r3, #16
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	bf00      	nop
 8004b36:	e06a      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a25      	ldr	r2, [pc, #148]	; (8004bd4 <UART_SetConfig+0x314>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d124      	bne.n	8004b8c <UART_SetConfig+0x2cc>
 8004b42:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <UART_SetConfig+0x2fc>)
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b48:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b50:	d012      	beq.n	8004b78 <UART_SetConfig+0x2b8>
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b56:	d802      	bhi.n	8004b5e <UART_SetConfig+0x29e>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <UART_SetConfig+0x2ac>
 8004b5c:	e012      	b.n	8004b84 <UART_SetConfig+0x2c4>
 8004b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b62:	d006      	beq.n	8004b72 <UART_SetConfig+0x2b2>
 8004b64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b68:	d009      	beq.n	8004b7e <UART_SetConfig+0x2be>
 8004b6a:	e00b      	b.n	8004b84 <UART_SetConfig+0x2c4>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	77fb      	strb	r3, [r7, #31]
 8004b70:	e04d      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004b72:	2302      	movs	r3, #2
 8004b74:	77fb      	strb	r3, [r7, #31]
 8004b76:	e04a      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	77fb      	strb	r3, [r7, #31]
 8004b7c:	e047      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004b7e:	2308      	movs	r3, #8
 8004b80:	77fb      	strb	r3, [r7, #31]
 8004b82:	e044      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004b84:	2310      	movs	r3, #16
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	bf00      	nop
 8004b8a:	e040      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <UART_SetConfig+0x318>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d139      	bne.n	8004c0a <UART_SetConfig+0x34a>
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <UART_SetConfig+0x2fc>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba4:	d027      	beq.n	8004bf6 <UART_SetConfig+0x336>
 8004ba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004baa:	d817      	bhi.n	8004bdc <UART_SetConfig+0x31c>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01c      	beq.n	8004bea <UART_SetConfig+0x32a>
 8004bb0:	e027      	b.n	8004c02 <UART_SetConfig+0x342>
 8004bb2:	bf00      	nop
 8004bb4:	efff69f3 	.word	0xefff69f3
 8004bb8:	40011000 	.word	0x40011000
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	40004400 	.word	0x40004400
 8004bc4:	40004800 	.word	0x40004800
 8004bc8:	40004c00 	.word	0x40004c00
 8004bcc:	40005000 	.word	0x40005000
 8004bd0:	40011400 	.word	0x40011400
 8004bd4:	40007800 	.word	0x40007800
 8004bd8:	40007c00 	.word	0x40007c00
 8004bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be0:	d006      	beq.n	8004bf0 <UART_SetConfig+0x330>
 8004be2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004be6:	d009      	beq.n	8004bfc <UART_SetConfig+0x33c>
 8004be8:	e00b      	b.n	8004c02 <UART_SetConfig+0x342>
 8004bea:	2300      	movs	r3, #0
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e00e      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e00b      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e008      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e005      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004c02:	2310      	movs	r3, #16
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	bf00      	nop
 8004c08:	e001      	b.n	8004c0e <UART_SetConfig+0x34e>
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c16:	d17c      	bne.n	8004d12 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004c18:	7ffb      	ldrb	r3, [r7, #31]
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d859      	bhi.n	8004cd2 <UART_SetConfig+0x412>
 8004c1e:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <UART_SetConfig+0x364>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c49 	.word	0x08004c49
 8004c28:	08004c67 	.word	0x08004c67
 8004c2c:	08004c85 	.word	0x08004c85
 8004c30:	08004cd3 	.word	0x08004cd3
 8004c34:	08004c9d 	.word	0x08004c9d
 8004c38:	08004cd3 	.word	0x08004cd3
 8004c3c:	08004cd3 	.word	0x08004cd3
 8004c40:	08004cd3 	.word	0x08004cd3
 8004c44:	08004cbb 	.word	0x08004cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004c48:	f7fe fe14 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	005a      	lsls	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	085b      	lsrs	r3, r3, #1
 8004c56:	441a      	add	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	61bb      	str	r3, [r7, #24]
        break;
 8004c64:	e038      	b.n	8004cd8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004c66:	f7fe fe19 	bl	800389c <HAL_RCC_GetPCLK2Freq>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	005a      	lsls	r2, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	441a      	add	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	61bb      	str	r3, [r7, #24]
        break;
 8004c82:	e029      	b.n	8004cd8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	085a      	lsrs	r2, r3, #1
 8004c8a:	4b5d      	ldr	r3, [pc, #372]	; (8004e00 <UART_SetConfig+0x540>)
 8004c8c:	4413      	add	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6852      	ldr	r2, [r2, #4]
 8004c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	61bb      	str	r3, [r7, #24]
        break;
 8004c9a:	e01d      	b.n	8004cd8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004c9c:	f7fe fd06 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	005a      	lsls	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	441a      	add	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	61bb      	str	r3, [r7, #24]
        break;
 8004cb8:	e00e      	b.n	8004cd8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	61bb      	str	r3, [r7, #24]
        break;
 8004cd0:	e002      	b.n	8004cd8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	75fb      	strb	r3, [r7, #23]
        break;
 8004cd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b0f      	cmp	r3, #15
 8004cdc:	d916      	bls.n	8004d0c <UART_SetConfig+0x44c>
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d212      	bcs.n	8004d0c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f023 030f 	bic.w	r3, r3, #15
 8004cee:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	89fa      	ldrh	r2, [r7, #14]
 8004d08:	60da      	str	r2, [r3, #12]
 8004d0a:	e06e      	b.n	8004dea <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	75fb      	strb	r3, [r7, #23]
 8004d10:	e06b      	b.n	8004dea <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004d12:	7ffb      	ldrb	r3, [r7, #31]
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d857      	bhi.n	8004dc8 <UART_SetConfig+0x508>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0x460>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08004d61 	.word	0x08004d61
 8004d28:	08004d7d 	.word	0x08004d7d
 8004d2c:	08004dc9 	.word	0x08004dc9
 8004d30:	08004d95 	.word	0x08004d95
 8004d34:	08004dc9 	.word	0x08004dc9
 8004d38:	08004dc9 	.word	0x08004dc9
 8004d3c:	08004dc9 	.word	0x08004dc9
 8004d40:	08004db1 	.word	0x08004db1
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d44:	f7fe fd96 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	441a      	add	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	61bb      	str	r3, [r7, #24]
        break;
 8004d5e:	e036      	b.n	8004dce <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004d60:	f7fe fd9c 	bl	800389c <HAL_RCC_GetPCLK2Freq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	61bb      	str	r3, [r7, #24]
        break;
 8004d7a:	e028      	b.n	8004dce <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	085a      	lsrs	r2, r3, #1
 8004d82:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <UART_SetConfig+0x544>)
 8004d84:	4413      	add	r3, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6852      	ldr	r2, [r2, #4]
 8004d8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	61bb      	str	r3, [r7, #24]
        break;
 8004d92:	e01c      	b.n	8004dce <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d94:	f7fe fc8a 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	085b      	lsrs	r3, r3, #1
 8004da0:	441a      	add	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	61bb      	str	r3, [r7, #24]
        break;
 8004dae:	e00e      	b.n	8004dce <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	61bb      	str	r3, [r7, #24]
        break;
 8004dc6:	e002      	b.n	8004dce <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
        break;
 8004dcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b0f      	cmp	r3, #15
 8004dd2:	d908      	bls.n	8004de6 <UART_SetConfig+0x526>
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dda:	d204      	bcs.n	8004de6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	60da      	str	r2, [r3, #12]
 8004de4:	e001      	b.n	8004dea <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3720      	adds	r7, #32
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	01e84800 	.word	0x01e84800
 8004e04:	00f42400 	.word	0x00f42400

08004e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f06:	d10a      	bne.n	8004f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004f5a:	f7fc fa25 	bl	80013a8 <HAL_GetTick>
 8004f5e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d10e      	bne.n	8004f8c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f814 	bl	8004faa <UART_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e00a      	b.n	8004fa2 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	603b      	str	r3, [r7, #0]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fba:	e02a      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d026      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc4:	f7fc f9f0 	bl	80013a8 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d302      	bcc.n	8004fda <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d11b      	bne.n	8005012 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fe8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e00f      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4013      	ands	r3, r2
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	bf0c      	ite	eq
 8005022:	2301      	moveq	r3, #1
 8005024:	2300      	movne	r3, #0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	429a      	cmp	r2, r3
 800502e:	d0c5      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8005042:	4b8b      	ldr	r3, [pc, #556]	; (8005270 <MX_LWIP_Init+0x234>)
 8005044:	22a9      	movs	r2, #169	; 0xa9
 8005046:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8005048:	4b89      	ldr	r3, [pc, #548]	; (8005270 <MX_LWIP_Init+0x234>)
 800504a:	22fe      	movs	r2, #254	; 0xfe
 800504c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 212;
 800504e:	4b88      	ldr	r3, [pc, #544]	; (8005270 <MX_LWIP_Init+0x234>)
 8005050:	22d4      	movs	r2, #212	; 0xd4
 8005052:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 180;
 8005054:	4b86      	ldr	r3, [pc, #536]	; (8005270 <MX_LWIP_Init+0x234>)
 8005056:	22b4      	movs	r2, #180	; 0xb4
 8005058:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800505a:	4b86      	ldr	r3, [pc, #536]	; (8005274 <MX_LWIP_Init+0x238>)
 800505c:	22ff      	movs	r2, #255	; 0xff
 800505e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005060:	4b84      	ldr	r3, [pc, #528]	; (8005274 <MX_LWIP_Init+0x238>)
 8005062:	22ff      	movs	r2, #255	; 0xff
 8005064:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8005066:	4b83      	ldr	r3, [pc, #524]	; (8005274 <MX_LWIP_Init+0x238>)
 8005068:	2200      	movs	r2, #0
 800506a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800506c:	4b81      	ldr	r3, [pc, #516]	; (8005274 <MX_LWIP_Init+0x238>)
 800506e:	2200      	movs	r2, #0
 8005070:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005072:	4b81      	ldr	r3, [pc, #516]	; (8005278 <MX_LWIP_Init+0x23c>)
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005078:	4b7f      	ldr	r3, [pc, #508]	; (8005278 <MX_LWIP_Init+0x23c>)
 800507a:	2200      	movs	r2, #0
 800507c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800507e:	4b7e      	ldr	r3, [pc, #504]	; (8005278 <MX_LWIP_Init+0x23c>)
 8005080:	2200      	movs	r2, #0
 8005082:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005084:	4b7c      	ldr	r3, [pc, #496]	; (8005278 <MX_LWIP_Init+0x23c>)
 8005086:	2200      	movs	r2, #0
 8005088:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800508a:	f000 fc19 	bl	80058c0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800508e:	4b78      	ldr	r3, [pc, #480]	; (8005270 <MX_LWIP_Init+0x234>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	061a      	lsls	r2, r3, #24
 8005094:	4b76      	ldr	r3, [pc, #472]	; (8005270 <MX_LWIP_Init+0x234>)
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	431a      	orrs	r2, r3
 800509c:	4b74      	ldr	r3, [pc, #464]	; (8005270 <MX_LWIP_Init+0x234>)
 800509e:	789b      	ldrb	r3, [r3, #2]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	4313      	orrs	r3, r2
 80050a4:	4a72      	ldr	r2, [pc, #456]	; (8005270 <MX_LWIP_Init+0x234>)
 80050a6:	78d2      	ldrb	r2, [r2, #3]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	061a      	lsls	r2, r3, #24
 80050ac:	4b70      	ldr	r3, [pc, #448]	; (8005270 <MX_LWIP_Init+0x234>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	0619      	lsls	r1, r3, #24
 80050b2:	4b6f      	ldr	r3, [pc, #444]	; (8005270 <MX_LWIP_Init+0x234>)
 80050b4:	785b      	ldrb	r3, [r3, #1]
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	4319      	orrs	r1, r3
 80050ba:	4b6d      	ldr	r3, [pc, #436]	; (8005270 <MX_LWIP_Init+0x234>)
 80050bc:	789b      	ldrb	r3, [r3, #2]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	430b      	orrs	r3, r1
 80050c2:	496b      	ldr	r1, [pc, #428]	; (8005270 <MX_LWIP_Init+0x234>)
 80050c4:	78c9      	ldrb	r1, [r1, #3]
 80050c6:	430b      	orrs	r3, r1
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050ce:	431a      	orrs	r2, r3
 80050d0:	4b67      	ldr	r3, [pc, #412]	; (8005270 <MX_LWIP_Init+0x234>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	0619      	lsls	r1, r3, #24
 80050d6:	4b66      	ldr	r3, [pc, #408]	; (8005270 <MX_LWIP_Init+0x234>)
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	041b      	lsls	r3, r3, #16
 80050dc:	4319      	orrs	r1, r3
 80050de:	4b64      	ldr	r3, [pc, #400]	; (8005270 <MX_LWIP_Init+0x234>)
 80050e0:	789b      	ldrb	r3, [r3, #2]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	430b      	orrs	r3, r1
 80050e6:	4962      	ldr	r1, [pc, #392]	; (8005270 <MX_LWIP_Init+0x234>)
 80050e8:	78c9      	ldrb	r1, [r1, #3]
 80050ea:	430b      	orrs	r3, r1
 80050ec:	0a1b      	lsrs	r3, r3, #8
 80050ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80050f2:	431a      	orrs	r2, r3
 80050f4:	4b5e      	ldr	r3, [pc, #376]	; (8005270 <MX_LWIP_Init+0x234>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	0619      	lsls	r1, r3, #24
 80050fa:	4b5d      	ldr	r3, [pc, #372]	; (8005270 <MX_LWIP_Init+0x234>)
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	041b      	lsls	r3, r3, #16
 8005100:	4319      	orrs	r1, r3
 8005102:	4b5b      	ldr	r3, [pc, #364]	; (8005270 <MX_LWIP_Init+0x234>)
 8005104:	789b      	ldrb	r3, [r3, #2]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	430b      	orrs	r3, r1
 800510a:	4959      	ldr	r1, [pc, #356]	; (8005270 <MX_LWIP_Init+0x234>)
 800510c:	78c9      	ldrb	r1, [r1, #3]
 800510e:	430b      	orrs	r3, r1
 8005110:	0e1b      	lsrs	r3, r3, #24
 8005112:	4313      	orrs	r3, r2
 8005114:	4a59      	ldr	r2, [pc, #356]	; (800527c <MX_LWIP_Init+0x240>)
 8005116:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005118:	4b56      	ldr	r3, [pc, #344]	; (8005274 <MX_LWIP_Init+0x238>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	061a      	lsls	r2, r3, #24
 800511e:	4b55      	ldr	r3, [pc, #340]	; (8005274 <MX_LWIP_Init+0x238>)
 8005120:	785b      	ldrb	r3, [r3, #1]
 8005122:	041b      	lsls	r3, r3, #16
 8005124:	431a      	orrs	r2, r3
 8005126:	4b53      	ldr	r3, [pc, #332]	; (8005274 <MX_LWIP_Init+0x238>)
 8005128:	789b      	ldrb	r3, [r3, #2]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	4313      	orrs	r3, r2
 800512e:	4a51      	ldr	r2, [pc, #324]	; (8005274 <MX_LWIP_Init+0x238>)
 8005130:	78d2      	ldrb	r2, [r2, #3]
 8005132:	4313      	orrs	r3, r2
 8005134:	061a      	lsls	r2, r3, #24
 8005136:	4b4f      	ldr	r3, [pc, #316]	; (8005274 <MX_LWIP_Init+0x238>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	0619      	lsls	r1, r3, #24
 800513c:	4b4d      	ldr	r3, [pc, #308]	; (8005274 <MX_LWIP_Init+0x238>)
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	041b      	lsls	r3, r3, #16
 8005142:	4319      	orrs	r1, r3
 8005144:	4b4b      	ldr	r3, [pc, #300]	; (8005274 <MX_LWIP_Init+0x238>)
 8005146:	789b      	ldrb	r3, [r3, #2]
 8005148:	021b      	lsls	r3, r3, #8
 800514a:	430b      	orrs	r3, r1
 800514c:	4949      	ldr	r1, [pc, #292]	; (8005274 <MX_LWIP_Init+0x238>)
 800514e:	78c9      	ldrb	r1, [r1, #3]
 8005150:	430b      	orrs	r3, r1
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005158:	431a      	orrs	r2, r3
 800515a:	4b46      	ldr	r3, [pc, #280]	; (8005274 <MX_LWIP_Init+0x238>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	0619      	lsls	r1, r3, #24
 8005160:	4b44      	ldr	r3, [pc, #272]	; (8005274 <MX_LWIP_Init+0x238>)
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	041b      	lsls	r3, r3, #16
 8005166:	4319      	orrs	r1, r3
 8005168:	4b42      	ldr	r3, [pc, #264]	; (8005274 <MX_LWIP_Init+0x238>)
 800516a:	789b      	ldrb	r3, [r3, #2]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	430b      	orrs	r3, r1
 8005170:	4940      	ldr	r1, [pc, #256]	; (8005274 <MX_LWIP_Init+0x238>)
 8005172:	78c9      	ldrb	r1, [r1, #3]
 8005174:	430b      	orrs	r3, r1
 8005176:	0a1b      	lsrs	r3, r3, #8
 8005178:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800517c:	431a      	orrs	r2, r3
 800517e:	4b3d      	ldr	r3, [pc, #244]	; (8005274 <MX_LWIP_Init+0x238>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	0619      	lsls	r1, r3, #24
 8005184:	4b3b      	ldr	r3, [pc, #236]	; (8005274 <MX_LWIP_Init+0x238>)
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	4319      	orrs	r1, r3
 800518c:	4b39      	ldr	r3, [pc, #228]	; (8005274 <MX_LWIP_Init+0x238>)
 800518e:	789b      	ldrb	r3, [r3, #2]
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	430b      	orrs	r3, r1
 8005194:	4937      	ldr	r1, [pc, #220]	; (8005274 <MX_LWIP_Init+0x238>)
 8005196:	78c9      	ldrb	r1, [r1, #3]
 8005198:	430b      	orrs	r3, r1
 800519a:	0e1b      	lsrs	r3, r3, #24
 800519c:	4313      	orrs	r3, r2
 800519e:	4a38      	ldr	r2, [pc, #224]	; (8005280 <MX_LWIP_Init+0x244>)
 80051a0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80051a2:	4b35      	ldr	r3, [pc, #212]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	061a      	lsls	r2, r3, #24
 80051a8:	4b33      	ldr	r3, [pc, #204]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	431a      	orrs	r2, r3
 80051b0:	4b31      	ldr	r3, [pc, #196]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051b2:	789b      	ldrb	r3, [r3, #2]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	4313      	orrs	r3, r2
 80051b8:	4a2f      	ldr	r2, [pc, #188]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051ba:	78d2      	ldrb	r2, [r2, #3]
 80051bc:	4313      	orrs	r3, r2
 80051be:	061a      	lsls	r2, r3, #24
 80051c0:	4b2d      	ldr	r3, [pc, #180]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	0619      	lsls	r1, r3, #24
 80051c6:	4b2c      	ldr	r3, [pc, #176]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	4319      	orrs	r1, r3
 80051ce:	4b2a      	ldr	r3, [pc, #168]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051d0:	789b      	ldrb	r3, [r3, #2]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	430b      	orrs	r3, r1
 80051d6:	4928      	ldr	r1, [pc, #160]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051d8:	78c9      	ldrb	r1, [r1, #3]
 80051da:	430b      	orrs	r3, r1
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051e2:	431a      	orrs	r2, r3
 80051e4:	4b24      	ldr	r3, [pc, #144]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	0619      	lsls	r1, r3, #24
 80051ea:	4b23      	ldr	r3, [pc, #140]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051ec:	785b      	ldrb	r3, [r3, #1]
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	4319      	orrs	r1, r3
 80051f2:	4b21      	ldr	r3, [pc, #132]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051f4:	789b      	ldrb	r3, [r3, #2]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	430b      	orrs	r3, r1
 80051fa:	491f      	ldr	r1, [pc, #124]	; (8005278 <MX_LWIP_Init+0x23c>)
 80051fc:	78c9      	ldrb	r1, [r1, #3]
 80051fe:	430b      	orrs	r3, r1
 8005200:	0a1b      	lsrs	r3, r3, #8
 8005202:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005206:	431a      	orrs	r2, r3
 8005208:	4b1b      	ldr	r3, [pc, #108]	; (8005278 <MX_LWIP_Init+0x23c>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	0619      	lsls	r1, r3, #24
 800520e:	4b1a      	ldr	r3, [pc, #104]	; (8005278 <MX_LWIP_Init+0x23c>)
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	041b      	lsls	r3, r3, #16
 8005214:	4319      	orrs	r1, r3
 8005216:	4b18      	ldr	r3, [pc, #96]	; (8005278 <MX_LWIP_Init+0x23c>)
 8005218:	789b      	ldrb	r3, [r3, #2]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	430b      	orrs	r3, r1
 800521e:	4916      	ldr	r1, [pc, #88]	; (8005278 <MX_LWIP_Init+0x23c>)
 8005220:	78c9      	ldrb	r1, [r1, #3]
 8005222:	430b      	orrs	r3, r1
 8005224:	0e1b      	lsrs	r3, r3, #24
 8005226:	4313      	orrs	r3, r2
 8005228:	4a16      	ldr	r2, [pc, #88]	; (8005284 <MX_LWIP_Init+0x248>)
 800522a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800522c:	4b16      	ldr	r3, [pc, #88]	; (8005288 <MX_LWIP_Init+0x24c>)
 800522e:	9302      	str	r3, [sp, #8]
 8005230:	4b16      	ldr	r3, [pc, #88]	; (800528c <MX_LWIP_Init+0x250>)
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	2300      	movs	r3, #0
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4b12      	ldr	r3, [pc, #72]	; (8005284 <MX_LWIP_Init+0x248>)
 800523a:	4a11      	ldr	r2, [pc, #68]	; (8005280 <MX_LWIP_Init+0x244>)
 800523c:	490f      	ldr	r1, [pc, #60]	; (800527c <MX_LWIP_Init+0x240>)
 800523e:	4814      	ldr	r0, [pc, #80]	; (8005290 <MX_LWIP_Init+0x254>)
 8005240:	f000 ff44 	bl	80060cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005244:	4812      	ldr	r0, [pc, #72]	; (8005290 <MX_LWIP_Init+0x254>)
 8005246:	f001 f821 	bl	800628c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <MX_LWIP_Init+0x254>)
 800524c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005250:	089b      	lsrs	r3, r3, #2
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800525c:	480c      	ldr	r0, [pc, #48]	; (8005290 <MX_LWIP_Init+0x254>)
 800525e:	f001 f825 	bl	80062ac <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005262:	e002      	b.n	800526a <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8005264:	480a      	ldr	r0, [pc, #40]	; (8005290 <MX_LWIP_Init+0x254>)
 8005266:	f001 f865 	bl	8006334 <netif_set_down>
}
 800526a:	bf00      	nop
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	2000156c 	.word	0x2000156c
 8005274:	20001568 	.word	0x20001568
 8005278:	20001530 	.word	0x20001530
 800527c:	20001564 	.word	0x20001564
 8005280:	20001570 	.word	0x20001570
 8005284:	20001574 	.word	0x20001574
 8005288:	0800e42d 	.word	0x0800e42d
 800528c:	08005809 	.word	0x08005809
 8005290:	20001534 	.word	0x20001534

08005294 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005298:	4803      	ldr	r0, [pc, #12]	; (80052a8 <MX_LWIP_Process+0x14>)
 800529a:	f000 fa95 	bl	80057c8 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 800529e:	f006 fb79 	bl	800b994 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80052a2:	bf00      	nop
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20001534 	.word	0x20001534

080052ac <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08e      	sub	sp, #56	; 0x38
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	605a      	str	r2, [r3, #4]
 80052be:	609a      	str	r2, [r3, #8]
 80052c0:	60da      	str	r2, [r3, #12]
 80052c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a3f      	ldr	r2, [pc, #252]	; (80053c8 <HAL_ETH_MspInit+0x11c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d178      	bne.n	80053c0 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80052ce:	4b3f      	ldr	r3, [pc, #252]	; (80053cc <HAL_ETH_MspInit+0x120>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	4a3e      	ldr	r2, [pc, #248]	; (80053cc <HAL_ETH_MspInit+0x120>)
 80052d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052d8:	6313      	str	r3, [r2, #48]	; 0x30
 80052da:	4b3c      	ldr	r3, [pc, #240]	; (80053cc <HAL_ETH_MspInit+0x120>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e2:	623b      	str	r3, [r7, #32]
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	4b39      	ldr	r3, [pc, #228]	; (80053cc <HAL_ETH_MspInit+0x120>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	4a38      	ldr	r2, [pc, #224]	; (80053cc <HAL_ETH_MspInit+0x120>)
 80052ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052f0:	6313      	str	r3, [r2, #48]	; 0x30
 80052f2:	4b36      	ldr	r3, [pc, #216]	; (80053cc <HAL_ETH_MspInit+0x120>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4b33      	ldr	r3, [pc, #204]	; (80053cc <HAL_ETH_MspInit+0x120>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	4a32      	ldr	r2, [pc, #200]	; (80053cc <HAL_ETH_MspInit+0x120>)
 8005304:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005308:	6313      	str	r3, [r2, #48]	; 0x30
 800530a:	4b30      	ldr	r3, [pc, #192]	; (80053cc <HAL_ETH_MspInit+0x120>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005316:	4b2d      	ldr	r3, [pc, #180]	; (80053cc <HAL_ETH_MspInit+0x120>)
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	4a2c      	ldr	r2, [pc, #176]	; (80053cc <HAL_ETH_MspInit+0x120>)
 800531c:	f043 0304 	orr.w	r3, r3, #4
 8005320:	6313      	str	r3, [r2, #48]	; 0x30
 8005322:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <HAL_ETH_MspInit+0x120>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800532e:	4b27      	ldr	r3, [pc, #156]	; (80053cc <HAL_ETH_MspInit+0x120>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	4a26      	ldr	r2, [pc, #152]	; (80053cc <HAL_ETH_MspInit+0x120>)
 8005334:	f043 0301 	orr.w	r3, r3, #1
 8005338:	6313      	str	r3, [r2, #48]	; 0x30
 800533a:	4b24      	ldr	r3, [pc, #144]	; (80053cc <HAL_ETH_MspInit+0x120>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005346:	4b21      	ldr	r3, [pc, #132]	; (80053cc <HAL_ETH_MspInit+0x120>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	4a20      	ldr	r2, [pc, #128]	; (80053cc <HAL_ETH_MspInit+0x120>)
 800534c:	f043 0302 	orr.w	r3, r3, #2
 8005350:	6313      	str	r3, [r2, #48]	; 0x30
 8005352:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <HAL_ETH_MspInit+0x120>)
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800535e:	2332      	movs	r3, #50	; 0x32
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005362:	2302      	movs	r3, #2
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005366:	2300      	movs	r3, #0
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800536a:	2303      	movs	r3, #3
 800536c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800536e:	230b      	movs	r3, #11
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005376:	4619      	mov	r1, r3
 8005378:	4815      	ldr	r0, [pc, #84]	; (80053d0 <HAL_ETH_MspInit+0x124>)
 800537a:	f7fd fc61 	bl	8002c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800537e:	2386      	movs	r3, #134	; 0x86
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005382:	2302      	movs	r3, #2
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005386:	2300      	movs	r3, #0
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800538a:	2303      	movs	r3, #3
 800538c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800538e:	230b      	movs	r3, #11
 8005390:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005396:	4619      	mov	r1, r3
 8005398:	480e      	ldr	r0, [pc, #56]	; (80053d4 <HAL_ETH_MspInit+0x128>)
 800539a:	f7fd fc51 	bl	8002c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800539e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a4:	2302      	movs	r3, #2
 80053a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ac:	2303      	movs	r3, #3
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053b0:	230b      	movs	r3, #11
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053b8:	4619      	mov	r1, r3
 80053ba:	4807      	ldr	r0, [pc, #28]	; (80053d8 <HAL_ETH_MspInit+0x12c>)
 80053bc:	f7fd fc40 	bl	8002c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80053c0:	bf00      	nop
 80053c2:	3738      	adds	r7, #56	; 0x38
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40028000 	.word	0x40028000
 80053cc:	40023800 	.word	0x40023800
 80053d0:	40020800 	.word	0x40020800
 80053d4:	40020000 	.word	0x40020000
 80053d8:	40020400 	.word	0x40020400

080053dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80053e8:	4b49      	ldr	r3, [pc, #292]	; (8005510 <low_level_init+0x134>)
 80053ea:	4a4a      	ldr	r2, [pc, #296]	; (8005514 <low_level_init+0x138>)
 80053ec:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80053ee:	4b48      	ldr	r3, [pc, #288]	; (8005510 <low_level_init+0x134>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80053f4:	4b46      	ldr	r3, [pc, #280]	; (8005510 <low_level_init+0x134>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80053fa:	2300      	movs	r3, #0
 80053fc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80053fe:	2380      	movs	r3, #128	; 0x80
 8005400:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005402:	23e1      	movs	r3, #225	; 0xe1
 8005404:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005406:	2300      	movs	r3, #0
 8005408:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800540a:	2300      	movs	r3, #0
 800540c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800540e:	2300      	movs	r3, #0
 8005410:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005412:	4a3f      	ldr	r2, [pc, #252]	; (8005510 <low_level_init+0x134>)
 8005414:	f107 0308 	add.w	r3, r7, #8
 8005418:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800541a:	4b3d      	ldr	r3, [pc, #244]	; (8005510 <low_level_init+0x134>)
 800541c:	2200      	movs	r2, #0
 800541e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005420:	4b3b      	ldr	r3, [pc, #236]	; (8005510 <low_level_init+0x134>)
 8005422:	2200      	movs	r2, #0
 8005424:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005426:	4b3a      	ldr	r3, [pc, #232]	; (8005510 <low_level_init+0x134>)
 8005428:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800542c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800542e:	4838      	ldr	r0, [pc, #224]	; (8005510 <low_level_init+0x134>)
 8005430:	f7fc fc92 	bl	8001d58 <HAL_ETH_Init>
 8005434:	4603      	mov	r3, r0
 8005436:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d108      	bne.n	8005450 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005444:	f043 0304 	orr.w	r3, r3, #4
 8005448:	b2da      	uxtb	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005450:	2304      	movs	r3, #4
 8005452:	4a31      	ldr	r2, [pc, #196]	; (8005518 <low_level_init+0x13c>)
 8005454:	4931      	ldr	r1, [pc, #196]	; (800551c <low_level_init+0x140>)
 8005456:	482e      	ldr	r0, [pc, #184]	; (8005510 <low_level_init+0x134>)
 8005458:	f7fc fe1a 	bl	8002090 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800545c:	2304      	movs	r3, #4
 800545e:	4a30      	ldr	r2, [pc, #192]	; (8005520 <low_level_init+0x144>)
 8005460:	4930      	ldr	r1, [pc, #192]	; (8005524 <low_level_init+0x148>)
 8005462:	482b      	ldr	r0, [pc, #172]	; (8005510 <low_level_init+0x134>)
 8005464:	f7fc fe7d 	bl	8002162 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2206      	movs	r2, #6
 800546c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005470:	4b27      	ldr	r3, [pc, #156]	; (8005510 <low_level_init+0x134>)
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	781a      	ldrb	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800547c:	4b24      	ldr	r3, [pc, #144]	; (8005510 <low_level_init+0x134>)
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	785a      	ldrb	r2, [r3, #1]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005488:	4b21      	ldr	r3, [pc, #132]	; (8005510 <low_level_init+0x134>)
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	789a      	ldrb	r2, [r3, #2]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005494:	4b1e      	ldr	r3, [pc, #120]	; (8005510 <low_level_init+0x134>)
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	78da      	ldrb	r2, [r3, #3]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80054a0:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <low_level_init+0x134>)
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	791a      	ldrb	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80054ac:	4b18      	ldr	r3, [pc, #96]	; (8005510 <low_level_init+0x134>)
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	795a      	ldrb	r2, [r3, #5]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80054be:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80054c6:	f043 030a 	orr.w	r3, r3, #10
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80054d2:	480f      	ldr	r0, [pc, #60]	; (8005510 <low_level_init+0x134>)
 80054d4:	f7fd f8ee 	bl	80026b4 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80054d8:	f107 0310 	add.w	r3, r7, #16
 80054dc:	461a      	mov	r2, r3
 80054de:	211d      	movs	r1, #29
 80054e0:	480b      	ldr	r0, [pc, #44]	; (8005510 <low_level_init+0x134>)
 80054e2:	f7fd f819 	bl	8002518 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f043 030b 	orr.w	r3, r3, #11
 80054ec:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	461a      	mov	r2, r3
 80054f2:	211d      	movs	r1, #29
 80054f4:	4806      	ldr	r0, [pc, #24]	; (8005510 <low_level_init+0x134>)
 80054f6:	f7fd f877 	bl	80025e8 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80054fa:	f107 0310 	add.w	r3, r7, #16
 80054fe:	461a      	mov	r2, r3
 8005500:	211d      	movs	r1, #29
 8005502:	4803      	ldr	r0, [pc, #12]	; (8005510 <low_level_init+0x134>)
 8005504:	f7fd f808 	bl	8002518 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8005508:	bf00      	nop
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20002e48 	.word	0x20002e48
 8005514:	40028000 	.word	0x40028000
 8005518:	20002e90 	.word	0x20002e90
 800551c:	20001578 	.word	0x20001578
 8005520:	200015f8 	.word	0x200015f8
 8005524:	20002dc8 	.word	0x20002dc8

08005528 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005532:	4b4b      	ldr	r3, [pc, #300]	; (8005660 <low_level_output+0x138>)
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800554a:	4b45      	ldr	r3, [pc, #276]	; (8005660 <low_level_output+0x138>)
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	623b      	str	r3, [r7, #32]
 8005558:	e05a      	b.n	8005610 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	da03      	bge.n	800556a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005562:	23f8      	movs	r3, #248	; 0xf8
 8005564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005568:	e05c      	b.n	8005624 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	895b      	ldrh	r3, [r3, #10]
 800556e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005574:	e02f      	b.n	80055d6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	18d0      	adds	r0, r2, r3
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	18d1      	adds	r1, r2, r3
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	461a      	mov	r2, r3
 800558e:	f009 f85c 	bl	800e64a <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	da03      	bge.n	80055a8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80055a0:	23f8      	movs	r3, #248	; 0xf8
 80055a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80055a6:	e03d      	b.n	8005624 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80055b8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80055c4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80055d0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4413      	add	r3, r2
 80055dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d8c8      	bhi.n	8005576 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	18d0      	adds	r0, r2, r3
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4619      	mov	r1, r3
 80055f6:	f009 f828 	bl	800e64a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	623b      	str	r3, [r7, #32]
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1a1      	bne.n	800555a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005616:	6979      	ldr	r1, [r7, #20]
 8005618:	4811      	ldr	r0, [pc, #68]	; (8005660 <low_level_output+0x138>)
 800561a:	f7fc fe0f 	bl	800223c <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005624:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <low_level_output+0x138>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	f241 0314 	movw	r3, #4116	; 0x1014
 800562c:	4413      	add	r3, r2
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00d      	beq.n	8005654 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005638:	4b09      	ldr	r3, [pc, #36]	; (8005660 <low_level_output+0x138>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005640:	4413      	add	r3, r2
 8005642:	2220      	movs	r2, #32
 8005644:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <low_level_output+0x138>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	f241 0304 	movw	r3, #4100	; 0x1004
 800564e:	4413      	add	r3, r2
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005654:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005658:	4618      	mov	r0, r3
 800565a:	3728      	adds	r7, #40	; 0x28
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20002e48 	.word	0x20002e48

08005664 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08c      	sub	sp, #48	; 0x30
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800566c:	2300      	movs	r3, #0
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800567c:	2300      	movs	r3, #0
 800567e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005688:	484e      	ldr	r0, [pc, #312]	; (80057c4 <low_level_input+0x160>)
 800568a:	f7fc fec1 	bl	8002410 <HAL_ETH_GetReceivedFrame>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <low_level_input+0x34>
    return NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	e091      	b.n	80057bc <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005698:	4b4a      	ldr	r3, [pc, #296]	; (80057c4 <low_level_input+0x160>)
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800569e:	4b49      	ldr	r3, [pc, #292]	; (80057c4 <low_level_input+0x160>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80056a4:	89fb      	ldrh	r3, [r7, #14]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d006      	beq.n	80056b8 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80056aa:	89fb      	ldrh	r3, [r7, #14]
 80056ac:	2203      	movs	r2, #3
 80056ae:	4619      	mov	r1, r3
 80056b0:	2004      	movs	r0, #4
 80056b2:	f000 fe91 	bl	80063d8 <pbuf_alloc>
 80056b6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d04b      	beq.n	8005756 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80056be:	4b41      	ldr	r3, [pc, #260]	; (80057c4 <low_level_input+0x160>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80056cc:	e040      	b.n	8005750 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	895b      	ldrh	r3, [r3, #10]
 80056d2:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80056d8:	e021      	b.n	800571e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	18d0      	adds	r0, r2, r3
 80056e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	18d1      	adds	r1, r2, r3
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	461a      	mov	r2, r3
 80056f2:	f008 ffaa 	bl	800e64a <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4413      	add	r3, r2
 8005708:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800570c:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005718:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	4413      	add	r3, r2
 8005724:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005728:	4293      	cmp	r3, r2
 800572a:	d8d6      	bhi.n	80056da <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	18d0      	adds	r0, r2, r3
 8005734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	4413      	add	r3, r2
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4619      	mov	r1, r3
 800573e:	f008 ff84 	bl	800e64a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	4413      	add	r3, r2
 8005748:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1bb      	bne.n	80056ce <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005756:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <low_level_input+0x160>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800575c:	2300      	movs	r3, #0
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	e00b      	b.n	800577a <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	3301      	adds	r3, #1
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <low_level_input+0x160>)
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	429a      	cmp	r2, r3
 8005782:	d3ee      	bcc.n	8005762 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8005784:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <low_level_input+0x160>)
 8005786:	2200      	movs	r2, #0
 8005788:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800578a:	4b0e      	ldr	r3, [pc, #56]	; (80057c4 <low_level_input+0x160>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	f241 0314 	movw	r3, #4116	; 0x1014
 8005792:	4413      	add	r3, r2
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800579e:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <low_level_input+0x160>)
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	f241 0314 	movw	r3, #4116	; 0x1014
 80057a6:	4413      	add	r3, r2
 80057a8:	2280      	movs	r2, #128	; 0x80
 80057aa:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <low_level_input+0x160>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	f241 0308 	movw	r3, #4104	; 0x1008
 80057b4:	4413      	add	r3, r2
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
  }
  return p;
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3730      	adds	r7, #48	; 0x30
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20002e48 	.word	0x20002e48

080057c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ff47 	bl	8005664 <low_level_input>
 80057d6:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d010      	beq.n	8005800 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	4798      	blx	r3
 80057e8:	4603      	mov	r3, r0
 80057ea:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 80057ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d006      	beq.n	8005802 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f001 f961 	bl	8006abc <pbuf_free>
    p = NULL;    
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e000      	b.n	8005802 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005800:	bf00      	nop
  }
}
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <ethernetif_init+0x1c>
 8005816:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <ethernetif_init+0x48>)
 8005818:	f240 2206 	movw	r2, #518	; 0x206
 800581c:	490d      	ldr	r1, [pc, #52]	; (8005854 <ethernetif_init+0x4c>)
 800581e:	480e      	ldr	r0, [pc, #56]	; (8005858 <ethernetif_init+0x50>)
 8005820:	f008 ff26 	bl	800e670 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2273      	movs	r2, #115	; 0x73
 8005828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2274      	movs	r2, #116	; 0x74
 8005830:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a09      	ldr	r2, [pc, #36]	; (800585c <ethernetif_init+0x54>)
 8005838:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a08      	ldr	r2, [pc, #32]	; (8005860 <ethernetif_init+0x58>)
 800583e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff fdcb 	bl	80053dc <low_level_init>

  return ERR_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	0800f62c 	.word	0x0800f62c
 8005854:	0800f648 	.word	0x0800f648
 8005858:	0800f658 	.word	0x0800f658
 800585c:	0800ca11 	.word	0x0800ca11
 8005860:	08005529 	.word	0x08005529

08005864 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005868:	f7fb fd9e 	bl	80013a8 <HAL_GetTick>
 800586c:	4603      	mov	r3, r0
}
 800586e:	4618      	mov	r0, r3
 8005870:	bd80      	pop	{r7, pc}

08005872 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	4603      	mov	r3, r0
 800587a:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800587c:	88fb      	ldrh	r3, [r7, #6]
 800587e:	ba5b      	rev16	r3, r3
 8005880:	b29b      	uxth	r3, r3
}
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	061a      	lsls	r2, r3, #24
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	0a1b      	lsrs	r3, r3, #8
 80058a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	0e1b      	lsrs	r3, r3, #24
 80058b2:	4313      	orrs	r3, r2
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80058ca:	f000 f8a7 	bl	8005a1c <mem_init>
  memp_init();
 80058ce:	f000 fb3b 	bl	8005f48 <memp_init>
  pbuf_init();
  netif_init();
 80058d2:	f000 fbf3 	bl	80060bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80058d6:	f006 f8af 	bl	800ba38 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80058da:	f001 fbfb 	bl	80070d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80058de:	f005 ff8d 	bl	800b7fc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80058f4:	4b40      	ldr	r3, [pc, #256]	; (80059f8 <plug_holes+0x10c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d206      	bcs.n	800590c <plug_holes+0x20>
 80058fe:	4b3f      	ldr	r3, [pc, #252]	; (80059fc <plug_holes+0x110>)
 8005900:	f240 125d 	movw	r2, #349	; 0x15d
 8005904:	493e      	ldr	r1, [pc, #248]	; (8005a00 <plug_holes+0x114>)
 8005906:	483f      	ldr	r0, [pc, #252]	; (8005a04 <plug_holes+0x118>)
 8005908:	f008 feb2 	bl	800e670 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800590c:	4b3e      	ldr	r3, [pc, #248]	; (8005a08 <plug_holes+0x11c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d306      	bcc.n	8005924 <plug_holes+0x38>
 8005916:	4b39      	ldr	r3, [pc, #228]	; (80059fc <plug_holes+0x110>)
 8005918:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800591c:	493b      	ldr	r1, [pc, #236]	; (8005a0c <plug_holes+0x120>)
 800591e:	4839      	ldr	r0, [pc, #228]	; (8005a04 <plug_holes+0x118>)
 8005920:	f008 fea6 	bl	800e670 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	791b      	ldrb	r3, [r3, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d006      	beq.n	800593a <plug_holes+0x4e>
 800592c:	4b33      	ldr	r3, [pc, #204]	; (80059fc <plug_holes+0x110>)
 800592e:	f240 125f 	movw	r2, #351	; 0x15f
 8005932:	4937      	ldr	r1, [pc, #220]	; (8005a10 <plug_holes+0x124>)
 8005934:	4833      	ldr	r0, [pc, #204]	; (8005a04 <plug_holes+0x118>)
 8005936:	f008 fe9b 	bl	800e670 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005942:	d906      	bls.n	8005952 <plug_holes+0x66>
 8005944:	4b2d      	ldr	r3, [pc, #180]	; (80059fc <plug_holes+0x110>)
 8005946:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800594a:	4932      	ldr	r1, [pc, #200]	; (8005a14 <plug_holes+0x128>)
 800594c:	482d      	ldr	r0, [pc, #180]	; (8005a04 <plug_holes+0x118>)
 800594e:	f008 fe8f 	bl	800e670 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8005952:	4b29      	ldr	r3, [pc, #164]	; (80059f8 <plug_holes+0x10c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	8812      	ldrh	r2, [r2, #0]
 800595a:	4413      	add	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	429a      	cmp	r2, r3
 8005964:	d01f      	beq.n	80059a6 <plug_holes+0xba>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	791b      	ldrb	r3, [r3, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11b      	bne.n	80059a6 <plug_holes+0xba>
 800596e:	4b26      	ldr	r3, [pc, #152]	; (8005a08 <plug_holes+0x11c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	429a      	cmp	r2, r3
 8005976:	d016      	beq.n	80059a6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005978:	4b27      	ldr	r3, [pc, #156]	; (8005a18 <plug_holes+0x12c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	429a      	cmp	r2, r3
 8005980:	d102      	bne.n	8005988 <plug_holes+0x9c>
      lfree = mem;
 8005982:	4a25      	ldr	r2, [pc, #148]	; (8005a18 <plug_holes+0x12c>)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	881a      	ldrh	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a19      	ldr	r2, [pc, #100]	; (80059f8 <plug_holes+0x10c>)
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	1a99      	subs	r1, r3, r2
 8005998:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <plug_holes+0x10c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	8812      	ldrh	r2, [r2, #0]
 80059a0:	4413      	add	r3, r2
 80059a2:	b28a      	uxth	r2, r1
 80059a4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80059a6:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <plug_holes+0x10c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	8852      	ldrh	r2, [r2, #2]
 80059ae:	4413      	add	r3, r2
 80059b0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d01a      	beq.n	80059f0 <plug_holes+0x104>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	791b      	ldrb	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d116      	bne.n	80059f0 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <plug_holes+0x12c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d102      	bne.n	80059d2 <plug_holes+0xe6>
      lfree = pmem;
 80059cc:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <plug_holes+0x12c>)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	881a      	ldrh	r2, [r3, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4a06      	ldr	r2, [pc, #24]	; (80059f8 <plug_holes+0x10c>)
 80059de:	6812      	ldr	r2, [r2, #0]
 80059e0:	1a99      	subs	r1, r3, r2
 80059e2:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <plug_holes+0x10c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	8812      	ldrh	r2, [r2, #0]
 80059ea:	4413      	add	r3, r2
 80059ec:	b28a      	uxth	r2, r1
 80059ee:	805a      	strh	r2, [r3, #2]
  }
}
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	200004a4 	.word	0x200004a4
 80059fc:	0800f680 	.word	0x0800f680
 8005a00:	0800f6b0 	.word	0x0800f6b0
 8005a04:	0800f6c8 	.word	0x0800f6c8
 8005a08:	200004a8 	.word	0x200004a8
 8005a0c:	0800f6f0 	.word	0x0800f6f0
 8005a10:	0800f70c 	.word	0x0800f70c
 8005a14:	0800f728 	.word	0x0800f728
 8005a18:	200004ac 	.word	0x200004ac

08005a1c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005a22:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <mem_init+0x6c>)
 8005a24:	3303      	adds	r3, #3
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <mem_init+0x70>)
 8005a2e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005a30:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <mem_init+0x70>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005a3c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005a4a:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <mem_init+0x70>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8005a52:	4a0f      	ldr	r2, [pc, #60]	; (8005a90 <mem_init+0x74>)
 8005a54:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005a56:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <mem_init+0x74>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <mem_init+0x74>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005a66:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005a68:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <mem_init+0x74>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005a70:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005a72:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <mem_init+0x70>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a07      	ldr	r2, [pc, #28]	; (8005a94 <mem_init+0x78>)
 8005a78:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	20004678 	.word	0x20004678
 8005a8c:	200004a4 	.word	0x200004a4
 8005a90:	200004a8 	.word	0x200004a8
 8005a94:	200004ac 	.word	0x200004ac

08005a98 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d043      	beq.n	8005b2e <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d006      	beq.n	8005abe <mem_free+0x26>
 8005ab0:	4b22      	ldr	r3, [pc, #136]	; (8005b3c <mem_free+0xa4>)
 8005ab2:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8005ab6:	4922      	ldr	r1, [pc, #136]	; (8005b40 <mem_free+0xa8>)
 8005ab8:	4822      	ldr	r0, [pc, #136]	; (8005b44 <mem_free+0xac>)
 8005aba:	f008 fdd9 	bl	800e670 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005abe:	4b22      	ldr	r3, [pc, #136]	; (8005b48 <mem_free+0xb0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d304      	bcc.n	8005ad2 <mem_free+0x3a>
 8005ac8:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <mem_free+0xb4>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d306      	bcc.n	8005ae0 <mem_free+0x48>
 8005ad2:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <mem_free+0xa4>)
 8005ad4:	f240 12af 	movw	r2, #431	; 0x1af
 8005ad8:	491d      	ldr	r1, [pc, #116]	; (8005b50 <mem_free+0xb8>)
 8005ada:	481a      	ldr	r0, [pc, #104]	; (8005b44 <mem_free+0xac>)
 8005adc:	f008 fdc8 	bl	800e670 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005ae0:	4b19      	ldr	r3, [pc, #100]	; (8005b48 <mem_free+0xb0>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d323      	bcc.n	8005b32 <mem_free+0x9a>
 8005aea:	4b18      	ldr	r3, [pc, #96]	; (8005b4c <mem_free+0xb4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d21e      	bcs.n	8005b32 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3b08      	subs	r3, #8
 8005af8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	791b      	ldrb	r3, [r3, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <mem_free+0x78>
 8005b02:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <mem_free+0xa4>)
 8005b04:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8005b08:	4912      	ldr	r1, [pc, #72]	; (8005b54 <mem_free+0xbc>)
 8005b0a:	480e      	ldr	r0, [pc, #56]	; (8005b44 <mem_free+0xac>)
 8005b0c:	f008 fdb0 	bl	800e670 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <mem_free+0xc0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d202      	bcs.n	8005b26 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005b20:	4a0d      	ldr	r2, [pc, #52]	; (8005b58 <mem_free+0xc0>)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff fee0 	bl	80058ec <plug_holes>
 8005b2c:	e002      	b.n	8005b34 <mem_free+0x9c>
    return;
 8005b2e:	bf00      	nop
 8005b30:	e000      	b.n	8005b34 <mem_free+0x9c>
    return;
 8005b32:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	0800f680 	.word	0x0800f680
 8005b40:	0800f754 	.word	0x0800f754
 8005b44:	0800f6c8 	.word	0x0800f6c8
 8005b48:	200004a4 	.word	0x200004a4
 8005b4c:	200004a8 	.word	0x200004a8
 8005b50:	0800f778 	.word	0x0800f778
 8005b54:	0800f790 	.word	0x0800f790
 8005b58:	200004ac 	.word	0x200004ac

08005b5c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8005b68:	887b      	ldrh	r3, [r7, #2]
 8005b6a:	3303      	adds	r3, #3
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8005b74:	887b      	ldrh	r3, [r7, #2]
 8005b76:	2b0b      	cmp	r3, #11
 8005b78:	d801      	bhi.n	8005b7e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005b7a:	230c      	movs	r3, #12
 8005b7c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b84:	d901      	bls.n	8005b8a <mem_trim+0x2e>
    return NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e0b1      	b.n	8005cee <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005b8a:	4b5b      	ldr	r3, [pc, #364]	; (8005cf8 <mem_trim+0x19c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d304      	bcc.n	8005b9e <mem_trim+0x42>
 8005b94:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <mem_trim+0x1a0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d306      	bcc.n	8005bac <mem_trim+0x50>
 8005b9e:	4b58      	ldr	r3, [pc, #352]	; (8005d00 <mem_trim+0x1a4>)
 8005ba0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005ba4:	4957      	ldr	r1, [pc, #348]	; (8005d04 <mem_trim+0x1a8>)
 8005ba6:	4858      	ldr	r0, [pc, #352]	; (8005d08 <mem_trim+0x1ac>)
 8005ba8:	f008 fd62 	bl	800e670 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005bac:	4b52      	ldr	r3, [pc, #328]	; (8005cf8 <mem_trim+0x19c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d304      	bcc.n	8005bc0 <mem_trim+0x64>
 8005bb6:	4b51      	ldr	r3, [pc, #324]	; (8005cfc <mem_trim+0x1a0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d301      	bcc.n	8005bc4 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	e094      	b.n	8005cee <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3b08      	subs	r3, #8
 8005bc8:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	4a4a      	ldr	r2, [pc, #296]	; (8005cf8 <mem_trim+0x19c>)
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	1a9b      	subs	r3, r3, r2
 8005bd2:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	881a      	ldrh	r2, [r3, #0]
 8005bd8:	8a7b      	ldrh	r3, [r7, #18]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b08      	subs	r3, #8
 8005be0:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005be2:	887a      	ldrh	r2, [r7, #2]
 8005be4:	8a3b      	ldrh	r3, [r7, #16]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d906      	bls.n	8005bf8 <mem_trim+0x9c>
 8005bea:	4b45      	ldr	r3, [pc, #276]	; (8005d00 <mem_trim+0x1a4>)
 8005bec:	f240 2206 	movw	r2, #518	; 0x206
 8005bf0:	4946      	ldr	r1, [pc, #280]	; (8005d0c <mem_trim+0x1b0>)
 8005bf2:	4845      	ldr	r0, [pc, #276]	; (8005d08 <mem_trim+0x1ac>)
 8005bf4:	f008 fd3c 	bl	800e670 <iprintf>
  if (newsize > size) {
 8005bf8:	887a      	ldrh	r2, [r7, #2]
 8005bfa:	8a3b      	ldrh	r3, [r7, #16]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d901      	bls.n	8005c04 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e074      	b.n	8005cee <mem_trim+0x192>
  }
  if (newsize == size) {
 8005c04:	887a      	ldrh	r2, [r7, #2]
 8005c06:	8a3b      	ldrh	r3, [r7, #16]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d101      	bne.n	8005c10 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	e06e      	b.n	8005cee <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8005c10:	4b39      	ldr	r3, [pc, #228]	; (8005cf8 <mem_trim+0x19c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	8812      	ldrh	r2, [r2, #0]
 8005c18:	4413      	add	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	791b      	ldrb	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d131      	bne.n	8005c88 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005c2a:	8a7a      	ldrh	r2, [r7, #18]
 8005c2c:	887b      	ldrh	r3, [r7, #2]
 8005c2e:	4413      	add	r3, r2
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3308      	adds	r3, #8
 8005c34:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8005c36:	4b36      	ldr	r3, [pc, #216]	; (8005d10 <mem_trim+0x1b4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d105      	bne.n	8005c4c <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8005c40:	4b2d      	ldr	r3, [pc, #180]	; (8005cf8 <mem_trim+0x19c>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	897b      	ldrh	r3, [r7, #10]
 8005c46:	4413      	add	r3, r2
 8005c48:	4a31      	ldr	r2, [pc, #196]	; (8005d10 <mem_trim+0x1b4>)
 8005c4a:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005c4c:	4b2a      	ldr	r3, [pc, #168]	; (8005cf8 <mem_trim+0x19c>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	897b      	ldrh	r3, [r7, #10]
 8005c52:	4413      	add	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	893a      	ldrh	r2, [r7, #8]
 8005c60:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8a7a      	ldrh	r2, [r7, #18]
 8005c66:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	897a      	ldrh	r2, [r7, #10]
 8005c6c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c76:	d039      	beq.n	8005cec <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005c78:	4b1f      	ldr	r3, [pc, #124]	; (8005cf8 <mem_trim+0x19c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	8812      	ldrh	r2, [r2, #0]
 8005c80:	4413      	add	r3, r2
 8005c82:	897a      	ldrh	r2, [r7, #10]
 8005c84:	805a      	strh	r2, [r3, #2]
 8005c86:	e031      	b.n	8005cec <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005c88:	887b      	ldrh	r3, [r7, #2]
 8005c8a:	f103 0214 	add.w	r2, r3, #20
 8005c8e:	8a3b      	ldrh	r3, [r7, #16]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d82b      	bhi.n	8005cec <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005c94:	8a7a      	ldrh	r2, [r7, #18]
 8005c96:	887b      	ldrh	r3, [r7, #2]
 8005c98:	4413      	add	r3, r2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005ca0:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <mem_trim+0x19c>)
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	897b      	ldrh	r3, [r7, #10]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8005caa:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <mem_trim+0x1b4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d202      	bcs.n	8005cba <mem_trim+0x15e>
      lfree = mem2;
 8005cb4:	4a16      	ldr	r2, [pc, #88]	; (8005d10 <mem_trim+0x1b4>)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	881a      	ldrh	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8a7a      	ldrh	r2, [r7, #18]
 8005ccc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	897a      	ldrh	r2, [r7, #10]
 8005cd2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005cdc:	d006      	beq.n	8005cec <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005cde:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <mem_trim+0x19c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	8812      	ldrh	r2, [r2, #0]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	897a      	ldrh	r2, [r7, #10]
 8005cea:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005cec:	687b      	ldr	r3, [r7, #4]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	200004a4 	.word	0x200004a4
 8005cfc:	200004a8 	.word	0x200004a8
 8005d00:	0800f680 	.word	0x0800f680
 8005d04:	0800f7a4 	.word	0x0800f7a4
 8005d08:	0800f6c8 	.word	0x0800f6c8
 8005d0c:	0800f7bc 	.word	0x0800f7bc
 8005d10:	200004ac 	.word	0x200004ac

08005d14 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <mem_malloc+0x14>
    return NULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e0c8      	b.n	8005eba <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	3303      	adds	r3, #3
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8005d34:	88fb      	ldrh	r3, [r7, #6]
 8005d36:	2b0b      	cmp	r3, #11
 8005d38:	d801      	bhi.n	8005d3e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005d3a:	230c      	movs	r3, #12
 8005d3c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d44:	d901      	bls.n	8005d4a <mem_malloc+0x36>
    return NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e0b7      	b.n	8005eba <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005d4a:	4b5e      	ldr	r3, [pc, #376]	; (8005ec4 <mem_malloc+0x1b0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4b5d      	ldr	r3, [pc, #372]	; (8005ec8 <mem_malloc+0x1b4>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	83fb      	strh	r3, [r7, #30]
 8005d58:	e0a7      	b.n	8005eaa <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8005d5a:	4b5b      	ldr	r3, [pc, #364]	; (8005ec8 <mem_malloc+0x1b4>)
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	8bfb      	ldrh	r3, [r7, #30]
 8005d60:	4413      	add	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	791b      	ldrb	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f040 8098 	bne.w	8005e9e <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	8bfb      	ldrh	r3, [r7, #30]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	f1a3 0208 	sub.w	r2, r3, #8
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	f0c0 808d 	bcc.w	8005e9e <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	8bfb      	ldrh	r3, [r7, #30]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	f1a3 0208 	sub.w	r2, r3, #8
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	3314      	adds	r3, #20
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d327      	bcc.n	8005dea <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8005d9a:	8bfa      	ldrh	r2, [r7, #30]
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	4413      	add	r3, r2
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3308      	adds	r3, #8
 8005da4:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8005da6:	4b48      	ldr	r3, [pc, #288]	; (8005ec8 <mem_malloc+0x1b4>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	8a7b      	ldrh	r3, [r7, #18]
 8005dac:	4413      	add	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	881a      	ldrh	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8bfa      	ldrh	r2, [r7, #30]
 8005dc2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	8a7a      	ldrh	r2, [r7, #18]
 8005dc8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005dd8:	d00a      	beq.n	8005df0 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005dda:	4b3b      	ldr	r3, [pc, #236]	; (8005ec8 <mem_malloc+0x1b4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	8812      	ldrh	r2, [r2, #0]
 8005de2:	4413      	add	r3, r2
 8005de4:	8a7a      	ldrh	r2, [r7, #18]
 8005de6:	805a      	strh	r2, [r3, #2]
 8005de8:	e002      	b.n	8005df0 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2201      	movs	r2, #1
 8005dee:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005df0:	4b34      	ldr	r3, [pc, #208]	; (8005ec4 <mem_malloc+0x1b0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d127      	bne.n	8005e4a <mem_malloc+0x136>
          struct mem *cur = lfree;
 8005dfa:	4b32      	ldr	r3, [pc, #200]	; (8005ec4 <mem_malloc+0x1b0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005e00:	e005      	b.n	8005e0e <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8005e02:	4b31      	ldr	r3, [pc, #196]	; (8005ec8 <mem_malloc+0x1b4>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	8812      	ldrh	r2, [r2, #0]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	791b      	ldrb	r3, [r3, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <mem_malloc+0x10c>
 8005e16:	4b2d      	ldr	r3, [pc, #180]	; (8005ecc <mem_malloc+0x1b8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d1f0      	bne.n	8005e02 <mem_malloc+0xee>
          }
          lfree = cur;
 8005e20:	4a28      	ldr	r2, [pc, #160]	; (8005ec4 <mem_malloc+0x1b0>)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005e26:	4b27      	ldr	r3, [pc, #156]	; (8005ec4 <mem_malloc+0x1b0>)
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b28      	ldr	r3, [pc, #160]	; (8005ecc <mem_malloc+0x1b8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d00b      	beq.n	8005e4a <mem_malloc+0x136>
 8005e32:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <mem_malloc+0x1b0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	791b      	ldrb	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d006      	beq.n	8005e4a <mem_malloc+0x136>
 8005e3c:	4b24      	ldr	r3, [pc, #144]	; (8005ed0 <mem_malloc+0x1bc>)
 8005e3e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005e42:	4924      	ldr	r1, [pc, #144]	; (8005ed4 <mem_malloc+0x1c0>)
 8005e44:	4824      	ldr	r0, [pc, #144]	; (8005ed8 <mem_malloc+0x1c4>)
 8005e46:	f008 fc13 	bl	800e670 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	4413      	add	r3, r2
 8005e50:	3308      	adds	r3, #8
 8005e52:	4a1e      	ldr	r2, [pc, #120]	; (8005ecc <mem_malloc+0x1b8>)
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d906      	bls.n	8005e68 <mem_malloc+0x154>
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <mem_malloc+0x1bc>)
 8005e5c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8005e60:	491e      	ldr	r1, [pc, #120]	; (8005edc <mem_malloc+0x1c8>)
 8005e62:	481d      	ldr	r0, [pc, #116]	; (8005ed8 <mem_malloc+0x1c4>)
 8005e64:	f008 fc04 	bl	800e670 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d006      	beq.n	8005e80 <mem_malloc+0x16c>
 8005e72:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <mem_malloc+0x1bc>)
 8005e74:	f240 22d6 	movw	r2, #726	; 0x2d6
 8005e78:	4919      	ldr	r1, [pc, #100]	; (8005ee0 <mem_malloc+0x1cc>)
 8005e7a:	4817      	ldr	r0, [pc, #92]	; (8005ed8 <mem_malloc+0x1c4>)
 8005e7c:	f008 fbf8 	bl	800e670 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d006      	beq.n	8005e98 <mem_malloc+0x184>
 8005e8a:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <mem_malloc+0x1bc>)
 8005e8c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8005e90:	4914      	ldr	r1, [pc, #80]	; (8005ee4 <mem_malloc+0x1d0>)
 8005e92:	4811      	ldr	r0, [pc, #68]	; (8005ed8 <mem_malloc+0x1c4>)
 8005e94:	f008 fbec 	bl	800e670 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	e00d      	b.n	8005eba <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <mem_malloc+0x1b4>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	8bfb      	ldrh	r3, [r7, #30]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005eaa:	8bfa      	ldrh	r2, [r7, #30]
 8005eac:	88fb      	ldrh	r3, [r7, #6]
 8005eae:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	f4ff af51 	bcc.w	8005d5a <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	200004ac 	.word	0x200004ac
 8005ec8:	200004a4 	.word	0x200004a4
 8005ecc:	200004a8 	.word	0x200004a8
 8005ed0:	0800f680 	.word	0x0800f680
 8005ed4:	0800f7dc 	.word	0x0800f7dc
 8005ed8:	0800f6c8 	.word	0x0800f6c8
 8005edc:	0800f7f8 	.word	0x0800f7f8
 8005ee0:	0800f828 	.word	0x0800f828
 8005ee4:	0800f858 	.word	0x0800f858

08005ee8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	3303      	adds	r3, #3
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005f04:	2300      	movs	r3, #0
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	e011      	b.n	8005f2e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4413      	add	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	885b      	ldrh	r3, [r3, #2]
 8005f32:	461a      	mov	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4293      	cmp	r3, r2
 8005f38:	dbe7      	blt.n	8005f0a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005f4e:	2300      	movs	r3, #0
 8005f50:	80fb      	strh	r3, [r7, #6]
 8005f52:	e009      	b.n	8005f68 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005f54:	88fb      	ldrh	r3, [r7, #6]
 8005f56:	4a08      	ldr	r2, [pc, #32]	; (8005f78 <memp_init+0x30>)
 8005f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff ffc3 	bl	8005ee8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	3301      	adds	r3, #1
 8005f66:	80fb      	strh	r3, [r7, #6]
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d9f2      	bls.n	8005f54 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	08011374 	.word	0x08011374

08005f7c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d012      	beq.n	8005fb8 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	6812      	ldr	r2, [r2, #0]
 8005f9a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d006      	beq.n	8005fb4 <do_memp_malloc_pool+0x38>
 8005fa6:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <do_memp_malloc_pool+0x48>)
 8005fa8:	f240 1249 	movw	r2, #329	; 0x149
 8005fac:	4906      	ldr	r1, [pc, #24]	; (8005fc8 <do_memp_malloc_pool+0x4c>)
 8005fae:	4807      	ldr	r0, [pc, #28]	; (8005fcc <do_memp_malloc_pool+0x50>)
 8005fb0:	f008 fb5e 	bl	800e670 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	e000      	b.n	8005fba <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	0800f87c 	.word	0x0800f87c
 8005fc8:	0800f8ac 	.word	0x0800f8ac
 8005fcc:	0800f8d0 	.word	0x0800f8d0

08005fd0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d908      	bls.n	8005ff2 <memp_malloc+0x22>
 8005fe0:	4b0a      	ldr	r3, [pc, #40]	; (800600c <memp_malloc+0x3c>)
 8005fe2:	f240 1287 	movw	r2, #391	; 0x187
 8005fe6:	490a      	ldr	r1, [pc, #40]	; (8006010 <memp_malloc+0x40>)
 8005fe8:	480a      	ldr	r0, [pc, #40]	; (8006014 <memp_malloc+0x44>)
 8005fea:	f008 fb41 	bl	800e670 <iprintf>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e008      	b.n	8006004 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	4a08      	ldr	r2, [pc, #32]	; (8006018 <memp_malloc+0x48>)
 8005ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff ffbe 	bl	8005f7c <do_memp_malloc_pool>
 8006000:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006002:	68fb      	ldr	r3, [r7, #12]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	0800f87c 	.word	0x0800f87c
 8006010:	0800f90c 	.word	0x0800f90c
 8006014:	0800f8d0 	.word	0x0800f8d0
 8006018:	08011374 	.word	0x08011374

0800601c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d006      	beq.n	800603e <do_memp_free_pool+0x22>
 8006030:	4b0a      	ldr	r3, [pc, #40]	; (800605c <do_memp_free_pool+0x40>)
 8006032:	f240 129d 	movw	r2, #413	; 0x19d
 8006036:	490a      	ldr	r1, [pc, #40]	; (8006060 <do_memp_free_pool+0x44>)
 8006038:	480a      	ldr	r0, [pc, #40]	; (8006064 <do_memp_free_pool+0x48>)
 800603a:	f008 fb19 	bl	800e670 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	0800f87c 	.word	0x0800f87c
 8006060:	0800f92c 	.word	0x0800f92c
 8006064:	0800f8d0 	.word	0x0800f8d0

08006068 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	6039      	str	r1, [r7, #0]
 8006072:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	2b08      	cmp	r3, #8
 8006078:	d907      	bls.n	800608a <memp_free+0x22>
 800607a:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <memp_free+0x44>)
 800607c:	f240 12db 	movw	r2, #475	; 0x1db
 8006080:	490b      	ldr	r1, [pc, #44]	; (80060b0 <memp_free+0x48>)
 8006082:	480c      	ldr	r0, [pc, #48]	; (80060b4 <memp_free+0x4c>)
 8006084:	f008 faf4 	bl	800e670 <iprintf>
 8006088:	e00c      	b.n	80060a4 <memp_free+0x3c>

  if (mem == NULL) {
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	4a09      	ldr	r2, [pc, #36]	; (80060b8 <memp_free+0x50>)
 8006094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff ffbe 	bl	800601c <do_memp_free_pool>
 80060a0:	e000      	b.n	80060a4 <memp_free+0x3c>
    return;
 80060a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	0800f87c 	.word	0x0800f87c
 80060b0:	0800f94c 	.word	0x0800f94c
 80060b4:	0800f8d0 	.word	0x0800f8d0
 80060b8:	08011374 	.word	0x08011374

080060bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80060c0:	bf00      	nop
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d105      	bne.n	80060ec <netif_add+0x20>
 80060e0:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <netif_add+0x94>)
 80060e2:	22fb      	movs	r2, #251	; 0xfb
 80060e4:	491f      	ldr	r1, [pc, #124]	; (8006164 <netif_add+0x98>)
 80060e6:	4820      	ldr	r0, [pc, #128]	; (8006168 <netif_add+0x9c>)
 80060e8:	f008 fac2 	bl	800e670 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2203      	movs	r2, #3
 800610a:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8006114:	4b15      	ldr	r3, [pc, #84]	; (800616c <netif_add+0xa0>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	b2d1      	uxtb	r1, r2
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <netif_add+0xa0>)
 800611e:	7011      	strb	r1, [r2, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a3a      	ldr	r2, [r7, #32]
 800612a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f81e 	bl	8006174 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	4798      	blx	r3
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <netif_add+0x7c>
    return NULL;
 8006144:	2300      	movs	r3, #0
 8006146:	e007      	b.n	8006158 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006148:	4b09      	ldr	r3, [pc, #36]	; (8006170 <netif_add+0xa4>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006150:	4a07      	ldr	r2, [pc, #28]	; (8006170 <netif_add+0xa4>)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8006156:	68fb      	ldr	r3, [r7, #12]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	0800f968 	.word	0x0800f968
 8006164:	0800f99c 	.word	0x0800f99c
 8006168:	0800f9b4 	.word	0x0800f9b4
 800616c:	200004d4 	.word	0x200004d4
 8006170:	20007b80 	.word	0x20007b80

08006174 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <netif_set_addr+0x1c>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10c      	bne.n	80061aa <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f81a 	bl	80061cc <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f862 	bl	8006264 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f84a 	bl	800623c <netif_set_gw>
 80061a8:	e00b      	b.n	80061c2 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f859 	bl	8006264 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 f841 	bl	800623c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f805 	bl	80061cc <netif_set_ipaddr>
  }
}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <netif_set_ipaddr+0x18>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	e002      	b.n	80061ea <netif_set_ipaddr+0x1e>
 80061e4:	4b14      	ldr	r3, [pc, #80]	; (8006238 <netif_set_ipaddr+0x6c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d01c      	beq.n	8006230 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3304      	adds	r3, #4
 80061fa:	f107 020c 	add.w	r2, r7, #12
 80061fe:	4611      	mov	r1, r2
 8006200:	4618      	mov	r0, r3
 8006202:	f002 f8f5 	bl	80083f0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3304      	adds	r3, #4
 800620a:	f107 020c 	add.w	r2, r7, #12
 800620e:	4611      	mov	r1, r2
 8006210:	4618      	mov	r0, r3
 8006212:	f005 ffaf 	bl	800c174 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <netif_set_ipaddr+0x56>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	e000      	b.n	8006224 <netif_set_ipaddr+0x58>
 8006222:	2300      	movs	r3, #0
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006228:	2101      	movs	r1, #1
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f861 	bl	80062f2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	080113d8 	.word	0x080113d8

0800623c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <netif_set_gw+0x16>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	e000      	b.n	8006254 <netif_set_gw+0x18>
 8006252:	2300      	movs	r3, #0
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <netif_set_netmask+0x16>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	e000      	b.n	800627c <netif_set_netmask+0x18>
 800627a:	2300      	movs	r3, #0
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006294:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <netif_set_default+0x1c>)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20007b84 	.word	0x20007b84

080062ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d113      	bne.n	80062ea <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80062c8:	f043 0301 	orr.w	r3, r3, #1
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80062e2:	2103      	movs	r1, #3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f804 	bl	80062f2 <netif_issue_reports>
    }
  }
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d011      	beq.n	800632c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3304      	adds	r3, #4
 800630c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00c      	beq.n	800632c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3304      	adds	r3, #4
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f006 fe58 	bl	800cfdc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d012      	beq.n	8006370 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006350:	f023 0301 	bic.w	r3, r3, #1
 8006354:	b2da      	uxtb	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f006 f9fc 	bl	800c768 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800637e:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <pbuf_free_ooseq+0x40>)
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006384:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <pbuf_free_ooseq+0x44>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	607b      	str	r3, [r7, #4]
 800638a:	e00f      	b.n	80063ac <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006398:	4618      	mov	r0, r3
 800639a:	f001 fd64 	bl	8007e66 <tcp_segs_free>
      pcb->ooseq = NULL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80063a4:	e005      	b.n	80063b2 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	607b      	str	r3, [r7, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1ec      	bne.n	800638c <pbuf_free_ooseq+0x14>
    }
  }
}
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20007b88 	.word	0x20007b88
 80063bc:	20007b90 	.word	0x20007b90

080063c0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80063c4:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <pbuf_pool_is_empty+0x14>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80063ca:	bf00      	nop
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	20007b88 	.word	0x20007b88

080063d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	71fb      	strb	r3, [r7, #7]
 80063e2:	460b      	mov	r3, r1
 80063e4:	80bb      	strh	r3, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d81c      	bhi.n	800642a <pbuf_alloc+0x52>
 80063f0:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <pbuf_alloc+0x20>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	0800640d 	.word	0x0800640d
 80063fc:	08006413 	.word	0x08006413
 8006400:	08006419 	.word	0x08006419
 8006404:	0800641f 	.word	0x0800641f
 8006408:	08006425 	.word	0x08006425
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800640c:	2336      	movs	r3, #54	; 0x36
 800640e:	82fb      	strh	r3, [r7, #22]
    break;
 8006410:	e014      	b.n	800643c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006412:	2322      	movs	r3, #34	; 0x22
 8006414:	82fb      	strh	r3, [r7, #22]
    break;
 8006416:	e011      	b.n	800643c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006418:	230e      	movs	r3, #14
 800641a:	82fb      	strh	r3, [r7, #22]
    break;
 800641c:	e00e      	b.n	800643c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800641e:	2300      	movs	r3, #0
 8006420:	82fb      	strh	r3, [r7, #22]
    break;
 8006422:	e00b      	b.n	800643c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	82fb      	strh	r3, [r7, #22]
    break;
 8006428:	e008      	b.n	800643c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800642a:	4ba5      	ldr	r3, [pc, #660]	; (80066c0 <pbuf_alloc+0x2e8>)
 800642c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8006430:	49a4      	ldr	r1, [pc, #656]	; (80066c4 <pbuf_alloc+0x2ec>)
 8006432:	48a5      	ldr	r0, [pc, #660]	; (80066c8 <pbuf_alloc+0x2f0>)
 8006434:	f008 f91c 	bl	800e670 <iprintf>
    return NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	e15d      	b.n	80066f8 <pbuf_alloc+0x320>
  }

  switch (type) {
 800643c:	79bb      	ldrb	r3, [r7, #6]
 800643e:	2b03      	cmp	r3, #3
 8006440:	f200 8134 	bhi.w	80066ac <pbuf_alloc+0x2d4>
 8006444:	a201      	add	r2, pc, #4	; (adr r2, 800644c <pbuf_alloc+0x74>)
 8006446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644a:	bf00      	nop
 800644c:	080065ed 	.word	0x080065ed
 8006450:	08006679 	.word	0x08006679
 8006454:	08006679 	.word	0x08006679
 8006458:	0800645d 	.word	0x0800645d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800645c:	2008      	movs	r0, #8
 800645e:	f7ff fdb7 	bl	8005fd0 <memp_malloc>
 8006462:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d103      	bne.n	8006472 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800646a:	f7ff ffa9 	bl	80063c0 <pbuf_pool_is_empty>
      return NULL;
 800646e:	2300      	movs	r3, #0
 8006470:	e142      	b.n	80066f8 <pbuf_alloc+0x320>
    }
    p->type = type;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	79ba      	ldrb	r2, [r7, #6]
 8006476:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800647e:	8afb      	ldrh	r3, [r7, #22]
 8006480:	3310      	adds	r3, #16
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	3303      	adds	r3, #3
 8006488:	f023 0303 	bic.w	r3, r3, #3
 800648c:	461a      	mov	r2, r3
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d006      	beq.n	80064ac <pbuf_alloc+0xd4>
 800649e:	4b88      	ldr	r3, [pc, #544]	; (80066c0 <pbuf_alloc+0x2e8>)
 80064a0:	f240 1229 	movw	r2, #297	; 0x129
 80064a4:	4989      	ldr	r1, [pc, #548]	; (80066cc <pbuf_alloc+0x2f4>)
 80064a6:	4888      	ldr	r0, [pc, #544]	; (80066c8 <pbuf_alloc+0x2f0>)
 80064a8:	f008 f8e2 	bl	800e670 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	88ba      	ldrh	r2, [r7, #4]
 80064b0:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80064b2:	8afb      	ldrh	r3, [r7, #22]
 80064b4:	3303      	adds	r3, #3
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 80064be:	88bb      	ldrh	r3, [r7, #4]
 80064c0:	4293      	cmp	r3, r2
 80064c2:	bf28      	it	cs
 80064c4:	4613      	movcs	r3, r2
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	8952      	ldrh	r2, [r2, #10]
 80064d4:	441a      	add	r2, r3
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80064dc:	429a      	cmp	r2, r3
 80064de:	d906      	bls.n	80064ee <pbuf_alloc+0x116>
 80064e0:	4b77      	ldr	r3, [pc, #476]	; (80066c0 <pbuf_alloc+0x2e8>)
 80064e2:	f44f 7298 	mov.w	r2, #304	; 0x130
 80064e6:	497a      	ldr	r1, [pc, #488]	; (80066d0 <pbuf_alloc+0x2f8>)
 80064e8:	4877      	ldr	r0, [pc, #476]	; (80066c8 <pbuf_alloc+0x2f0>)
 80064ea:	f008 f8c1 	bl	800e670 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80064ee:	8afb      	ldrh	r3, [r7, #22]
 80064f0:	3303      	adds	r3, #3
 80064f2:	f023 0303 	bic.w	r3, r3, #3
 80064f6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80064fa:	d106      	bne.n	800650a <pbuf_alloc+0x132>
 80064fc:	4b70      	ldr	r3, [pc, #448]	; (80066c0 <pbuf_alloc+0x2e8>)
 80064fe:	f44f 7299 	mov.w	r2, #306	; 0x132
 8006502:	4974      	ldr	r1, [pc, #464]	; (80066d4 <pbuf_alloc+0x2fc>)
 8006504:	4870      	ldr	r0, [pc, #448]	; (80066c8 <pbuf_alloc+0x2f0>)
 8006506:	f008 f8b3 	bl	800e670 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	2201      	movs	r2, #1
 800650e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8006514:	88bb      	ldrh	r3, [r7, #4]
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	8952      	ldrh	r2, [r2, #10]
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800651e:	e061      	b.n	80065e4 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006520:	2008      	movs	r0, #8
 8006522:	f7ff fd55 	bl	8005fd0 <memp_malloc>
 8006526:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800652e:	f7ff ff47 	bl	80063c0 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8006532:	69f8      	ldr	r0, [r7, #28]
 8006534:	f000 fac2 	bl	8006abc <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	e0dd      	b.n	80066f8 <pbuf_alloc+0x320>
      }
      q->type = type;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	79ba      	ldrb	r2, [r7, #6]
 8006540:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800655a:	4293      	cmp	r3, r2
 800655c:	dd06      	ble.n	800656c <pbuf_alloc+0x194>
 800655e:	4b58      	ldr	r3, [pc, #352]	; (80066c0 <pbuf_alloc+0x2e8>)
 8006560:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8006564:	495c      	ldr	r1, [pc, #368]	; (80066d8 <pbuf_alloc+0x300>)
 8006566:	4858      	ldr	r0, [pc, #352]	; (80066c8 <pbuf_alloc+0x2f0>)
 8006568:	f008 f882 	bl	800e670 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800657c:	bf28      	it	cs
 800657e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f103 0210 	add.w	r2, r3, #16
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d006      	beq.n	80065ac <pbuf_alloc+0x1d4>
 800659e:	4b48      	ldr	r3, [pc, #288]	; (80066c0 <pbuf_alloc+0x2e8>)
 80065a0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80065a4:	494d      	ldr	r1, [pc, #308]	; (80066dc <pbuf_alloc+0x304>)
 80065a6:	4848      	ldr	r0, [pc, #288]	; (80066c8 <pbuf_alloc+0x2f0>)
 80065a8:	f008 f862 	bl	800e670 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	8952      	ldrh	r2, [r2, #10]
 80065b4:	441a      	add	r2, r3
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80065bc:	429a      	cmp	r2, r3
 80065be:	d906      	bls.n	80065ce <pbuf_alloc+0x1f6>
 80065c0:	4b3f      	ldr	r3, [pc, #252]	; (80066c0 <pbuf_alloc+0x2e8>)
 80065c2:	f240 1255 	movw	r2, #341	; 0x155
 80065c6:	4942      	ldr	r1, [pc, #264]	; (80066d0 <pbuf_alloc+0x2f8>)
 80065c8:	483f      	ldr	r0, [pc, #252]	; (80066c8 <pbuf_alloc+0x2f0>)
 80065ca:	f008 f851 	bl	800e670 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	895b      	ldrh	r3, [r3, #10]
 80065d8:	461a      	mov	r2, r3
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	dc9a      	bgt.n	8006520 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80065ea:	e07e      	b.n	80066ea <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80065ec:	8afb      	ldrh	r3, [r7, #22]
 80065ee:	3313      	adds	r3, #19
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f023 0303 	bic.w	r3, r3, #3
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	88bb      	ldrh	r3, [r7, #4]
 80065fa:	3303      	adds	r3, #3
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	b29b      	uxth	r3, r3
 8006604:	4413      	add	r3, r2
 8006606:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8006608:	897a      	ldrh	r2, [r7, #10]
 800660a:	88bb      	ldrh	r3, [r7, #4]
 800660c:	3303      	adds	r3, #3
 800660e:	f023 0303 	bic.w	r3, r3, #3
 8006612:	429a      	cmp	r2, r3
 8006614:	d201      	bcs.n	800661a <pbuf_alloc+0x242>
        return NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	e06e      	b.n	80066f8 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800661a:	897b      	ldrh	r3, [r7, #10]
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fb79 	bl	8005d14 <mem_malloc>
 8006622:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <pbuf_alloc+0x256>
      return NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	e064      	b.n	80066f8 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800662e:	8afb      	ldrh	r3, [r7, #22]
 8006630:	3310      	adds	r3, #16
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	4413      	add	r3, r2
 8006636:	3303      	adds	r3, #3
 8006638:	f023 0303 	bic.w	r3, r3, #3
 800663c:	461a      	mov	r2, r3
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	88ba      	ldrh	r2, [r7, #4]
 8006646:	811a      	strh	r2, [r3, #8]
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	891a      	ldrh	r2, [r3, #8]
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
    p->type = type;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	79ba      	ldrb	r2, [r7, #6]
 800665a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d03f      	beq.n	80066e8 <pbuf_alloc+0x310>
 8006668:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <pbuf_alloc+0x2e8>)
 800666a:	f240 1277 	movw	r2, #375	; 0x177
 800666e:	491c      	ldr	r1, [pc, #112]	; (80066e0 <pbuf_alloc+0x308>)
 8006670:	4815      	ldr	r0, [pc, #84]	; (80066c8 <pbuf_alloc+0x2f0>)
 8006672:	f007 fffd 	bl	800e670 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8006676:	e037      	b.n	80066e8 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006678:	2007      	movs	r0, #7
 800667a:	f7ff fca9 	bl	8005fd0 <memp_malloc>
 800667e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	e036      	b.n	80066f8 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	2200      	movs	r2, #0
 800668e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	88ba      	ldrh	r2, [r7, #4]
 8006694:	811a      	strh	r2, [r3, #8]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	891a      	ldrh	r2, [r3, #8]
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
    p->type = type;
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	79ba      	ldrb	r2, [r7, #6]
 80066a8:	731a      	strb	r2, [r3, #12]
    break;
 80066aa:	e01e      	b.n	80066ea <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80066ac:	4b04      	ldr	r3, [pc, #16]	; (80066c0 <pbuf_alloc+0x2e8>)
 80066ae:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80066b2:	490c      	ldr	r1, [pc, #48]	; (80066e4 <pbuf_alloc+0x30c>)
 80066b4:	4804      	ldr	r0, [pc, #16]	; (80066c8 <pbuf_alloc+0x2f0>)
 80066b6:	f007 ffdb 	bl	800e670 <iprintf>
    return NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e01c      	b.n	80066f8 <pbuf_alloc+0x320>
 80066be:	bf00      	nop
 80066c0:	0800f9dc 	.word	0x0800f9dc
 80066c4:	0800fa0c 	.word	0x0800fa0c
 80066c8:	0800fa28 	.word	0x0800fa28
 80066cc:	0800fa50 	.word	0x0800fa50
 80066d0:	0800fa80 	.word	0x0800fa80
 80066d4:	0800fab4 	.word	0x0800fab4
 80066d8:	0800fae8 	.word	0x0800fae8
 80066dc:	0800fafc 	.word	0x0800fafc
 80066e0:	0800fb2c 	.word	0x0800fb2c
 80066e4:	0800fb58 	.word	0x0800fb58
    break;
 80066e8:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	2201      	movs	r2, #1
 80066ee:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2200      	movs	r2, #0
 80066f4:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80066f6:	69fb      	ldr	r3, [r7, #28]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3720      	adds	r7, #32
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	4603      	mov	r3, r0
 800670a:	71fb      	strb	r3, [r7, #7]
 800670c:	460b      	mov	r3, r1
 800670e:	80bb      	strh	r3, [r7, #4]
 8006710:	4613      	mov	r3, r2
 8006712:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	2b04      	cmp	r3, #4
 8006718:	d81b      	bhi.n	8006752 <pbuf_alloced_custom+0x52>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <pbuf_alloced_custom+0x20>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006735 	.word	0x08006735
 8006724:	0800673b 	.word	0x0800673b
 8006728:	08006741 	.word	0x08006741
 800672c:	08006747 	.word	0x08006747
 8006730:	0800674d 	.word	0x0800674d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006734:	2336      	movs	r3, #54	; 0x36
 8006736:	81fb      	strh	r3, [r7, #14]
    break;
 8006738:	e014      	b.n	8006764 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800673a:	2322      	movs	r3, #34	; 0x22
 800673c:	81fb      	strh	r3, [r7, #14]
    break;
 800673e:	e011      	b.n	8006764 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006740:	230e      	movs	r3, #14
 8006742:	81fb      	strh	r3, [r7, #14]
    break;
 8006744:	e00e      	b.n	8006764 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8006746:	2300      	movs	r3, #0
 8006748:	81fb      	strh	r3, [r7, #14]
    break;
 800674a:	e00b      	b.n	8006764 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	81fb      	strh	r3, [r7, #14]
    break;
 8006750:	e008      	b.n	8006764 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8006752:	4b1d      	ldr	r3, [pc, #116]	; (80067c8 <pbuf_alloced_custom+0xc8>)
 8006754:	f240 12c5 	movw	r2, #453	; 0x1c5
 8006758:	491c      	ldr	r1, [pc, #112]	; (80067cc <pbuf_alloced_custom+0xcc>)
 800675a:	481d      	ldr	r0, [pc, #116]	; (80067d0 <pbuf_alloced_custom+0xd0>)
 800675c:	f007 ff88 	bl	800e670 <iprintf>
    return NULL;
 8006760:	2300      	movs	r3, #0
 8006762:	e02d      	b.n	80067c0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006764:	89fb      	ldrh	r3, [r7, #14]
 8006766:	3303      	adds	r3, #3
 8006768:	f023 0203 	bic.w	r2, r3, #3
 800676c:	88bb      	ldrh	r3, [r7, #4]
 800676e:	441a      	add	r2, r3
 8006770:	8bbb      	ldrh	r3, [r7, #28]
 8006772:	429a      	cmp	r2, r3
 8006774:	d901      	bls.n	800677a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	e022      	b.n	80067c0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d008      	beq.n	8006798 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006786:	89fb      	ldrh	r3, [r7, #14]
 8006788:	3303      	adds	r3, #3
 800678a:	f023 0303 	bic.w	r3, r3, #3
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	441a      	add	r2, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	e002      	b.n	800679e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2200      	movs	r2, #0
 800679c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2202      	movs	r2, #2
 80067a2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	88ba      	ldrh	r2, [r7, #4]
 80067a8:	811a      	strh	r2, [r3, #8]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	891a      	ldrh	r2, [r3, #8]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	79ba      	ldrb	r2, [r7, #6]
 80067b6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2201      	movs	r2, #1
 80067bc:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80067be:	683b      	ldr	r3, [r7, #0]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	0800f9dc 	.word	0x0800f9dc
 80067cc:	0800fb74 	.word	0x0800fb74
 80067d0:	0800fa28 	.word	0x0800fa28

080067d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <pbuf_realloc+0x20>
 80067e6:	4b4b      	ldr	r3, [pc, #300]	; (8006914 <pbuf_realloc+0x140>)
 80067e8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80067ec:	494a      	ldr	r1, [pc, #296]	; (8006918 <pbuf_realloc+0x144>)
 80067ee:	484b      	ldr	r0, [pc, #300]	; (800691c <pbuf_realloc+0x148>)
 80067f0:	f007 ff3e 	bl	800e670 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	7b1b      	ldrb	r3, [r3, #12]
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d012      	beq.n	8006822 <pbuf_realloc+0x4e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	7b1b      	ldrb	r3, [r3, #12]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d00e      	beq.n	8006822 <pbuf_realloc+0x4e>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	7b1b      	ldrb	r3, [r3, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <pbuf_realloc+0x4e>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7b1b      	ldrb	r3, [r3, #12]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d006      	beq.n	8006822 <pbuf_realloc+0x4e>
 8006814:	4b3f      	ldr	r3, [pc, #252]	; (8006914 <pbuf_realloc+0x140>)
 8006816:	f240 12f7 	movw	r2, #503	; 0x1f7
 800681a:	4941      	ldr	r1, [pc, #260]	; (8006920 <pbuf_realloc+0x14c>)
 800681c:	483f      	ldr	r0, [pc, #252]	; (800691c <pbuf_realloc+0x148>)
 800681e:	f007 ff27 	bl	800e670 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	891b      	ldrh	r3, [r3, #8]
 8006826:	887a      	ldrh	r2, [r7, #2]
 8006828:	429a      	cmp	r2, r3
 800682a:	d26f      	bcs.n	800690c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800682c:	887b      	ldrh	r3, [r7, #2]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	8912      	ldrh	r2, [r2, #8]
 8006832:	1a9b      	subs	r3, r3, r2
 8006834:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006836:	887b      	ldrh	r3, [r7, #2]
 8006838:	827b      	strh	r3, [r7, #18]
  q = p;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800683e:	e025      	b.n	800688c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	895b      	ldrh	r3, [r3, #10]
 8006844:	8a7a      	ldrh	r2, [r7, #18]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006850:	4293      	cmp	r3, r2
 8006852:	dd06      	ble.n	8006862 <pbuf_realloc+0x8e>
 8006854:	4b2f      	ldr	r3, [pc, #188]	; (8006914 <pbuf_realloc+0x140>)
 8006856:	f240 220b 	movw	r2, #523	; 0x20b
 800685a:	4932      	ldr	r1, [pc, #200]	; (8006924 <pbuf_realloc+0x150>)
 800685c:	482f      	ldr	r0, [pc, #188]	; (800691c <pbuf_realloc+0x148>)
 800685e:	f007 ff07 	bl	800e670 <iprintf>
    q->tot_len += (u16_t)grow;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	891a      	ldrh	r2, [r3, #8]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	b29b      	uxth	r3, r3
 800686a:	4413      	add	r3, r2
 800686c:	b29a      	uxth	r2, r3
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d106      	bne.n	800688c <pbuf_realloc+0xb8>
 800687e:	4b25      	ldr	r3, [pc, #148]	; (8006914 <pbuf_realloc+0x140>)
 8006880:	f240 220f 	movw	r2, #527	; 0x20f
 8006884:	4928      	ldr	r1, [pc, #160]	; (8006928 <pbuf_realloc+0x154>)
 8006886:	4825      	ldr	r0, [pc, #148]	; (800691c <pbuf_realloc+0x148>)
 8006888:	f007 fef2 	bl	800e670 <iprintf>
  while (rem_len > q->len) {
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	895b      	ldrh	r3, [r3, #10]
 8006890:	8a7a      	ldrh	r2, [r7, #18]
 8006892:	429a      	cmp	r2, r3
 8006894:	d8d4      	bhi.n	8006840 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	7b1b      	ldrb	r3, [r3, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d122      	bne.n	80068e4 <pbuf_realloc+0x110>
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	895b      	ldrh	r3, [r3, #10]
 80068a2:	8a7a      	ldrh	r2, [r7, #18]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d01d      	beq.n	80068e4 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	7b5b      	ldrb	r3, [r3, #13]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d117      	bne.n	80068e4 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	461a      	mov	r2, r3
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	b29a      	uxth	r2, r3
 80068c0:	8a7b      	ldrh	r3, [r7, #18]
 80068c2:	4413      	add	r3, r2
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	4619      	mov	r1, r3
 80068c8:	6978      	ldr	r0, [r7, #20]
 80068ca:	f7ff f947 	bl	8005b5c <mem_trim>
 80068ce:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <pbuf_realloc+0x110>
 80068d6:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <pbuf_realloc+0x140>)
 80068d8:	f240 221d 	movw	r2, #541	; 0x21d
 80068dc:	4913      	ldr	r1, [pc, #76]	; (800692c <pbuf_realloc+0x158>)
 80068de:	480f      	ldr	r0, [pc, #60]	; (800691c <pbuf_realloc+0x148>)
 80068e0:	f007 fec6 	bl	800e670 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	8a7a      	ldrh	r2, [r7, #18]
 80068e8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	895a      	ldrh	r2, [r3, #10]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d004      	beq.n	8006904 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 f8dc 	bl	8006abc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	e000      	b.n	800690e <pbuf_realloc+0x13a>
    return;
 800690c:	bf00      	nop

}
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	0800f9dc 	.word	0x0800f9dc
 8006918:	0800fb98 	.word	0x0800fb98
 800691c:	0800fa28 	.word	0x0800fa28
 8006920:	0800fbb0 	.word	0x0800fbb0
 8006924:	0800fbcc 	.word	0x0800fbcc
 8006928:	0800fbe0 	.word	0x0800fbe0
 800692c:	0800fbf8 	.word	0x0800fbf8

08006930 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	807b      	strh	r3, [r7, #2]
 800693c:	4613      	mov	r3, r2
 800693e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <pbuf_header_impl+0x24>
 8006946:	4b46      	ldr	r3, [pc, #280]	; (8006a60 <pbuf_header_impl+0x130>)
 8006948:	f240 223f 	movw	r2, #575	; 0x23f
 800694c:	4945      	ldr	r1, [pc, #276]	; (8006a64 <pbuf_header_impl+0x134>)
 800694e:	4846      	ldr	r0, [pc, #280]	; (8006a68 <pbuf_header_impl+0x138>)
 8006950:	f007 fe8e 	bl	800e670 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8006954:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <pbuf_header_impl+0x32>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <pbuf_header_impl+0x36>
    return 0;
 8006962:	2300      	movs	r3, #0
 8006964:	e078      	b.n	8006a58 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8006966:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800696a:	2b00      	cmp	r3, #0
 800696c:	da10      	bge.n	8006990 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800696e:	887b      	ldrh	r3, [r7, #2]
 8006970:	425b      	negs	r3, r3
 8006972:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	895b      	ldrh	r3, [r3, #10]
 8006978:	89fa      	ldrh	r2, [r7, #14]
 800697a:	429a      	cmp	r2, r3
 800697c:	d90a      	bls.n	8006994 <pbuf_header_impl+0x64>
 800697e:	4b38      	ldr	r3, [pc, #224]	; (8006a60 <pbuf_header_impl+0x130>)
 8006980:	f240 2247 	movw	r2, #583	; 0x247
 8006984:	4939      	ldr	r1, [pc, #228]	; (8006a6c <pbuf_header_impl+0x13c>)
 8006986:	4838      	ldr	r0, [pc, #224]	; (8006a68 <pbuf_header_impl+0x138>)
 8006988:	f007 fe72 	bl	800e670 <iprintf>
 800698c:	2301      	movs	r3, #1
 800698e:	e063      	b.n	8006a58 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8006990:	887b      	ldrh	r3, [r7, #2]
 8006992:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	7b1b      	ldrb	r3, [r3, #12]
 8006998:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80069a0:	89bb      	ldrh	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <pbuf_header_impl+0x7c>
 80069a6:	89bb      	ldrh	r3, [r7, #12]
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d112      	bne.n	80069d2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069b4:	425b      	negs	r3, r3
 80069b6:	441a      	add	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3310      	adds	r3, #16
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d238      	bcs.n	8006a3a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e042      	b.n	8006a58 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80069d2:	89bb      	ldrh	r3, [r7, #12]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d002      	beq.n	80069de <pbuf_header_impl+0xae>
 80069d8:	89bb      	ldrh	r3, [r7, #12]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d124      	bne.n	8006a28 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80069de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	da0d      	bge.n	8006a02 <pbuf_header_impl+0xd2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	895b      	ldrh	r3, [r3, #10]
 80069ea:	89fa      	ldrh	r2, [r7, #14]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d808      	bhi.n	8006a02 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069f8:	425b      	negs	r3, r3
 80069fa:	441a      	add	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	605a      	str	r2, [r3, #4]
 8006a00:	e011      	b.n	8006a26 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8006a02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dd0b      	ble.n	8006a22 <pbuf_header_impl+0xf2>
 8006a0a:	787b      	ldrb	r3, [r7, #1]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d008      	beq.n	8006a22 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a18:	425b      	negs	r3, r3
 8006a1a:	441a      	add	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	605a      	str	r2, [r3, #4]
 8006a20:	e001      	b.n	8006a26 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e018      	b.n	8006a58 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006a26:	e008      	b.n	8006a3a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8006a28:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <pbuf_header_impl+0x130>)
 8006a2a:	f240 2277 	movw	r2, #631	; 0x277
 8006a2e:	4910      	ldr	r1, [pc, #64]	; (8006a70 <pbuf_header_impl+0x140>)
 8006a30:	480d      	ldr	r0, [pc, #52]	; (8006a68 <pbuf_header_impl+0x138>)
 8006a32:	f007 fe1d 	bl	800e670 <iprintf>
    return 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e00e      	b.n	8006a58 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	895a      	ldrh	r2, [r3, #10]
 8006a3e:	887b      	ldrh	r3, [r7, #2]
 8006a40:	4413      	add	r3, r2
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	891a      	ldrh	r2, [r3, #8]
 8006a4c:	887b      	ldrh	r3, [r7, #2]
 8006a4e:	4413      	add	r3, r2
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	0800f9dc 	.word	0x0800f9dc
 8006a64:	0800fc14 	.word	0x0800fc14
 8006a68:	0800fa28 	.word	0x0800fa28
 8006a6c:	0800fc20 	.word	0x0800fc20
 8006a70:	0800fc40 	.word	0x0800fc40

08006a74 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8006a80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a84:	2200      	movs	r2, #0
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff ff51 	bl	8006930 <pbuf_header_impl>
 8006a8e:	4603      	mov	r3, r0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8006aa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff ff3f 	bl	8006930 <pbuf_header_impl>
 8006ab2:	4603      	mov	r3, r0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d106      	bne.n	8006ade <pbuf_free+0x22>
 8006ad0:	4b3e      	ldr	r3, [pc, #248]	; (8006bcc <pbuf_free+0x110>)
 8006ad2:	f240 22d2 	movw	r2, #722	; 0x2d2
 8006ad6:	493e      	ldr	r1, [pc, #248]	; (8006bd0 <pbuf_free+0x114>)
 8006ad8:	483e      	ldr	r0, [pc, #248]	; (8006bd4 <pbuf_free+0x118>)
 8006ada:	f007 fdc9 	bl	800e670 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e070      	b.n	8006bc4 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	7b1b      	ldrb	r3, [r3, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d012      	beq.n	8006b10 <pbuf_free+0x54>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	7b1b      	ldrb	r3, [r3, #12]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d00e      	beq.n	8006b10 <pbuf_free+0x54>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	7b1b      	ldrb	r3, [r3, #12]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d00a      	beq.n	8006b10 <pbuf_free+0x54>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	7b1b      	ldrb	r3, [r3, #12]
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d006      	beq.n	8006b10 <pbuf_free+0x54>
 8006b02:	4b32      	ldr	r3, [pc, #200]	; (8006bcc <pbuf_free+0x110>)
 8006b04:	f240 22de 	movw	r2, #734	; 0x2de
 8006b08:	4933      	ldr	r1, [pc, #204]	; (8006bd8 <pbuf_free+0x11c>)
 8006b0a:	4832      	ldr	r0, [pc, #200]	; (8006bd4 <pbuf_free+0x118>)
 8006b0c:	f007 fdb0 	bl	800e670 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006b14:	e052      	b.n	8006bbc <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	89db      	ldrh	r3, [r3, #14]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <pbuf_free+0x70>
 8006b1e:	4b2b      	ldr	r3, [pc, #172]	; (8006bcc <pbuf_free+0x110>)
 8006b20:	f240 22eb 	movw	r2, #747	; 0x2eb
 8006b24:	492d      	ldr	r1, [pc, #180]	; (8006bdc <pbuf_free+0x120>)
 8006b26:	482b      	ldr	r0, [pc, #172]	; (8006bd4 <pbuf_free+0x118>)
 8006b28:	f007 fda2 	bl	800e670 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	89db      	ldrh	r3, [r3, #14]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	81da      	strh	r2, [r3, #14]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	89db      	ldrh	r3, [r3, #14]
 8006b3c:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006b3e:	8abb      	ldrh	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d139      	bne.n	8006bb8 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	7b1b      	ldrb	r3, [r3, #12]
 8006b4e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	7b5b      	ldrb	r3, [r3, #13]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d011      	beq.n	8006b80 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <pbuf_free+0xba>
 8006b68:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <pbuf_free+0x110>)
 8006b6a:	f240 22f9 	movw	r2, #761	; 0x2f9
 8006b6e:	491c      	ldr	r1, [pc, #112]	; (8006be0 <pbuf_free+0x124>)
 8006b70:	4818      	ldr	r0, [pc, #96]	; (8006bd4 <pbuf_free+0x118>)
 8006b72:	f007 fd7d 	bl	800e670 <iprintf>
        pc->custom_free_function(p);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
 8006b7e:	e015      	b.n	8006bac <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8006b80:	89fb      	ldrh	r3, [r7, #14]
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d104      	bne.n	8006b90 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	2008      	movs	r0, #8
 8006b8a:	f7ff fa6d 	bl	8006068 <memp_free>
 8006b8e:	e00d      	b.n	8006bac <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8006b90:	89fb      	ldrh	r3, [r7, #14]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d002      	beq.n	8006b9c <pbuf_free+0xe0>
 8006b96:	89fb      	ldrh	r3, [r7, #14]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d104      	bne.n	8006ba6 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	2007      	movs	r0, #7
 8006ba0:	f7ff fa62 	bl	8006068 <memp_free>
 8006ba4:	e002      	b.n	8006bac <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fe ff76 	bl	8005a98 <mem_free>
        }
      }
      count++;
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	607b      	str	r3, [r7, #4]
 8006bb6:	e001      	b.n	8006bbc <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1a9      	bne.n	8006b16 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	0800f9dc 	.word	0x0800f9dc
 8006bd0:	0800fc14 	.word	0x0800fc14
 8006bd4:	0800fa28 	.word	0x0800fa28
 8006bd8:	0800fc50 	.word	0x0800fc50
 8006bdc:	0800fc68 	.word	0x0800fc68
 8006be0:	0800fc80 	.word	0x0800fc80

08006be4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006bf0:	e005      	b.n	8006bfe <pbuf_clen+0x1a>
    ++len;
 8006bf2:	89fb      	ldrh	r3, [r7, #14]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f6      	bne.n	8006bf2 <pbuf_clen+0xe>
  }
  return len;
 8006c04:	89fb      	ldrh	r3, [r7, #14]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d010      	beq.n	8006c44 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	89db      	ldrh	r3, [r3, #14]
 8006c26:	3301      	adds	r3, #1
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	89db      	ldrh	r3, [r3, #14]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <pbuf_ref+0x30>
 8006c36:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <pbuf_ref+0x38>)
 8006c38:	f240 3239 	movw	r2, #825	; 0x339
 8006c3c:	4904      	ldr	r1, [pc, #16]	; (8006c50 <pbuf_ref+0x3c>)
 8006c3e:	4805      	ldr	r0, [pc, #20]	; (8006c54 <pbuf_ref+0x40>)
 8006c40:	f007 fd16 	bl	800e670 <iprintf>
  }
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	0800f9dc 	.word	0x0800f9dc
 8006c50:	0800fca4 	.word	0x0800fca4
 8006c54:	0800fa28 	.word	0x0800fa28

08006c58 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <pbuf_cat+0x16>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d107      	bne.n	8006c7e <pbuf_cat+0x26>
 8006c6e:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <pbuf_cat+0x98>)
 8006c70:	f240 324d 	movw	r2, #845	; 0x34d
 8006c74:	491f      	ldr	r1, [pc, #124]	; (8006cf4 <pbuf_cat+0x9c>)
 8006c76:	4820      	ldr	r0, [pc, #128]	; (8006cf8 <pbuf_cat+0xa0>)
 8006c78:	f007 fcfa 	bl	800e670 <iprintf>
 8006c7c:	e034      	b.n	8006ce8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	e00a      	b.n	8006c9a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	891a      	ldrh	r2, [r3, #8]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	891b      	ldrh	r3, [r3, #8]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1f0      	bne.n	8006c84 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	891a      	ldrh	r2, [r3, #8]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	895b      	ldrh	r3, [r3, #10]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d006      	beq.n	8006cbc <pbuf_cat+0x64>
 8006cae:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <pbuf_cat+0x98>)
 8006cb0:	f240 3255 	movw	r2, #853	; 0x355
 8006cb4:	4911      	ldr	r1, [pc, #68]	; (8006cfc <pbuf_cat+0xa4>)
 8006cb6:	4810      	ldr	r0, [pc, #64]	; (8006cf8 <pbuf_cat+0xa0>)
 8006cb8:	f007 fcda 	bl	800e670 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d006      	beq.n	8006cd2 <pbuf_cat+0x7a>
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <pbuf_cat+0x98>)
 8006cc6:	f240 3256 	movw	r2, #854	; 0x356
 8006cca:	490d      	ldr	r1, [pc, #52]	; (8006d00 <pbuf_cat+0xa8>)
 8006ccc:	480a      	ldr	r0, [pc, #40]	; (8006cf8 <pbuf_cat+0xa0>)
 8006cce:	f007 fccf 	bl	800e670 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	891a      	ldrh	r2, [r3, #8]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	891b      	ldrh	r3, [r3, #8]
 8006cda:	4413      	add	r3, r2
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	0800f9dc 	.word	0x0800f9dc
 8006cf4:	0800fcb8 	.word	0x0800fcb8
 8006cf8:	0800fa28 	.word	0x0800fa28
 8006cfc:	0800fcf0 	.word	0x0800fcf0
 8006d00:	0800fd20 	.word	0x0800fd20

08006d04 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff ffa1 	bl	8006c58 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006d16:	6838      	ldr	r0, [r7, #0]
 8006d18:	f7ff ff7c 	bl	8006c14 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	81fb      	strh	r3, [r7, #14]
 8006d32:	2300      	movs	r3, #0
 8006d34:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <pbuf_copy+0x2a>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <pbuf_copy+0x2a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	891a      	ldrh	r2, [r3, #8]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	891b      	ldrh	r3, [r3, #8]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d209      	bcs.n	8006d62 <pbuf_copy+0x3e>
 8006d4e:	4b54      	ldr	r3, [pc, #336]	; (8006ea0 <pbuf_copy+0x17c>)
 8006d50:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006d54:	4953      	ldr	r1, [pc, #332]	; (8006ea4 <pbuf_copy+0x180>)
 8006d56:	4854      	ldr	r0, [pc, #336]	; (8006ea8 <pbuf_copy+0x184>)
 8006d58:	f007 fc8a 	bl	800e670 <iprintf>
 8006d5c:	f06f 030f 	mvn.w	r3, #15
 8006d60:	e099      	b.n	8006e96 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	895b      	ldrh	r3, [r3, #10]
 8006d66:	461a      	mov	r2, r3
 8006d68:	89fb      	ldrh	r3, [r7, #14]
 8006d6a:	1ad2      	subs	r2, r2, r3
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	895b      	ldrh	r3, [r3, #10]
 8006d70:	4619      	mov	r1, r3
 8006d72:	89bb      	ldrh	r3, [r7, #12]
 8006d74:	1acb      	subs	r3, r1, r3
 8006d76:	429a      	cmp	r2, r3
 8006d78:	db05      	blt.n	8006d86 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	895a      	ldrh	r2, [r3, #10]
 8006d7e:	89bb      	ldrh	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	817b      	strh	r3, [r7, #10]
 8006d84:	e004      	b.n	8006d90 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	895a      	ldrh	r2, [r3, #10]
 8006d8a:	89fb      	ldrh	r3, [r7, #14]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	89fb      	ldrh	r3, [r7, #14]
 8006d96:	18d0      	adds	r0, r2, r3
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	89bb      	ldrh	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	897a      	ldrh	r2, [r7, #10]
 8006da2:	4619      	mov	r1, r3
 8006da4:	f007 fc51 	bl	800e64a <memcpy>
    offset_to += len;
 8006da8:	89fa      	ldrh	r2, [r7, #14]
 8006daa:	897b      	ldrh	r3, [r7, #10]
 8006dac:	4413      	add	r3, r2
 8006dae:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8006db0:	89ba      	ldrh	r2, [r7, #12]
 8006db2:	897b      	ldrh	r3, [r7, #10]
 8006db4:	4413      	add	r3, r2
 8006db6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	895b      	ldrh	r3, [r3, #10]
 8006dbc:	89fa      	ldrh	r2, [r7, #14]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d906      	bls.n	8006dd0 <pbuf_copy+0xac>
 8006dc2:	4b37      	ldr	r3, [pc, #220]	; (8006ea0 <pbuf_copy+0x17c>)
 8006dc4:	f240 32cd 	movw	r2, #973	; 0x3cd
 8006dc8:	4938      	ldr	r1, [pc, #224]	; (8006eac <pbuf_copy+0x188>)
 8006dca:	4837      	ldr	r0, [pc, #220]	; (8006ea8 <pbuf_copy+0x184>)
 8006dcc:	f007 fc50 	bl	800e670 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	895b      	ldrh	r3, [r3, #10]
 8006dd4:	89ba      	ldrh	r2, [r7, #12]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d906      	bls.n	8006de8 <pbuf_copy+0xc4>
 8006dda:	4b31      	ldr	r3, [pc, #196]	; (8006ea0 <pbuf_copy+0x17c>)
 8006ddc:	f240 32ce 	movw	r2, #974	; 0x3ce
 8006de0:	4933      	ldr	r1, [pc, #204]	; (8006eb0 <pbuf_copy+0x18c>)
 8006de2:	4831      	ldr	r0, [pc, #196]	; (8006ea8 <pbuf_copy+0x184>)
 8006de4:	f007 fc44 	bl	800e670 <iprintf>
    if (offset_from >= p_from->len) {
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	895b      	ldrh	r3, [r3, #10]
 8006dec:	89ba      	ldrh	r2, [r7, #12]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d304      	bcc.n	8006dfc <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	895b      	ldrh	r3, [r3, #10]
 8006e00:	89fa      	ldrh	r2, [r7, #14]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d114      	bne.n	8006e30 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10c      	bne.n	8006e30 <pbuf_copy+0x10c>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <pbuf_copy+0x10c>
 8006e1c:	4b20      	ldr	r3, [pc, #128]	; (8006ea0 <pbuf_copy+0x17c>)
 8006e1e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8006e22:	4924      	ldr	r1, [pc, #144]	; (8006eb4 <pbuf_copy+0x190>)
 8006e24:	4820      	ldr	r0, [pc, #128]	; (8006ea8 <pbuf_copy+0x184>)
 8006e26:	f007 fc23 	bl	800e670 <iprintf>
 8006e2a:	f06f 030f 	mvn.w	r3, #15
 8006e2e:	e032      	b.n	8006e96 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d013      	beq.n	8006e5e <pbuf_copy+0x13a>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	895a      	ldrh	r2, [r3, #10]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	891b      	ldrh	r3, [r3, #8]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d10d      	bne.n	8006e5e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <pbuf_copy+0x13a>
 8006e4a:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <pbuf_copy+0x17c>)
 8006e4c:	f240 32de 	movw	r2, #990	; 0x3de
 8006e50:	4919      	ldr	r1, [pc, #100]	; (8006eb8 <pbuf_copy+0x194>)
 8006e52:	4815      	ldr	r0, [pc, #84]	; (8006ea8 <pbuf_copy+0x184>)
 8006e54:	f007 fc0c 	bl	800e670 <iprintf>
 8006e58:	f06f 0305 	mvn.w	r3, #5
 8006e5c:	e01b      	b.n	8006e96 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d013      	beq.n	8006e8c <pbuf_copy+0x168>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	895a      	ldrh	r2, [r3, #10]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	891b      	ldrh	r3, [r3, #8]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d10d      	bne.n	8006e8c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <pbuf_copy+0x168>
 8006e78:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <pbuf_copy+0x17c>)
 8006e7a:	f240 32e3 	movw	r2, #995	; 0x3e3
 8006e7e:	490e      	ldr	r1, [pc, #56]	; (8006eb8 <pbuf_copy+0x194>)
 8006e80:	4809      	ldr	r0, [pc, #36]	; (8006ea8 <pbuf_copy+0x184>)
 8006e82:	f007 fbf5 	bl	800e670 <iprintf>
 8006e86:	f06f 0305 	mvn.w	r3, #5
 8006e8a:	e004      	b.n	8006e96 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f47f af67 	bne.w	8006d62 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	0800f9dc 	.word	0x0800f9dc
 8006ea4:	0800fd6c 	.word	0x0800fd6c
 8006ea8:	0800fa28 	.word	0x0800fa28
 8006eac:	0800fd9c 	.word	0x0800fd9c
 8006eb0:	0800fdb4 	.word	0x0800fdb4
 8006eb4:	0800fdd0 	.word	0x0800fdd0
 8006eb8:	0800fde0 	.word	0x0800fde0

08006ebc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b088      	sub	sp, #32
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	461a      	mov	r2, r3
 8006eca:	460b      	mov	r3, r1
 8006ecc:	80fb      	strh	r3, [r7, #6]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d108      	bne.n	8006eee <pbuf_copy_partial+0x32>
 8006edc:	4b30      	ldr	r3, [pc, #192]	; (8006fa0 <pbuf_copy_partial+0xe4>)
 8006ede:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8006ee2:	4930      	ldr	r1, [pc, #192]	; (8006fa4 <pbuf_copy_partial+0xe8>)
 8006ee4:	4830      	ldr	r0, [pc, #192]	; (8006fa8 <pbuf_copy_partial+0xec>)
 8006ee6:	f007 fbc3 	bl	800e670 <iprintf>
 8006eea:	2300      	movs	r3, #0
 8006eec:	e054      	b.n	8006f98 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d108      	bne.n	8006f06 <pbuf_copy_partial+0x4a>
 8006ef4:	4b2a      	ldr	r3, [pc, #168]	; (8006fa0 <pbuf_copy_partial+0xe4>)
 8006ef6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006efa:	492c      	ldr	r1, [pc, #176]	; (8006fac <pbuf_copy_partial+0xf0>)
 8006efc:	482a      	ldr	r0, [pc, #168]	; (8006fa8 <pbuf_copy_partial+0xec>)
 8006efe:	f007 fbb7 	bl	800e670 <iprintf>
 8006f02:	2300      	movs	r3, #0
 8006f04:	e048      	b.n	8006f98 <pbuf_copy_partial+0xdc>

  left = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <pbuf_copy_partial+0x5a>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <pbuf_copy_partial+0x5e>
    return 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e03e      	b.n	8006f98 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	61fb      	str	r3, [r7, #28]
 8006f1e:	e034      	b.n	8006f8a <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8006f20:	88bb      	ldrh	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <pbuf_copy_partial+0x80>
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	895b      	ldrh	r3, [r3, #10]
 8006f2a:	88ba      	ldrh	r2, [r7, #4]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d305      	bcc.n	8006f3c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	895b      	ldrh	r3, [r3, #10]
 8006f34:	88ba      	ldrh	r2, [r7, #4]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	80bb      	strh	r3, [r7, #4]
 8006f3a:	e023      	b.n	8006f84 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	895a      	ldrh	r2, [r3, #10]
 8006f40:	88bb      	ldrh	r3, [r7, #4]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006f46:	8b3a      	ldrh	r2, [r7, #24]
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d901      	bls.n	8006f52 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8006f52:	8b7b      	ldrh	r3, [r7, #26]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	18d0      	adds	r0, r2, r3
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	88bb      	ldrh	r3, [r7, #4]
 8006f5e:	4413      	add	r3, r2
 8006f60:	8b3a      	ldrh	r2, [r7, #24]
 8006f62:	4619      	mov	r1, r3
 8006f64:	f007 fb71 	bl	800e64a <memcpy>
      copied_total += buf_copy_len;
 8006f68:	8afa      	ldrh	r2, [r7, #22]
 8006f6a:	8b3b      	ldrh	r3, [r7, #24]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8006f70:	8b7a      	ldrh	r2, [r7, #26]
 8006f72:	8b3b      	ldrh	r3, [r7, #24]
 8006f74:	4413      	add	r3, r2
 8006f76:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8006f78:	88fa      	ldrh	r2, [r7, #6]
 8006f7a:	8b3b      	ldrh	r3, [r7, #24]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	61fb      	str	r3, [r7, #28]
 8006f8a:	88fb      	ldrh	r3, [r7, #6]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <pbuf_copy_partial+0xda>
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1c4      	bne.n	8006f20 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8006f96:	8afb      	ldrh	r3, [r7, #22]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3720      	adds	r7, #32
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	0800f9dc 	.word	0x0800f9dc
 8006fa4:	0800fe0c 	.word	0x0800fe0c
 8006fa8:	0800fa28 	.word	0x0800fa28
 8006fac:	0800fe2c 	.word	0x0800fe2c

08006fb0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 8006fbe:	88fb      	ldrh	r3, [r7, #6]
 8006fc0:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d109      	bne.n	8006fe0 <pbuf_take+0x30>
 8006fcc:	4b3a      	ldr	r3, [pc, #232]	; (80070b8 <pbuf_take+0x108>)
 8006fce:	f240 4284 	movw	r2, #1156	; 0x484
 8006fd2:	493a      	ldr	r1, [pc, #232]	; (80070bc <pbuf_take+0x10c>)
 8006fd4:	483a      	ldr	r0, [pc, #232]	; (80070c0 <pbuf_take+0x110>)
 8006fd6:	f007 fb4b 	bl	800e670 <iprintf>
 8006fda:	f06f 030f 	mvn.w	r3, #15
 8006fde:	e066      	b.n	80070ae <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <pbuf_take+0x4a>
 8006fe6:	4b34      	ldr	r3, [pc, #208]	; (80070b8 <pbuf_take+0x108>)
 8006fe8:	f240 4285 	movw	r2, #1157	; 0x485
 8006fec:	4935      	ldr	r1, [pc, #212]	; (80070c4 <pbuf_take+0x114>)
 8006fee:	4834      	ldr	r0, [pc, #208]	; (80070c0 <pbuf_take+0x110>)
 8006ff0:	f007 fb3e 	bl	800e670 <iprintf>
 8006ff4:	f06f 030f 	mvn.w	r3, #15
 8006ff8:	e059      	b.n	80070ae <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	891b      	ldrh	r3, [r3, #8]
 8006ffe:	88fa      	ldrh	r2, [r7, #6]
 8007000:	429a      	cmp	r2, r3
 8007002:	d909      	bls.n	8007018 <pbuf_take+0x68>
 8007004:	4b2c      	ldr	r3, [pc, #176]	; (80070b8 <pbuf_take+0x108>)
 8007006:	f240 4286 	movw	r2, #1158	; 0x486
 800700a:	492f      	ldr	r1, [pc, #188]	; (80070c8 <pbuf_take+0x118>)
 800700c:	482c      	ldr	r0, [pc, #176]	; (80070c0 <pbuf_take+0x110>)
 800700e:	f007 fb2f 	bl	800e670 <iprintf>
 8007012:	f04f 33ff 	mov.w	r3, #4294967295
 8007016:	e04a      	b.n	80070ae <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d007      	beq.n	800702e <pbuf_take+0x7e>
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <pbuf_take+0x7e>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	891b      	ldrh	r3, [r3, #8]
 8007028:	88fa      	ldrh	r2, [r7, #6]
 800702a:	429a      	cmp	r2, r3
 800702c:	d902      	bls.n	8007034 <pbuf_take+0x84>
    return ERR_ARG;
 800702e:	f06f 030f 	mvn.w	r3, #15
 8007032:	e03c      	b.n	80070ae <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	e027      	b.n	800708a <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d106      	bne.n	800704e <pbuf_take+0x9e>
 8007040:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <pbuf_take+0x108>)
 8007042:	f240 428e 	movw	r2, #1166	; 0x48e
 8007046:	4921      	ldr	r1, [pc, #132]	; (80070cc <pbuf_take+0x11c>)
 8007048:	481d      	ldr	r0, [pc, #116]	; (80070c0 <pbuf_take+0x110>)
 800704a:	f007 fb11 	bl	800e670 <iprintf>
    buf_copy_len = total_copy_len;
 800704e:	8b3b      	ldrh	r3, [r7, #24]
 8007050:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	895b      	ldrh	r3, [r3, #10]
 8007056:	8b7a      	ldrh	r2, [r7, #26]
 8007058:	429a      	cmp	r2, r3
 800705a:	d902      	bls.n	8007062 <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	895b      	ldrh	r3, [r3, #10]
 8007060:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	6858      	ldr	r0, [r3, #4]
 8007066:	8afb      	ldrh	r3, [r7, #22]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	4413      	add	r3, r2
 800706c:	8b7a      	ldrh	r2, [r7, #26]
 800706e:	4619      	mov	r1, r3
 8007070:	f007 faeb 	bl	800e64a <memcpy>
    total_copy_len -= buf_copy_len;
 8007074:	8b3a      	ldrh	r2, [r7, #24]
 8007076:	8b7b      	ldrh	r3, [r7, #26]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 800707c:	8afa      	ldrh	r2, [r7, #22]
 800707e:	8b7b      	ldrh	r3, [r7, #26]
 8007080:	4413      	add	r3, r2
 8007082:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	8b3b      	ldrh	r3, [r7, #24]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1d4      	bne.n	800703a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8007090:	8b3b      	ldrh	r3, [r7, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d103      	bne.n	800709e <pbuf_take+0xee>
 8007096:	8afa      	ldrh	r2, [r7, #22]
 8007098:	88fb      	ldrh	r3, [r7, #6]
 800709a:	429a      	cmp	r2, r3
 800709c:	d006      	beq.n	80070ac <pbuf_take+0xfc>
 800709e:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <pbuf_take+0x108>)
 80070a0:	f240 4299 	movw	r2, #1177	; 0x499
 80070a4:	490a      	ldr	r1, [pc, #40]	; (80070d0 <pbuf_take+0x120>)
 80070a6:	4806      	ldr	r0, [pc, #24]	; (80070c0 <pbuf_take+0x110>)
 80070a8:	f007 fae2 	bl	800e670 <iprintf>
  return ERR_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3720      	adds	r7, #32
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	0800f9dc 	.word	0x0800f9dc
 80070bc:	0800fe50 	.word	0x0800fe50
 80070c0:	0800fa28 	.word	0x0800fa28
 80070c4:	0800fe68 	.word	0x0800fe68
 80070c8:	0800fe84 	.word	0x0800fe84
 80070cc:	0800fea4 	.word	0x0800fea4
 80070d0:	0800febc 	.word	0x0800febc

080070d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80070d8:	bf00      	nop
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
	...

080070e4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80070e8:	f000 fdf0 	bl	8007ccc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80070ec:	4b07      	ldr	r3, [pc, #28]	; (800710c <tcp_tmr+0x28>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	3301      	adds	r3, #1
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	4b05      	ldr	r3, [pc, #20]	; (800710c <tcp_tmr+0x28>)
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <tcp_tmr+0x28>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007104:	f000 fb22 	bl	800774c <tcp_slowtmr>
  }
}
 8007108:	bf00      	nop
 800710a:	bd80      	pop	{r7, pc}
 800710c:	200004d5 	.word	0x200004d5

08007110 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	e00a      	b.n	8007136 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d102      	bne.n	8007130 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1f1      	bne.n	8007120 <tcp_remove_listener+0x10>
      }
   }
}
 800713c:	bf00      	nop
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d105      	bne.n	8007162 <tcp_listen_closed+0x1a>
 8007156:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <tcp_listen_closed+0x5c>)
 8007158:	22c0      	movs	r2, #192	; 0xc0
 800715a:	4913      	ldr	r1, [pc, #76]	; (80071a8 <tcp_listen_closed+0x60>)
 800715c:	4813      	ldr	r0, [pc, #76]	; (80071ac <tcp_listen_closed+0x64>)
 800715e:	f007 fa87 	bl	800e670 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	7d1b      	ldrb	r3, [r3, #20]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d005      	beq.n	8007176 <tcp_listen_closed+0x2e>
 800716a:	4b0e      	ldr	r3, [pc, #56]	; (80071a4 <tcp_listen_closed+0x5c>)
 800716c:	22c1      	movs	r2, #193	; 0xc1
 800716e:	4910      	ldr	r1, [pc, #64]	; (80071b0 <tcp_listen_closed+0x68>)
 8007170:	480e      	ldr	r0, [pc, #56]	; (80071ac <tcp_listen_closed+0x64>)
 8007172:	f007 fa7d 	bl	800e670 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007176:	2301      	movs	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	e00b      	b.n	8007194 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800717c:	4a0d      	ldr	r2, [pc, #52]	; (80071b4 <tcp_listen_closed+0x6c>)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff ffc1 	bl	8007110 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2b03      	cmp	r3, #3
 8007198:	d9f0      	bls.n	800717c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800719a:	bf00      	nop
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	0800ff60 	.word	0x0800ff60
 80071a8:	0800ff90 	.word	0x0800ff90
 80071ac:	0800ff9c 	.word	0x0800ff9c
 80071b0:	0800ffc4 	.word	0x0800ffc4
 80071b4:	080113b0 	.word	0x080113b0

080071b8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80071b8:	b5b0      	push	{r4, r5, r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af02      	add	r7, sp, #8
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d075      	beq.n	80072b6 <tcp_close_shutdown+0xfe>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	7d1b      	ldrb	r3, [r3, #20]
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d003      	beq.n	80071da <tcp_close_shutdown+0x22>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7d1b      	ldrb	r3, [r3, #20]
 80071d6:	2b07      	cmp	r3, #7
 80071d8:	d16d      	bne.n	80072b6 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <tcp_close_shutdown+0x34>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80071ea:	d064      	beq.n	80072b6 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	7e9b      	ldrb	r3, [r3, #26]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <tcp_close_shutdown+0x4e>
 80071f8:	4b59      	ldr	r3, [pc, #356]	; (8007360 <tcp_close_shutdown+0x1a8>)
 80071fa:	f240 120f 	movw	r2, #271	; 0x10f
 80071fe:	4959      	ldr	r1, [pc, #356]	; (8007364 <tcp_close_shutdown+0x1ac>)
 8007200:	4859      	ldr	r0, [pc, #356]	; (8007368 <tcp_close_shutdown+0x1b0>)
 8007202:	f007 fa35 	bl	800e670 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800720e:	687c      	ldr	r4, [r7, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	1d1d      	adds	r5, r3, #4
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	8adb      	ldrh	r3, [r3, #22]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	8b12      	ldrh	r2, [r2, #24]
 800721c:	9201      	str	r2, [sp, #4]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	462b      	mov	r3, r5
 8007222:	4622      	mov	r2, r4
 8007224:	f004 f862 	bl	800b2ec <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 ffc5 	bl	80081b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800722e:	4b4f      	ldr	r3, [pc, #316]	; (800736c <tcp_close_shutdown+0x1b4>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	429a      	cmp	r2, r3
 8007236:	d105      	bne.n	8007244 <tcp_close_shutdown+0x8c>
 8007238:	4b4c      	ldr	r3, [pc, #304]	; (800736c <tcp_close_shutdown+0x1b4>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	4a4b      	ldr	r2, [pc, #300]	; (800736c <tcp_close_shutdown+0x1b4>)
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e013      	b.n	800726c <tcp_close_shutdown+0xb4>
 8007244:	4b49      	ldr	r3, [pc, #292]	; (800736c <tcp_close_shutdown+0x1b4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	e00c      	b.n	8007266 <tcp_close_shutdown+0xae>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d104      	bne.n	8007260 <tcp_close_shutdown+0xa8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	60da      	str	r2, [r3, #12]
 800725e:	e005      	b.n	800726c <tcp_close_shutdown+0xb4>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1ef      	bne.n	800724c <tcp_close_shutdown+0x94>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	60da      	str	r2, [r3, #12]
 8007272:	4b3f      	ldr	r3, [pc, #252]	; (8007370 <tcp_close_shutdown+0x1b8>)
 8007274:	2201      	movs	r2, #1
 8007276:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7d1b      	ldrb	r3, [r3, #20]
 800727c:	2b04      	cmp	r3, #4
 800727e:	d10c      	bne.n	800729a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	220a      	movs	r2, #10
 8007284:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007286:	4b3b      	ldr	r3, [pc, #236]	; (8007374 <tcp_close_shutdown+0x1bc>)
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	60da      	str	r2, [r3, #12]
 800728e:	4a39      	ldr	r2, [pc, #228]	; (8007374 <tcp_close_shutdown+0x1bc>)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	f004 fa7c 	bl	800b790 <tcp_timer_needed>
 8007298:	e00b      	b.n	80072b2 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800729a:	4b37      	ldr	r3, [pc, #220]	; (8007378 <tcp_close_shutdown+0x1c0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d102      	bne.n	80072aa <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80072a4:	f003 faec 	bl	800a880 <tcp_trigger_input_pcb_close>
 80072a8:	e003      	b.n	80072b2 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	2001      	movs	r0, #1
 80072ae:	f7fe fedb 	bl	8006068 <memp_free>
        }
      }
      return ERR_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	e050      	b.n	8007358 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	7d1b      	ldrb	r3, [r3, #20]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d02e      	beq.n	800731c <tcp_close_shutdown+0x164>
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d038      	beq.n	8007334 <tcp_close_shutdown+0x17c>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d142      	bne.n	800734c <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	8adb      	ldrh	r3, [r3, #22]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d021      	beq.n	8007312 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80072ce:	4b2b      	ldr	r3, [pc, #172]	; (800737c <tcp_close_shutdown+0x1c4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d105      	bne.n	80072e4 <tcp_close_shutdown+0x12c>
 80072d8:	4b28      	ldr	r3, [pc, #160]	; (800737c <tcp_close_shutdown+0x1c4>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	4a27      	ldr	r2, [pc, #156]	; (800737c <tcp_close_shutdown+0x1c4>)
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	e013      	b.n	800730c <tcp_close_shutdown+0x154>
 80072e4:	4b25      	ldr	r3, [pc, #148]	; (800737c <tcp_close_shutdown+0x1c4>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60bb      	str	r3, [r7, #8]
 80072ea:	e00c      	b.n	8007306 <tcp_close_shutdown+0x14e>
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d104      	bne.n	8007300 <tcp_close_shutdown+0x148>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	60da      	str	r2, [r3, #12]
 80072fe:	e005      	b.n	800730c <tcp_close_shutdown+0x154>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1ef      	bne.n	80072ec <tcp_close_shutdown+0x134>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	2001      	movs	r0, #1
 8007316:	f7fe fea7 	bl	8006068 <memp_free>
    break;
 800731a:	e01c      	b.n	8007356 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff ff13 	bl	8007148 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	4816      	ldr	r0, [pc, #88]	; (8007380 <tcp_close_shutdown+0x1c8>)
 8007326:	f000 ff89 	bl	800823c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	2002      	movs	r0, #2
 800732e:	f7fe fe9b 	bl	8006068 <memp_free>
    break;
 8007332:	e010      	b.n	8007356 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	480d      	ldr	r0, [pc, #52]	; (800736c <tcp_close_shutdown+0x1b4>)
 8007338:	f000 ff80 	bl	800823c <tcp_pcb_remove>
 800733c:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <tcp_close_shutdown+0x1b8>)
 800733e:	2201      	movs	r2, #1
 8007340:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	2001      	movs	r0, #1
 8007346:	f7fe fe8f 	bl	8006068 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800734a:	e004      	b.n	8007356 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f819 	bl	8007384 <tcp_close_shutdown_fin>
 8007352:	4603      	mov	r3, r0
 8007354:	e000      	b.n	8007358 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bdb0      	pop	{r4, r5, r7, pc}
 8007360:	0800ff60 	.word	0x0800ff60
 8007364:	0800ffdc 	.word	0x0800ffdc
 8007368:	0800ff9c 	.word	0x0800ff9c
 800736c:	20007b90 	.word	0x20007b90
 8007370:	20007b8c 	.word	0x20007b8c
 8007374:	20007ba0 	.word	0x20007ba0
 8007378:	20007ba4 	.word	0x20007ba4
 800737c:	20007b9c 	.word	0x20007b9c
 8007380:	20007b98 	.word	0x20007b98

08007384 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <tcp_close_shutdown_fin+0x1c>
 8007392:	4b2c      	ldr	r3, [pc, #176]	; (8007444 <tcp_close_shutdown_fin+0xc0>)
 8007394:	f240 124d 	movw	r2, #333	; 0x14d
 8007398:	492b      	ldr	r1, [pc, #172]	; (8007448 <tcp_close_shutdown_fin+0xc4>)
 800739a:	482c      	ldr	r0, [pc, #176]	; (800744c <tcp_close_shutdown_fin+0xc8>)
 800739c:	f007 f968 	bl	800e670 <iprintf>

  switch (pcb->state) {
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	7d1b      	ldrb	r3, [r3, #20]
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d010      	beq.n	80073ca <tcp_close_shutdown_fin+0x46>
 80073a8:	2b07      	cmp	r3, #7
 80073aa:	d01b      	beq.n	80073e4 <tcp_close_shutdown_fin+0x60>
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d126      	bne.n	80073fe <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f003 faf1 	bl	800a998 <tcp_send_fin>
 80073b6:	4603      	mov	r3, r0
 80073b8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80073ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d11f      	bne.n	8007402 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2205      	movs	r2, #5
 80073c6:	751a      	strb	r2, [r3, #20]
    }
    break;
 80073c8:	e01b      	b.n	8007402 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f003 fae4 	bl	800a998 <tcp_send_fin>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80073d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d114      	bne.n	8007406 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2205      	movs	r2, #5
 80073e0:	751a      	strb	r2, [r3, #20]
    }
    break;
 80073e2:	e010      	b.n	8007406 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f003 fad7 	bl	800a998 <tcp_send_fin>
 80073ea:	4603      	mov	r3, r0
 80073ec:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80073ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2209      	movs	r2, #9
 80073fa:	751a      	strb	r2, [r3, #20]
    }
    break;
 80073fc:	e005      	b.n	800740a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	e01c      	b.n	800743c <tcp_close_shutdown_fin+0xb8>
    break;
 8007402:	bf00      	nop
 8007404:	e002      	b.n	800740c <tcp_close_shutdown_fin+0x88>
    break;
 8007406:	bf00      	nop
 8007408:	e000      	b.n	800740c <tcp_close_shutdown_fin+0x88>
    break;
 800740a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800740c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d103      	bne.n	800741c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f003 fcdf 	bl	800add8 <tcp_output>
 800741a:	e00d      	b.n	8007438 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800741c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007424:	d108      	bne.n	8007438 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	7e9b      	ldrb	r3, [r3, #26]
 800742a:	f043 0308 	orr.w	r3, r3, #8
 800742e:	b2da      	uxtb	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	e001      	b.n	800743c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8007438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	0800ff60 	.word	0x0800ff60
 8007448:	0800ff90 	.word	0x0800ff90
 800744c:	0800ff9c 	.word	0x0800ff9c

08007450 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	7d1b      	ldrb	r3, [r3, #20]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d006      	beq.n	800746e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	7e9b      	ldrb	r3, [r3, #26]
 8007464:	f043 0310 	orr.w	r3, r3, #16
 8007468:	b2da      	uxtb	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800746e:	2101      	movs	r1, #1
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff fea1 	bl	80071b8 <tcp_close_shutdown>
 8007476:	4603      	mov	r3, r0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08c      	sub	sp, #48	; 0x30
 8007484:	af02      	add	r7, sp, #8
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	7d1b      	ldrb	r3, [r3, #20]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d106      	bne.n	80074a0 <tcp_abandon+0x20>
 8007492:	4b4d      	ldr	r3, [pc, #308]	; (80075c8 <tcp_abandon+0x148>)
 8007494:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007498:	494c      	ldr	r1, [pc, #304]	; (80075cc <tcp_abandon+0x14c>)
 800749a:	484d      	ldr	r0, [pc, #308]	; (80075d0 <tcp_abandon+0x150>)
 800749c:	f007 f8e8 	bl	800e670 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	7d1b      	ldrb	r3, [r3, #20]
 80074a4:	2b0a      	cmp	r3, #10
 80074a6:	d108      	bne.n	80074ba <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	484a      	ldr	r0, [pc, #296]	; (80075d4 <tcp_abandon+0x154>)
 80074ac:	f000 fec6 	bl	800823c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	2001      	movs	r0, #1
 80074b4:	f7fe fdd8 	bl	8006068 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80074b8:	e081      	b.n	80075be <tcp_abandon+0x13e>
    int send_rst = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80074be:	2300      	movs	r3, #0
 80074c0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074d4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	7d1b      	ldrb	r3, [r3, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d126      	bne.n	8007532 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8adb      	ldrh	r3, [r3, #22]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d02e      	beq.n	800754a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80074ec:	4b3a      	ldr	r3, [pc, #232]	; (80075d8 <tcp_abandon+0x158>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d105      	bne.n	8007502 <tcp_abandon+0x82>
 80074f6:	4b38      	ldr	r3, [pc, #224]	; (80075d8 <tcp_abandon+0x158>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	4a36      	ldr	r2, [pc, #216]	; (80075d8 <tcp_abandon+0x158>)
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	e013      	b.n	800752a <tcp_abandon+0xaa>
 8007502:	4b35      	ldr	r3, [pc, #212]	; (80075d8 <tcp_abandon+0x158>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	e00c      	b.n	8007524 <tcp_abandon+0xa4>
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	d104      	bne.n	800751e <tcp_abandon+0x9e>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	60da      	str	r2, [r3, #12]
 800751c:	e005      	b.n	800752a <tcp_abandon+0xaa>
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1ef      	bne.n	800750a <tcp_abandon+0x8a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	60da      	str	r2, [r3, #12]
 8007530:	e00b      	b.n	800754a <tcp_abandon+0xca>
      send_rst = reset;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	8adb      	ldrh	r3, [r3, #22]
 800753a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800753c:	6879      	ldr	r1, [r7, #4]
 800753e:	4827      	ldr	r0, [pc, #156]	; (80075dc <tcp_abandon+0x15c>)
 8007540:	f000 fe7c 	bl	800823c <tcp_pcb_remove>
 8007544:	4b26      	ldr	r3, [pc, #152]	; (80075e0 <tcp_abandon+0x160>)
 8007546:	2201      	movs	r2, #1
 8007548:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fc85 	bl	8007e66 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007560:	2b00      	cmp	r3, #0
 8007562:	d004      	beq.n	800756e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fc7c 	bl	8007e66 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fc73 	bl	8007e66 <tcp_segs_free>
    if (send_rst) {
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00c      	beq.n	80075a0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	1d19      	adds	r1, r3, #4
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8b1b      	ldrh	r3, [r3, #24]
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	460b      	mov	r3, r1
 8007598:	6979      	ldr	r1, [r7, #20]
 800759a:	69b8      	ldr	r0, [r7, #24]
 800759c:	f003 fea6 	bl	800b2ec <tcp_rst>
    last_state = pcb->state;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	7d1b      	ldrb	r3, [r3, #20]
 80075a4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	2001      	movs	r0, #1
 80075aa:	f7fe fd5d 	bl	8006068 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d004      	beq.n	80075be <tcp_abandon+0x13e>
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f06f 010c 	mvn.w	r1, #12
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	4798      	blx	r3
}
 80075be:	bf00      	nop
 80075c0:	3728      	adds	r7, #40	; 0x28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	0800ff60 	.word	0x0800ff60
 80075cc:	0800fff8 	.word	0x0800fff8
 80075d0:	0800ff9c 	.word	0x0800ff9c
 80075d4:	20007ba0 	.word	0x20007ba0
 80075d8:	20007b9c 	.word	0x20007b9c
 80075dc:	20007b90 	.word	0x20007b90
 80075e0:	20007b8c 	.word	0x20007b8c

080075e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80075ec:	2101      	movs	r1, #1
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff ff46 	bl	8007480 <tcp_abandon>
}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800760c:	4413      	add	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007618:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800761c:	bf28      	it	cs
 800761e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007622:	b292      	uxth	r2, r2
 8007624:	4413      	add	r3, r2
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	db08      	blt.n	8007640 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	e020      	b.n	8007682 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	dd03      	ble.n	8007656 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007654:	e014      	b.n	8007680 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007668:	d306      	bcc.n	8007678 <tcp_update_rcv_ann_wnd+0x7c>
 800766a:	4b08      	ldr	r3, [pc, #32]	; (800768c <tcp_update_rcv_ann_wnd+0x90>)
 800766c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8007670:	4907      	ldr	r1, [pc, #28]	; (8007690 <tcp_update_rcv_ann_wnd+0x94>)
 8007672:	4808      	ldr	r0, [pc, #32]	; (8007694 <tcp_update_rcv_ann_wnd+0x98>)
 8007674:	f006 fffc 	bl	800e670 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	b29a      	uxth	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007680:	2300      	movs	r3, #0
  }
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	0800ff60 	.word	0x0800ff60
 8007690:	08010078 	.word	0x08010078
 8007694:	0800ff9c 	.word	0x0800ff9c

08007698 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	7d1b      	ldrb	r3, [r3, #20]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d106      	bne.n	80076ba <tcp_recved+0x22>
 80076ac:	4b23      	ldr	r3, [pc, #140]	; (800773c <tcp_recved+0xa4>)
 80076ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 80076b2:	4923      	ldr	r1, [pc, #140]	; (8007740 <tcp_recved+0xa8>)
 80076b4:	4823      	ldr	r0, [pc, #140]	; (8007744 <tcp_recved+0xac>)
 80076b6:	f006 ffdb 	bl	800e670 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80076be:	887b      	ldrh	r3, [r7, #2]
 80076c0:	4413      	add	r3, r2
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076cc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80076d0:	d904      	bls.n	80076dc <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80076d8:	851a      	strh	r2, [r3, #40]	; 0x28
 80076da:	e017      	b.n	800770c <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d113      	bne.n	800770c <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	7d1b      	ldrb	r3, [r3, #20]
 80076e8:	2b07      	cmp	r3, #7
 80076ea:	d003      	beq.n	80076f4 <tcp_recved+0x5c>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	7d1b      	ldrb	r3, [r3, #20]
 80076f0:	2b09      	cmp	r3, #9
 80076f2:	d104      	bne.n	80076fe <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80076fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80076fc:	e006      	b.n	800770c <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <tcp_recved+0xa4>)
 8007700:	f240 322d 	movw	r2, #813	; 0x32d
 8007704:	4910      	ldr	r1, [pc, #64]	; (8007748 <tcp_recved+0xb0>)
 8007706:	480f      	ldr	r0, [pc, #60]	; (8007744 <tcp_recved+0xac>)
 8007708:	f006 ffb2 	bl	800e670 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff ff75 	bl	80075fc <tcp_update_rcv_ann_wnd>
 8007712:	4603      	mov	r3, r0
 8007714:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800771c:	db09      	blt.n	8007732 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	7e9b      	ldrb	r3, [r3, #26]
 8007722:	f043 0302 	orr.w	r3, r3, #2
 8007726:	b2da      	uxtb	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f003 fb53 	bl	800add8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007732:	bf00      	nop
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	0800ff60 	.word	0x0800ff60
 8007740:	08010094 	.word	0x08010094
 8007744:	0800ff9c 	.word	0x0800ff9c
 8007748:	080100bc 	.word	0x080100bc

0800774c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800774c:	b5b0      	push	{r4, r5, r7, lr}
 800774e:	b08c      	sub	sp, #48	; 0x30
 8007750:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8007756:	4b96      	ldr	r3, [pc, #600]	; (80079b0 <tcp_slowtmr+0x264>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3301      	adds	r3, #1
 800775c:	4a94      	ldr	r2, [pc, #592]	; (80079b0 <tcp_slowtmr+0x264>)
 800775e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007760:	4b94      	ldr	r3, [pc, #592]	; (80079b4 <tcp_slowtmr+0x268>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	b2da      	uxtb	r2, r3
 8007768:	4b92      	ldr	r3, [pc, #584]	; (80079b4 <tcp_slowtmr+0x268>)
 800776a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800776c:	2300      	movs	r3, #0
 800776e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8007770:	4b91      	ldr	r3, [pc, #580]	; (80079b8 <tcp_slowtmr+0x26c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007776:	e227      	b.n	8007bc8 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	7d1b      	ldrb	r3, [r3, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d106      	bne.n	800778e <tcp_slowtmr+0x42>
 8007780:	4b8e      	ldr	r3, [pc, #568]	; (80079bc <tcp_slowtmr+0x270>)
 8007782:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8007786:	498e      	ldr	r1, [pc, #568]	; (80079c0 <tcp_slowtmr+0x274>)
 8007788:	488e      	ldr	r0, [pc, #568]	; (80079c4 <tcp_slowtmr+0x278>)
 800778a:	f006 ff71 	bl	800e670 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	7d1b      	ldrb	r3, [r3, #20]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d106      	bne.n	80077a4 <tcp_slowtmr+0x58>
 8007796:	4b89      	ldr	r3, [pc, #548]	; (80079bc <tcp_slowtmr+0x270>)
 8007798:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800779c:	498a      	ldr	r1, [pc, #552]	; (80079c8 <tcp_slowtmr+0x27c>)
 800779e:	4889      	ldr	r0, [pc, #548]	; (80079c4 <tcp_slowtmr+0x278>)
 80077a0:	f006 ff66 	bl	800e670 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	7d1b      	ldrb	r3, [r3, #20]
 80077a8:	2b0a      	cmp	r3, #10
 80077aa:	d106      	bne.n	80077ba <tcp_slowtmr+0x6e>
 80077ac:	4b83      	ldr	r3, [pc, #524]	; (80079bc <tcp_slowtmr+0x270>)
 80077ae:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80077b2:	4986      	ldr	r1, [pc, #536]	; (80079cc <tcp_slowtmr+0x280>)
 80077b4:	4883      	ldr	r0, [pc, #524]	; (80079c4 <tcp_slowtmr+0x278>)
 80077b6:	f006 ff5b 	bl	800e670 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	7f5a      	ldrb	r2, [r3, #29]
 80077be:	4b7d      	ldr	r3, [pc, #500]	; (80079b4 <tcp_slowtmr+0x268>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d103      	bne.n	80077ce <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80077cc:	e1fc      	b.n	8007bc8 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80077ce:	4b79      	ldr	r3, [pc, #484]	; (80079b4 <tcp_slowtmr+0x268>)
 80077d0:	781a      	ldrb	r2, [r3, #0]
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	7d1b      	ldrb	r3, [r3, #20]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d108      	bne.n	80077f8 <tcp_slowtmr+0xac>
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ec:	2b05      	cmp	r3, #5
 80077ee:	d903      	bls.n	80077f8 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80077f0:	7ffb      	ldrb	r3, [r7, #31]
 80077f2:	3301      	adds	r3, #1
 80077f4:	77fb      	strb	r3, [r7, #31]
 80077f6:	e0a2      	b.n	800793e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077fe:	2b0b      	cmp	r3, #11
 8007800:	d903      	bls.n	800780a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007802:	7ffb      	ldrb	r3, [r7, #31]
 8007804:	3301      	adds	r3, #1
 8007806:	77fb      	strb	r3, [r7, #31]
 8007808:	e099      	b.n	800793e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007810:	2b00      	cmp	r3, #0
 8007812:	d032      	beq.n	800787a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800781a:	3b01      	subs	r3, #1
 800781c:	4a6c      	ldr	r2, [pc, #432]	; (80079d0 <tcp_slowtmr+0x284>)
 800781e:	5cd3      	ldrb	r3, [r2, r3]
 8007820:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8007828:	7cfa      	ldrb	r2, [r7, #19]
 800782a:	429a      	cmp	r2, r3
 800782c:	d907      	bls.n	800783e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8007834:	3301      	adds	r3, #1
 8007836:	b2da      	uxtb	r2, r3
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8007844:	7cfa      	ldrb	r2, [r7, #19]
 8007846:	429a      	cmp	r2, r3
 8007848:	d879      	bhi.n	800793e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800784a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800784c:	f003 fee0 	bl	800b610 <tcp_zero_window_probe>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d173      	bne.n	800793e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007864:	2b06      	cmp	r3, #6
 8007866:	d86a      	bhi.n	800793e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800786e:	3301      	adds	r3, #1
 8007870:	b2da      	uxtb	r2, r3
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8007878:	e061      	b.n	800793e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007880:	2b00      	cmp	r3, #0
 8007882:	db08      	blt.n	8007896 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800788a:	b29b      	uxth	r3, r3
 800788c:	3301      	adds	r3, #1
 800788e:	b29b      	uxth	r3, r3
 8007890:	b21a      	sxth	r2, r3
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d04f      	beq.n	800793e <tcp_slowtmr+0x1f2>
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80078aa:	429a      	cmp	r2, r3
 80078ac:	db47      	blt.n	800793e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	7d1b      	ldrb	r3, [r3, #20]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d018      	beq.n	80078e8 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078bc:	2b0c      	cmp	r3, #12
 80078be:	bf28      	it	cs
 80078c0:	230c      	movcs	r3, #12
 80078c2:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80078ca:	10db      	asrs	r3, r3, #3
 80078cc:	b21b      	sxth	r3, r3
 80078ce:	461a      	mov	r2, r3
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80078d6:	4413      	add	r3, r2
 80078d8:	7dfa      	ldrb	r2, [r7, #23]
 80078da:	493e      	ldr	r1, [pc, #248]	; (80079d4 <tcp_slowtmr+0x288>)
 80078dc:	5c8a      	ldrb	r2, [r1, r2]
 80078de:	4093      	lsls	r3, r2
 80078e0:	b21a      	sxth	r2, r3
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	2200      	movs	r2, #0
 80078ec:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80078fa:	4293      	cmp	r3, r2
 80078fc:	bf28      	it	cs
 80078fe:	4613      	movcs	r3, r2
 8007900:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8007902:	8abb      	ldrh	r3, [r7, #20]
 8007904:	085b      	lsrs	r3, r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	b29b      	uxth	r3, r3
 800791c:	429a      	cmp	r2, r3
 800791e:	d206      	bcs.n	800792e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	b29a      	uxth	r2, r3
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8007938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800793a:	f003 fd4d 	bl	800b3d8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	7d1b      	ldrb	r3, [r3, #20]
 8007942:	2b06      	cmp	r3, #6
 8007944:	d10f      	bne.n	8007966 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	7e9b      	ldrb	r3, [r3, #26]
 800794a:	f003 0310 	and.w	r3, r3, #16
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007952:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <tcp_slowtmr+0x264>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b28      	cmp	r3, #40	; 0x28
 800795e:	d902      	bls.n	8007966 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007960:	7ffb      	ldrb	r3, [r7, #31]
 8007962:	3301      	adds	r3, #1
 8007964:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	7a1b      	ldrb	r3, [r3, #8]
 800796a:	f003 0308 	and.w	r3, r3, #8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d05d      	beq.n	8007a2e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007976:	2b04      	cmp	r3, #4
 8007978:	d003      	beq.n	8007982 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800797e:	2b07      	cmp	r3, #7
 8007980:	d155      	bne.n	8007a2e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007982:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <tcp_slowtmr+0x264>)
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8007992:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <tcp_slowtmr+0x28c>)
 8007994:	440b      	add	r3, r1
 8007996:	4911      	ldr	r1, [pc, #68]	; (80079dc <tcp_slowtmr+0x290>)
 8007998:	fba1 1303 	umull	r1, r3, r1, r3
 800799c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800799e:	429a      	cmp	r2, r3
 80079a0:	d91e      	bls.n	80079e0 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80079a2:	7ffb      	ldrb	r3, [r7, #31]
 80079a4:	3301      	adds	r3, #1
 80079a6:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 80079a8:	7fbb      	ldrb	r3, [r7, #30]
 80079aa:	3301      	adds	r3, #1
 80079ac:	77bb      	strb	r3, [r7, #30]
 80079ae:	e03e      	b.n	8007a2e <tcp_slowtmr+0x2e2>
 80079b0:	20007b94 	.word	0x20007b94
 80079b4:	200004d6 	.word	0x200004d6
 80079b8:	20007b90 	.word	0x20007b90
 80079bc:	0800ff60 	.word	0x0800ff60
 80079c0:	08010110 	.word	0x08010110
 80079c4:	0800ff9c 	.word	0x0800ff9c
 80079c8:	0801013c 	.word	0x0801013c
 80079cc:	08010168 	.word	0x08010168
 80079d0:	080113a8 	.word	0x080113a8
 80079d4:	08011398 	.word	0x08011398
 80079d8:	000a4cb8 	.word	0x000a4cb8
 80079dc:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079e0:	4b97      	ldr	r3, [pc, #604]	; (8007c40 <tcp_slowtmr+0x4f4>)
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80079f6:	4618      	mov	r0, r3
 80079f8:	4b92      	ldr	r3, [pc, #584]	; (8007c44 <tcp_slowtmr+0x4f8>)
 80079fa:	fb03 f300 	mul.w	r3, r3, r0
 80079fe:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8007a00:	4991      	ldr	r1, [pc, #580]	; (8007c48 <tcp_slowtmr+0x4fc>)
 8007a02:	fba1 1303 	umull	r1, r3, r1, r3
 8007a06:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d910      	bls.n	8007a2e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8007a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a0e:	f003 fdc2 	bl	800b596 <tcp_keepalive>
 8007a12:	4603      	mov	r3, r0
 8007a14:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8007a16:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d107      	bne.n	8007a2e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007a24:	3301      	adds	r3, #1
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d016      	beq.n	8007a64 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8007a36:	4b82      	ldr	r3, [pc, #520]	; (8007c40 <tcp_slowtmr+0x4f4>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	1ad2      	subs	r2, r2, r3
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007a46:	4619      	mov	r1, r3
 8007a48:	460b      	mov	r3, r1
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	440b      	add	r3, r1
 8007a4e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d307      	bcc.n	8007a64 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fa04 	bl	8007e66 <tcp_segs_free>
      pcb->ooseq = NULL;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	2200      	movs	r2, #0
 8007a62:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	7d1b      	ldrb	r3, [r3, #20]
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d109      	bne.n	8007a80 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007a6c:	4b74      	ldr	r3, [pc, #464]	; (8007c40 <tcp_slowtmr+0x4f4>)
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b28      	cmp	r3, #40	; 0x28
 8007a78:	d902      	bls.n	8007a80 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007a7a:	7ffb      	ldrb	r3, [r7, #31]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	7d1b      	ldrb	r3, [r3, #20]
 8007a84:	2b09      	cmp	r3, #9
 8007a86:	d109      	bne.n	8007a9c <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007a88:	4b6d      	ldr	r3, [pc, #436]	; (8007c40 <tcp_slowtmr+0x4f4>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	2bf0      	cmp	r3, #240	; 0xf0
 8007a94:	d902      	bls.n	8007a9c <tcp_slowtmr+0x350>
        ++pcb_remove;
 8007a96:	7ffb      	ldrb	r3, [r7, #31]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007a9c:	7ffb      	ldrb	r3, [r7, #31]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d05d      	beq.n	8007b5e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007aaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007aac:	f000 fb84 	bl	80081b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d010      	beq.n	8007ad8 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007ab6:	4b65      	ldr	r3, [pc, #404]	; (8007c4c <tcp_slowtmr+0x500>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d106      	bne.n	8007ace <tcp_slowtmr+0x382>
 8007ac0:	4b63      	ldr	r3, [pc, #396]	; (8007c50 <tcp_slowtmr+0x504>)
 8007ac2:	f240 4289 	movw	r2, #1161	; 0x489
 8007ac6:	4963      	ldr	r1, [pc, #396]	; (8007c54 <tcp_slowtmr+0x508>)
 8007ac8:	4863      	ldr	r0, [pc, #396]	; (8007c58 <tcp_slowtmr+0x50c>)
 8007aca:	f006 fdd1 	bl	800e670 <iprintf>
        prev->next = pcb->next;
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	60da      	str	r2, [r3, #12]
 8007ad6:	e00f      	b.n	8007af8 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007ad8:	4b5c      	ldr	r3, [pc, #368]	; (8007c4c <tcp_slowtmr+0x500>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d006      	beq.n	8007af0 <tcp_slowtmr+0x3a4>
 8007ae2:	4b5b      	ldr	r3, [pc, #364]	; (8007c50 <tcp_slowtmr+0x504>)
 8007ae4:	f240 428d 	movw	r2, #1165	; 0x48d
 8007ae8:	495c      	ldr	r1, [pc, #368]	; (8007c5c <tcp_slowtmr+0x510>)
 8007aea:	485b      	ldr	r0, [pc, #364]	; (8007c58 <tcp_slowtmr+0x50c>)
 8007aec:	f006 fdc0 	bl	800e670 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	4a55      	ldr	r2, [pc, #340]	; (8007c4c <tcp_slowtmr+0x500>)
 8007af6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007af8:	7fbb      	ldrb	r3, [r7, #30]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d010      	beq.n	8007b20 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007b06:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	1d1d      	adds	r5, r3, #4
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	8adb      	ldrh	r3, [r3, #22]
 8007b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b12:	8b12      	ldrh	r2, [r2, #24]
 8007b14:	9201      	str	r2, [sp, #4]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	462b      	mov	r3, r5
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	f003 fbe6 	bl	800b2ec <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	7d1b      	ldrb	r3, [r3, #20]
 8007b2a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	2001      	movs	r0, #1
 8007b3a:	f7fe fa95 	bl	8006068 <memp_free>

      tcp_active_pcbs_changed = 0;
 8007b3e:	4b48      	ldr	r3, [pc, #288]	; (8007c60 <tcp_slowtmr+0x514>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <tcp_slowtmr+0x408>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f06f 010c 	mvn.w	r1, #12
 8007b50:	68b8      	ldr	r0, [r7, #8]
 8007b52:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007b54:	4b42      	ldr	r3, [pc, #264]	; (8007c60 <tcp_slowtmr+0x514>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d035      	beq.n	8007bc8 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8007b5c:	e606      	b.n	800776c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	7edb      	ldrb	r3, [r3, #27]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	7eda      	ldrb	r2, [r3, #27]
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	7f1b      	ldrb	r3, [r3, #28]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d323      	bcc.n	8007bc8 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	2200      	movs	r2, #0
 8007b84:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007b86:	4b36      	ldr	r3, [pc, #216]	; (8007c60 <tcp_slowtmr+0x514>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <tcp_slowtmr+0x460>
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9c:	6a3a      	ldr	r2, [r7, #32]
 8007b9e:	6912      	ldr	r2, [r2, #16]
 8007ba0:	6a39      	ldr	r1, [r7, #32]
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	4798      	blx	r3
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	777b      	strb	r3, [r7, #29]
 8007baa:	e001      	b.n	8007bb0 <tcp_slowtmr+0x464>
 8007bac:	2300      	movs	r3, #0
 8007bae:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8007bb0:	4b2b      	ldr	r3, [pc, #172]	; (8007c60 <tcp_slowtmr+0x514>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d000      	beq.n	8007bba <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8007bb8:	e5d8      	b.n	800776c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007bba:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8007bc2:	6a38      	ldr	r0, [r7, #32]
 8007bc4:	f003 f908 	bl	800add8 <tcp_output>
  while (pcb != NULL) {
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f47f add4 	bne.w	8007778 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8007bd4:	4b23      	ldr	r3, [pc, #140]	; (8007c64 <tcp_slowtmr+0x518>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8007bda:	e068      	b.n	8007cae <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	7d1b      	ldrb	r3, [r3, #20]
 8007be0:	2b0a      	cmp	r3, #10
 8007be2:	d006      	beq.n	8007bf2 <tcp_slowtmr+0x4a6>
 8007be4:	4b1a      	ldr	r3, [pc, #104]	; (8007c50 <tcp_slowtmr+0x504>)
 8007be6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007bea:	491f      	ldr	r1, [pc, #124]	; (8007c68 <tcp_slowtmr+0x51c>)
 8007bec:	481a      	ldr	r0, [pc, #104]	; (8007c58 <tcp_slowtmr+0x50c>)
 8007bee:	f006 fd3f 	bl	800e670 <iprintf>
    pcb_remove = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007bf6:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <tcp_slowtmr+0x4f4>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2bf0      	cmp	r3, #240	; 0xf0
 8007c02:	d902      	bls.n	8007c0a <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8007c04:	7ffb      	ldrb	r3, [r7, #31]
 8007c06:	3301      	adds	r3, #1
 8007c08:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007c0a:	7ffb      	ldrb	r3, [r7, #31]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d049      	beq.n	8007ca4 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c12:	f000 fad1 	bl	80081b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d029      	beq.n	8007c70 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007c1c:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <tcp_slowtmr+0x518>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d106      	bne.n	8007c34 <tcp_slowtmr+0x4e8>
 8007c26:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <tcp_slowtmr+0x504>)
 8007c28:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8007c2c:	490f      	ldr	r1, [pc, #60]	; (8007c6c <tcp_slowtmr+0x520>)
 8007c2e:	480a      	ldr	r0, [pc, #40]	; (8007c58 <tcp_slowtmr+0x50c>)
 8007c30:	f006 fd1e 	bl	800e670 <iprintf>
        prev->next = pcb->next;
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	60da      	str	r2, [r3, #12]
 8007c3c:	e028      	b.n	8007c90 <tcp_slowtmr+0x544>
 8007c3e:	bf00      	nop
 8007c40:	20007b94 	.word	0x20007b94
 8007c44:	000124f8 	.word	0x000124f8
 8007c48:	10624dd3 	.word	0x10624dd3
 8007c4c:	20007b90 	.word	0x20007b90
 8007c50:	0800ff60 	.word	0x0800ff60
 8007c54:	08010198 	.word	0x08010198
 8007c58:	0800ff9c 	.word	0x0800ff9c
 8007c5c:	080101c4 	.word	0x080101c4
 8007c60:	20007b8c 	.word	0x20007b8c
 8007c64:	20007ba0 	.word	0x20007ba0
 8007c68:	080101f0 	.word	0x080101f0
 8007c6c:	08010220 	.word	0x08010220
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007c70:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <tcp_slowtmr+0x570>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d006      	beq.n	8007c88 <tcp_slowtmr+0x53c>
 8007c7a:	4b11      	ldr	r3, [pc, #68]	; (8007cc0 <tcp_slowtmr+0x574>)
 8007c7c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8007c80:	4910      	ldr	r1, [pc, #64]	; (8007cc4 <tcp_slowtmr+0x578>)
 8007c82:	4811      	ldr	r0, [pc, #68]	; (8007cc8 <tcp_slowtmr+0x57c>)
 8007c84:	f006 fcf4 	bl	800e670 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	4a0b      	ldr	r2, [pc, #44]	; (8007cbc <tcp_slowtmr+0x570>)
 8007c8e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8007c9a:	69b9      	ldr	r1, [r7, #24]
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	f7fe f9e3 	bl	8006068 <memp_free>
 8007ca2:	e004      	b.n	8007cae <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d193      	bne.n	8007bdc <tcp_slowtmr+0x490>
    }
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	3728      	adds	r7, #40	; 0x28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bdb0      	pop	{r4, r5, r7, pc}
 8007cbc:	20007ba0 	.word	0x20007ba0
 8007cc0:	0800ff60 	.word	0x0800ff60
 8007cc4:	08010248 	.word	0x08010248
 8007cc8:	0800ff9c 	.word	0x0800ff9c

08007ccc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007cd2:	4b2d      	ldr	r3, [pc, #180]	; (8007d88 <tcp_fasttmr+0xbc>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	4b2b      	ldr	r3, [pc, #172]	; (8007d88 <tcp_fasttmr+0xbc>)
 8007cdc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007cde:	4b2b      	ldr	r3, [pc, #172]	; (8007d8c <tcp_fasttmr+0xc0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007ce4:	e048      	b.n	8007d78 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7f5a      	ldrb	r2, [r3, #29]
 8007cea:	4b27      	ldr	r3, [pc, #156]	; (8007d88 <tcp_fasttmr+0xbc>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d03f      	beq.n	8007d72 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007cf2:	4b25      	ldr	r3, [pc, #148]	; (8007d88 <tcp_fasttmr+0xbc>)
 8007cf4:	781a      	ldrb	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	7e9b      	ldrb	r3, [r3, #26]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d010      	beq.n	8007d28 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7e9b      	ldrb	r3, [r3, #26]
 8007d0a:	f043 0302 	orr.w	r3, r3, #2
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f003 f85f 	bl	800add8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7e9b      	ldrb	r3, [r3, #26]
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	7e9b      	ldrb	r3, [r3, #26]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d009      	beq.n	8007d48 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	7e9b      	ldrb	r3, [r3, #26]
 8007d38:	f023 0308 	bic.w	r3, r3, #8
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff fb1e 	bl	8007384 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007d56:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <tcp_fasttmr+0xc4>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f819 	bl	8007d94 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007d62:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <tcp_fasttmr+0xc4>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d000      	beq.n	8007d6c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007d6a:	e7b8      	b.n	8007cde <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	607b      	str	r3, [r7, #4]
 8007d70:	e002      	b.n	8007d78 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1b3      	bne.n	8007ce6 <tcp_fasttmr+0x1a>
    }
  }
}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	200004d6 	.word	0x200004d6
 8007d8c:	20007b90 	.word	0x20007b90
 8007d90:	20007b8c 	.word	0x20007b8c

08007d94 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007d94:	b590      	push	{r4, r7, lr}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da0:	7b5b      	ldrb	r3, [r3, #13]
 8007da2:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da8:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00b      	beq.n	8007dd2 <tcp_process_refused_data+0x3e>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6918      	ldr	r0, [r3, #16]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	47a0      	blx	r4
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73fb      	strb	r3, [r7, #15]
 8007dd0:	e007      	b.n	8007de2 <tcp_process_refused_data+0x4e>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	2000      	movs	r0, #0
 8007dda:	f000 f88c 	bl	8007ef6 <tcp_recv_null>
 8007dde:	4603      	mov	r3, r0
 8007de0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d12a      	bne.n	8007e40 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	f003 0320 	and.w	r3, r3, #32
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d033      	beq.n	8007e5c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007dfc:	d005      	beq.n	8007e0a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e02:	3301      	adds	r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <tcp_process_refused_data+0x98>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6918      	ldr	r0, [r3, #16]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2200      	movs	r2, #0
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	47a0      	blx	r4
 8007e26:	4603      	mov	r3, r0
 8007e28:	73fb      	strb	r3, [r7, #15]
 8007e2a:	e001      	b.n	8007e30 <tcp_process_refused_data+0x9c>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e34:	f113 0f0d 	cmn.w	r3, #13
 8007e38:	d110      	bne.n	8007e5c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8007e3a:	f06f 030c 	mvn.w	r3, #12
 8007e3e:	e00e      	b.n	8007e5e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8007e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e44:	f113 0f0d 	cmn.w	r3, #13
 8007e48:	d102      	bne.n	8007e50 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007e4a:	f06f 030c 	mvn.w	r3, #12
 8007e4e:	e006      	b.n	8007e5e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8007e56:	f06f 0304 	mvn.w	r3, #4
 8007e5a:	e000      	b.n	8007e5e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd90      	pop	{r4, r7, pc}

08007e66 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007e6e:	e007      	b.n	8007e80 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f809 	bl	8007e8e <tcp_seg_free>
    seg = next;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f4      	bne.n	8007e70 <tcp_segs_free+0xa>
  }
}
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00c      	beq.n	8007eb6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe fe07 	bl	8006abc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	2003      	movs	r0, #3
 8007eb2:	f7fe f8d9 	bl	8006068 <memp_free>
  }
}
 8007eb6:	bf00      	nop
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007ec6:	2003      	movs	r0, #3
 8007ec8:	f7fe f882 	bl	8005fd0 <memp_malloc>
 8007ecc:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <tcp_seg_copy+0x1a>
    return NULL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e00a      	b.n	8007eee <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007ed8:	2210      	movs	r2, #16
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f006 fbb4 	bl	800e64a <memcpy>
  pbuf_ref(cseg->p);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe fe94 	bl	8006c14 <pbuf_ref>
  return cseg;
 8007eec:	68fb      	ldr	r3, [r7, #12]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	60f8      	str	r0, [r7, #12]
 8007efe:	60b9      	str	r1, [r7, #8]
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d009      	beq.n	8007f1e <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	891b      	ldrh	r3, [r3, #8]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	68b8      	ldr	r0, [r7, #8]
 8007f12:	f7ff fbc1 	bl	8007698 <tcp_recved>
    pbuf_free(p);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fe fdd0 	bl	8006abc <pbuf_free>
 8007f1c:	e008      	b.n	8007f30 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8007f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d104      	bne.n	8007f30 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8007f26:	68b8      	ldr	r0, [r7, #8]
 8007f28:	f7ff fa92 	bl	8007450 <tcp_close>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	e000      	b.n	8007f32 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	db01      	blt.n	8007f52 <tcp_kill_prio+0x16>
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	e000      	b.n	8007f54 <tcp_kill_prio+0x18>
 8007f52:	237f      	movs	r3, #127	; 0x7f
 8007f54:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f5e:	4b16      	ldr	r3, [pc, #88]	; (8007fb8 <tcp_kill_prio+0x7c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	e01a      	b.n	8007f9c <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	7d5b      	ldrb	r3, [r3, #21]
 8007f6a:	7afa      	ldrb	r2, [r7, #11]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d312      	bcc.n	8007f96 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f70:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <tcp_kill_prio+0x80>)
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d80a      	bhi.n	8007f96 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8007f80:	4b0e      	ldr	r3, [pc, #56]	; (8007fbc <tcp_kill_prio+0x80>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	7d5b      	ldrb	r3, [r3, #21]
 8007f94:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	617b      	str	r3, [r7, #20]
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e1      	bne.n	8007f66 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007fa8:	6938      	ldr	r0, [r7, #16]
 8007faa:	f7ff fb1b 	bl	80075e4 <tcp_abort>
  }
}
 8007fae:	bf00      	nop
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20007b90 	.word	0x20007b90
 8007fbc:	20007b94 	.word	0x20007b94

08007fc0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d009      	beq.n	8007fe4 <tcp_kill_state+0x24>
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	2b09      	cmp	r3, #9
 8007fd4:	d006      	beq.n	8007fe4 <tcp_kill_state+0x24>
 8007fd6:	4b1a      	ldr	r3, [pc, #104]	; (8008040 <tcp_kill_state+0x80>)
 8007fd8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007fdc:	4919      	ldr	r1, [pc, #100]	; (8008044 <tcp_kill_state+0x84>)
 8007fde:	481a      	ldr	r0, [pc, #104]	; (8008048 <tcp_kill_state+0x88>)
 8007fe0:	f006 fb46 	bl	800e670 <iprintf>

  inactivity = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fec:	4b17      	ldr	r3, [pc, #92]	; (800804c <tcp_kill_state+0x8c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	e017      	b.n	8008024 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	7d1b      	ldrb	r3, [r3, #20]
 8007ff8:	79fa      	ldrb	r2, [r7, #7]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d10f      	bne.n	800801e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007ffe:	4b14      	ldr	r3, [pc, #80]	; (8008050 <tcp_kill_state+0x90>)
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	429a      	cmp	r2, r3
 800800c:	d807      	bhi.n	800801e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800800e:	4b10      	ldr	r3, [pc, #64]	; (8008050 <tcp_kill_state+0x90>)
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e4      	bne.n	8007ff4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d003      	beq.n	8008038 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008030:	2100      	movs	r1, #0
 8008032:	6938      	ldr	r0, [r7, #16]
 8008034:	f7ff fa24 	bl	8007480 <tcp_abandon>
  }
}
 8008038:	bf00      	nop
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	0800ff60 	.word	0x0800ff60
 8008044:	08010270 	.word	0x08010270
 8008048:	0800ff9c 	.word	0x0800ff9c
 800804c:	20007b90 	.word	0x20007b90
 8008050:	20007b94 	.word	0x20007b94

08008054 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008062:	4b12      	ldr	r3, [pc, #72]	; (80080ac <tcp_kill_timewait+0x58>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	e012      	b.n	8008090 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800806a:	4b11      	ldr	r3, [pc, #68]	; (80080b0 <tcp_kill_timewait+0x5c>)
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	429a      	cmp	r2, r3
 8008078:	d807      	bhi.n	800808a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800807a:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <tcp_kill_timewait+0x5c>)
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e9      	bne.n	800806a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800809c:	68b8      	ldr	r0, [r7, #8]
 800809e:	f7ff faa1 	bl	80075e4 <tcp_abort>
  }
}
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20007ba0 	.word	0x20007ba0
 80080b0:	20007b94 	.word	0x20007b94

080080b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80080be:	2001      	movs	r0, #1
 80080c0:	f7fd ff86 	bl	8005fd0 <memp_malloc>
 80080c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d124      	bne.n	8008116 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80080cc:	f7ff ffc2 	bl	8008054 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80080d0:	2001      	movs	r0, #1
 80080d2:	f7fd ff7d 	bl	8005fd0 <memp_malloc>
 80080d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d11b      	bne.n	8008116 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80080de:	2009      	movs	r0, #9
 80080e0:	f7ff ff6e 	bl	8007fc0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80080e4:	2001      	movs	r0, #1
 80080e6:	f7fd ff73 	bl	8005fd0 <memp_malloc>
 80080ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d111      	bne.n	8008116 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80080f2:	2008      	movs	r0, #8
 80080f4:	f7ff ff64 	bl	8007fc0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80080f8:	2001      	movs	r0, #1
 80080fa:	f7fd ff69 	bl	8005fd0 <memp_malloc>
 80080fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d107      	bne.n	8008116 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008106:	79fb      	ldrb	r3, [r7, #7]
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff ff17 	bl	8007f3c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800810e:	2001      	movs	r0, #1
 8008110:	f7fd ff5e 	bl	8005fd0 <memp_malloc>
 8008114:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d03f      	beq.n	800819c <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800811c:	2298      	movs	r2, #152	; 0x98
 800811e:	2100      	movs	r1, #0
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f006 fa9d 	bl	800e660 <memset>
    pcb->prio = prio;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	79fa      	ldrb	r2, [r7, #7]
 800812a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008132:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800813c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	22ff      	movs	r2, #255	; 0xff
 800814a:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008152:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2206      	movs	r2, #6
 8008158:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2206      	movs	r2, #6
 8008160:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008168:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008172:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <tcp_alloc+0xf4>)
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800817a:	4b0c      	ldr	r3, [pc, #48]	; (80081ac <tcp_alloc+0xf8>)
 800817c:	781a      	ldrb	r2, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008188:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4a08      	ldr	r2, [pc, #32]	; (80081b0 <tcp_alloc+0xfc>)
 8008190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4a07      	ldr	r2, [pc, #28]	; (80081b4 <tcp_alloc+0x100>)
 8008198:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800819c:	68fb      	ldr	r3, [r7, #12]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20007b94 	.word	0x20007b94
 80081ac:	200004d6 	.word	0x200004d6
 80081b0:	08007ef7 	.word	0x08007ef7
 80081b4:	006ddd00 	.word	0x006ddd00

080081b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	7d1b      	ldrb	r3, [r3, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d034      	beq.n	8008232 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80081cc:	2b0a      	cmp	r3, #10
 80081ce:	d030      	beq.n	8008232 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d02c      	beq.n	8008232 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d007      	beq.n	80081f0 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe fc69 	bl	8006abc <pbuf_free>
      pcb->refused_data = NULL;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff fe36 	bl	8007e66 <tcp_segs_free>
    pcb->ooseq = NULL;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008206:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800820c:	4618      	mov	r0, r3
 800820e:	f7ff fe2a 	bl	8007e66 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff fe25 	bl	8007e66 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	669a      	str	r2, [r3, #104]	; 0x68
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d105      	bne.n	800825c <tcp_pcb_remove+0x20>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	e013      	b.n	8008284 <tcp_pcb_remove+0x48>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	e00c      	b.n	800827e <tcp_pcb_remove+0x42>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d104      	bne.n	8008278 <tcp_pcb_remove+0x3c>
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	60da      	str	r2, [r3, #12]
 8008276:	e005      	b.n	8008284 <tcp_pcb_remove+0x48>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	60fb      	str	r3, [r7, #12]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1ef      	bne.n	8008264 <tcp_pcb_remove+0x28>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2200      	movs	r2, #0
 8008288:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800828a:	6838      	ldr	r0, [r7, #0]
 800828c:	f7ff ff94 	bl	80081b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	7d1b      	ldrb	r3, [r3, #20]
 8008294:	2b0a      	cmp	r3, #10
 8008296:	d013      	beq.n	80082c0 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800829c:	2b01      	cmp	r3, #1
 800829e:	d00f      	beq.n	80082c0 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	7e9b      	ldrb	r3, [r3, #26]
 80082a4:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d009      	beq.n	80082c0 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	7e9b      	ldrb	r3, [r3, #26]
 80082b0:	f043 0302 	orr.w	r3, r3, #2
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80082ba:	6838      	ldr	r0, [r7, #0]
 80082bc:	f002 fd8c 	bl	800add8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	7d1b      	ldrb	r3, [r3, #20]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d020      	beq.n	800830a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d006      	beq.n	80082de <tcp_pcb_remove+0xa2>
 80082d0:	4b13      	ldr	r3, [pc, #76]	; (8008320 <tcp_pcb_remove+0xe4>)
 80082d2:	f240 7253 	movw	r2, #1875	; 0x753
 80082d6:	4913      	ldr	r1, [pc, #76]	; (8008324 <tcp_pcb_remove+0xe8>)
 80082d8:	4813      	ldr	r0, [pc, #76]	; (8008328 <tcp_pcb_remove+0xec>)
 80082da:	f006 f9c9 	bl	800e670 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d006      	beq.n	80082f4 <tcp_pcb_remove+0xb8>
 80082e6:	4b0e      	ldr	r3, [pc, #56]	; (8008320 <tcp_pcb_remove+0xe4>)
 80082e8:	f240 7254 	movw	r2, #1876	; 0x754
 80082ec:	490f      	ldr	r1, [pc, #60]	; (800832c <tcp_pcb_remove+0xf0>)
 80082ee:	480e      	ldr	r0, [pc, #56]	; (8008328 <tcp_pcb_remove+0xec>)
 80082f0:	f006 f9be 	bl	800e670 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d006      	beq.n	800830a <tcp_pcb_remove+0xce>
 80082fc:	4b08      	ldr	r3, [pc, #32]	; (8008320 <tcp_pcb_remove+0xe4>)
 80082fe:	f240 7256 	movw	r2, #1878	; 0x756
 8008302:	490b      	ldr	r1, [pc, #44]	; (8008330 <tcp_pcb_remove+0xf4>)
 8008304:	4808      	ldr	r0, [pc, #32]	; (8008328 <tcp_pcb_remove+0xec>)
 8008306:	f006 f9b3 	bl	800e670 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2200      	movs	r2, #0
 800830e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2200      	movs	r2, #0
 8008314:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008316:	bf00      	nop
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	0800ff60 	.word	0x0800ff60
 8008324:	08010318 	.word	0x08010318
 8008328:	0800ff9c 	.word	0x0800ff9c
 800832c:	08010330 	.word	0x08010330
 8008330:	0801034c 	.word	0x0801034c

08008334 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800833c:	4b07      	ldr	r3, [pc, #28]	; (800835c <tcp_next_iss+0x28>)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <tcp_next_iss+0x2c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4413      	add	r3, r2
 8008346:	4a05      	ldr	r2, [pc, #20]	; (800835c <tcp_next_iss+0x28>)
 8008348:	6013      	str	r3, [r2, #0]
  return iss;
 800834a:	4b04      	ldr	r3, [pc, #16]	; (800835c <tcp_next_iss+0x28>)
 800834c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	20000010 	.word	0x20000010
 8008360:	20007b94 	.word	0x20007b94

08008364 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	4603      	mov	r3, r0
 800836c:	6039      	str	r1, [r7, #0]
 800836e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8008370:	6838      	ldr	r0, [r7, #0]
 8008372:	f004 ffd3 	bl	800d31c <ip4_route>
 8008376:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800837e:	88fb      	ldrh	r3, [r7, #6]
 8008380:	e010      	b.n	80083a4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008386:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008388:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d008      	beq.n	80083a2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8008390:	897b      	ldrh	r3, [r7, #10]
 8008392:	3b28      	subs	r3, #40	; 0x28
 8008394:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008396:	893a      	ldrh	r2, [r7, #8]
 8008398:	88fb      	ldrh	r3, [r7, #6]
 800839a:	4293      	cmp	r3, r2
 800839c:	bf28      	it	cs
 800839e:	4613      	movcs	r3, r2
 80083a0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80083a2:	88fb      	ldrh	r3, [r7, #6]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80083ba:	e011      	b.n	80083e0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d108      	bne.n	80083da <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f7ff f908 	bl	80075e4 <tcp_abort>
      pcb = next;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	e002      	b.n	80083e0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1ea      	bne.n	80083bc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80083e6:	bf00      	nop
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d02c      	beq.n	800845a <tcp_netif_ip_addr_changed+0x6a>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d028      	beq.n	800845a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008408:	4b16      	ldr	r3, [pc, #88]	; (8008464 <tcp_netif_ip_addr_changed+0x74>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7ff ffcc 	bl	80083ac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008414:	4b14      	ldr	r3, [pc, #80]	; (8008468 <tcp_netif_ip_addr_changed+0x78>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7ff ffc6 	bl	80083ac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d019      	beq.n	800845a <tcp_netif_ip_addr_changed+0x6a>
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d015      	beq.n	800845a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800842e:	4b0f      	ldr	r3, [pc, #60]	; (800846c <tcp_netif_ip_addr_changed+0x7c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	e00e      	b.n	8008454 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	429a      	cmp	r2, r3
 8008446:	d103      	bne.n	8008450 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1ed      	bne.n	8008436 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800845a:	bf00      	nop
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20007b90 	.word	0x20007b90
 8008468:	20007b9c 	.word	0x20007b9c
 800846c:	20007b98 	.word	0x20007b98

08008470 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008470:	b590      	push	{r4, r7, lr}
 8008472:	b08b      	sub	sp, #44	; 0x2c
 8008474:	af02      	add	r7, sp, #8
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	4a82      	ldr	r2, [pc, #520]	; (8008688 <tcp_input+0x218>)
 8008480:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	895b      	ldrh	r3, [r3, #10]
 8008486:	2b13      	cmp	r3, #19
 8008488:	f240 838a 	bls.w	8008ba0 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800848c:	4b7f      	ldr	r3, [pc, #508]	; (800868c <tcp_input+0x21c>)
 800848e:	695a      	ldr	r2, [r3, #20]
 8008490:	4b7e      	ldr	r3, [pc, #504]	; (800868c <tcp_input+0x21c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4619      	mov	r1, r3
 8008496:	4610      	mov	r0, r2
 8008498:	f005 f9ba 	bl	800d810 <ip4_addr_isbroadcast_u32>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f040 8380 	bne.w	8008ba4 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80084a4:	4b79      	ldr	r3, [pc, #484]	; (800868c <tcp_input+0x21c>)
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80084ac:	2be0      	cmp	r3, #224	; 0xe0
 80084ae:	f000 8379 	beq.w	8008ba4 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80084b2:	4b75      	ldr	r3, [pc, #468]	; (8008688 <tcp_input+0x218>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	899b      	ldrh	r3, [r3, #12]
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fd f9d9 	bl	8005872 <lwip_htons>
 80084c0:	4603      	mov	r3, r0
 80084c2:	0b1b      	lsrs	r3, r3, #12
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80084cc:	7cbb      	ldrb	r3, [r7, #18]
 80084ce:	2b13      	cmp	r3, #19
 80084d0:	f240 8368 	bls.w	8008ba4 <tcp_input+0x734>
 80084d4:	7cbb      	ldrb	r3, [r7, #18]
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	891b      	ldrh	r3, [r3, #8]
 80084dc:	429a      	cmp	r2, r3
 80084de:	f200 8361 	bhi.w	8008ba4 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80084e2:	7cbb      	ldrb	r3, [r7, #18]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b14      	subs	r3, #20
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	4b69      	ldr	r3, [pc, #420]	; (8008690 <tcp_input+0x220>)
 80084ec:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80084ee:	4b69      	ldr	r3, [pc, #420]	; (8008694 <tcp_input+0x224>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	895a      	ldrh	r2, [r3, #10]
 80084f8:	7cbb      	ldrb	r3, [r7, #18]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d30d      	bcc.n	800851c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008500:	4b63      	ldr	r3, [pc, #396]	; (8008690 <tcp_input+0x220>)
 8008502:	881a      	ldrh	r2, [r3, #0]
 8008504:	4b64      	ldr	r3, [pc, #400]	; (8008698 <tcp_input+0x228>)
 8008506:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008508:	7cbb      	ldrb	r3, [r7, #18]
 800850a:	b29b      	uxth	r3, r3
 800850c:	425b      	negs	r3, r3
 800850e:	b29b      	uxth	r3, r3
 8008510:	b21b      	sxth	r3, r3
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7fe faad 	bl	8006a74 <pbuf_header>
 800851a:	e055      	b.n	80085c8 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d105      	bne.n	8008530 <tcp_input+0xc0>
 8008524:	4b5d      	ldr	r3, [pc, #372]	; (800869c <tcp_input+0x22c>)
 8008526:	22b2      	movs	r2, #178	; 0xb2
 8008528:	495d      	ldr	r1, [pc, #372]	; (80086a0 <tcp_input+0x230>)
 800852a:	485e      	ldr	r0, [pc, #376]	; (80086a4 <tcp_input+0x234>)
 800852c:	f006 f8a0 	bl	800e670 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8008530:	f06f 0113 	mvn.w	r1, #19
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7fe fa9d 	bl	8006a74 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	895a      	ldrh	r2, [r3, #10]
 800853e:	4b56      	ldr	r3, [pc, #344]	; (8008698 <tcp_input+0x228>)
 8008540:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008542:	4b53      	ldr	r3, [pc, #332]	; (8008690 <tcp_input+0x220>)
 8008544:	881a      	ldrh	r2, [r3, #0]
 8008546:	4b54      	ldr	r3, [pc, #336]	; (8008698 <tcp_input+0x228>)
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800854e:	4b52      	ldr	r3, [pc, #328]	; (8008698 <tcp_input+0x228>)
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	425b      	negs	r3, r3
 8008554:	b29b      	uxth	r3, r3
 8008556:	b21b      	sxth	r3, r3
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7fe fa8a 	bl	8006a74 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	895b      	ldrh	r3, [r3, #10]
 8008566:	8a3a      	ldrh	r2, [r7, #16]
 8008568:	429a      	cmp	r2, r3
 800856a:	f200 831d 	bhi.w	8008ba8 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	4a47      	ldr	r2, [pc, #284]	; (8008694 <tcp_input+0x224>)
 8008576:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	8a3b      	ldrh	r3, [r7, #16]
 800857e:	425b      	negs	r3, r3
 8008580:	b29b      	uxth	r3, r3
 8008582:	b21b      	sxth	r3, r3
 8008584:	4619      	mov	r1, r3
 8008586:	4610      	mov	r0, r2
 8008588:	f7fe fa74 	bl	8006a74 <pbuf_header>
    p->tot_len -= opt2len;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	891a      	ldrh	r2, [r3, #8]
 8008590:	8a3b      	ldrh	r3, [r7, #16]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	b29a      	uxth	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	895b      	ldrh	r3, [r3, #10]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <tcp_input+0x13e>
 80085a2:	4b3e      	ldr	r3, [pc, #248]	; (800869c <tcp_input+0x22c>)
 80085a4:	22cf      	movs	r2, #207	; 0xcf
 80085a6:	4940      	ldr	r1, [pc, #256]	; (80086a8 <tcp_input+0x238>)
 80085a8:	483e      	ldr	r0, [pc, #248]	; (80086a4 <tcp_input+0x234>)
 80085aa:	f006 f861 	bl	800e670 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	891a      	ldrh	r2, [r3, #8]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	891b      	ldrh	r3, [r3, #8]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d005      	beq.n	80085c8 <tcp_input+0x158>
 80085bc:	4b37      	ldr	r3, [pc, #220]	; (800869c <tcp_input+0x22c>)
 80085be:	22d0      	movs	r2, #208	; 0xd0
 80085c0:	493a      	ldr	r1, [pc, #232]	; (80086ac <tcp_input+0x23c>)
 80085c2:	4838      	ldr	r0, [pc, #224]	; (80086a4 <tcp_input+0x234>)
 80085c4:	f006 f854 	bl	800e670 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80085c8:	4b2f      	ldr	r3, [pc, #188]	; (8008688 <tcp_input+0x218>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	4b2d      	ldr	r3, [pc, #180]	; (8008688 <tcp_input+0x218>)
 80085d2:	681c      	ldr	r4, [r3, #0]
 80085d4:	4610      	mov	r0, r2
 80085d6:	f7fd f94c 	bl	8005872 <lwip_htons>
 80085da:	4603      	mov	r3, r0
 80085dc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80085de:	4b2a      	ldr	r3, [pc, #168]	; (8008688 <tcp_input+0x218>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	885b      	ldrh	r3, [r3, #2]
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	4b28      	ldr	r3, [pc, #160]	; (8008688 <tcp_input+0x218>)
 80085e8:	681c      	ldr	r4, [r3, #0]
 80085ea:	4610      	mov	r0, r2
 80085ec:	f7fd f941 	bl	8005872 <lwip_htons>
 80085f0:	4603      	mov	r3, r0
 80085f2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80085f4:	4b24      	ldr	r3, [pc, #144]	; (8008688 <tcp_input+0x218>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	4b23      	ldr	r3, [pc, #140]	; (8008688 <tcp_input+0x218>)
 80085fc:	681c      	ldr	r4, [r3, #0]
 80085fe:	4610      	mov	r0, r2
 8008600:	f7fd f945 	bl	800588e <lwip_htonl>
 8008604:	4603      	mov	r3, r0
 8008606:	6063      	str	r3, [r4, #4]
 8008608:	6863      	ldr	r3, [r4, #4]
 800860a:	4a29      	ldr	r2, [pc, #164]	; (80086b0 <tcp_input+0x240>)
 800860c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800860e:	4b1e      	ldr	r3, [pc, #120]	; (8008688 <tcp_input+0x218>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	4b1c      	ldr	r3, [pc, #112]	; (8008688 <tcp_input+0x218>)
 8008616:	681c      	ldr	r4, [r3, #0]
 8008618:	4610      	mov	r0, r2
 800861a:	f7fd f938 	bl	800588e <lwip_htonl>
 800861e:	4603      	mov	r3, r0
 8008620:	60a3      	str	r3, [r4, #8]
 8008622:	68a3      	ldr	r3, [r4, #8]
 8008624:	4a23      	ldr	r2, [pc, #140]	; (80086b4 <tcp_input+0x244>)
 8008626:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008628:	4b17      	ldr	r3, [pc, #92]	; (8008688 <tcp_input+0x218>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	89db      	ldrh	r3, [r3, #14]
 800862e:	b29a      	uxth	r2, r3
 8008630:	4b15      	ldr	r3, [pc, #84]	; (8008688 <tcp_input+0x218>)
 8008632:	681c      	ldr	r4, [r3, #0]
 8008634:	4610      	mov	r0, r2
 8008636:	f7fd f91c 	bl	8005872 <lwip_htons>
 800863a:	4603      	mov	r3, r0
 800863c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800863e:	4b12      	ldr	r3, [pc, #72]	; (8008688 <tcp_input+0x218>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	899b      	ldrh	r3, [r3, #12]
 8008644:	b29b      	uxth	r3, r3
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd f913 	bl	8005872 <lwip_htons>
 800864c:	4603      	mov	r3, r0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008654:	b2da      	uxtb	r2, r3
 8008656:	4b18      	ldr	r3, [pc, #96]	; (80086b8 <tcp_input+0x248>)
 8008658:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	891a      	ldrh	r2, [r3, #8]
 800865e:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <tcp_input+0x248>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	2b00      	cmp	r3, #0
 8008668:	bf14      	ite	ne
 800866a:	2301      	movne	r3, #1
 800866c:	2300      	moveq	r3, #0
 800866e:	b2db      	uxtb	r3, r3
 8008670:	b29b      	uxth	r3, r3
 8008672:	4413      	add	r3, r2
 8008674:	b29a      	uxth	r2, r3
 8008676:	4b11      	ldr	r3, [pc, #68]	; (80086bc <tcp_input+0x24c>)
 8008678:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800867a:	2300      	movs	r3, #0
 800867c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800867e:	4b10      	ldr	r3, [pc, #64]	; (80086c0 <tcp_input+0x250>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	61fb      	str	r3, [r7, #28]
 8008684:	e082      	b.n	800878c <tcp_input+0x31c>
 8008686:	bf00      	nop
 8008688:	200004e8 	.word	0x200004e8
 800868c:	20004660 	.word	0x20004660
 8008690:	200004ec 	.word	0x200004ec
 8008694:	200004f0 	.word	0x200004f0
 8008698:	200004ee 	.word	0x200004ee
 800869c:	08010364 	.word	0x08010364
 80086a0:	08010398 	.word	0x08010398
 80086a4:	080103a8 	.word	0x080103a8
 80086a8:	080103d0 	.word	0x080103d0
 80086ac:	080103dc 	.word	0x080103dc
 80086b0:	200004f8 	.word	0x200004f8
 80086b4:	200004fc 	.word	0x200004fc
 80086b8:	20000504 	.word	0x20000504
 80086bc:	20000502 	.word	0x20000502
 80086c0:	20007b90 	.word	0x20007b90
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	7d1b      	ldrb	r3, [r3, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d105      	bne.n	80086d8 <tcp_input+0x268>
 80086cc:	4b8f      	ldr	r3, [pc, #572]	; (800890c <tcp_input+0x49c>)
 80086ce:	22e2      	movs	r2, #226	; 0xe2
 80086d0:	498f      	ldr	r1, [pc, #572]	; (8008910 <tcp_input+0x4a0>)
 80086d2:	4890      	ldr	r0, [pc, #576]	; (8008914 <tcp_input+0x4a4>)
 80086d4:	f005 ffcc 	bl	800e670 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	7d1b      	ldrb	r3, [r3, #20]
 80086dc:	2b0a      	cmp	r3, #10
 80086de:	d105      	bne.n	80086ec <tcp_input+0x27c>
 80086e0:	4b8a      	ldr	r3, [pc, #552]	; (800890c <tcp_input+0x49c>)
 80086e2:	22e3      	movs	r2, #227	; 0xe3
 80086e4:	498c      	ldr	r1, [pc, #560]	; (8008918 <tcp_input+0x4a8>)
 80086e6:	488b      	ldr	r0, [pc, #556]	; (8008914 <tcp_input+0x4a4>)
 80086e8:	f005 ffc2 	bl	800e670 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	7d1b      	ldrb	r3, [r3, #20]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d105      	bne.n	8008700 <tcp_input+0x290>
 80086f4:	4b85      	ldr	r3, [pc, #532]	; (800890c <tcp_input+0x49c>)
 80086f6:	22e4      	movs	r2, #228	; 0xe4
 80086f8:	4988      	ldr	r1, [pc, #544]	; (800891c <tcp_input+0x4ac>)
 80086fa:	4886      	ldr	r0, [pc, #536]	; (8008914 <tcp_input+0x4a4>)
 80086fc:	f005 ffb8 	bl	800e670 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	8b1a      	ldrh	r2, [r3, #24]
 8008704:	4b86      	ldr	r3, [pc, #536]	; (8008920 <tcp_input+0x4b0>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	b29b      	uxth	r3, r3
 800870c:	429a      	cmp	r2, r3
 800870e:	d138      	bne.n	8008782 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	8ada      	ldrh	r2, [r3, #22]
 8008714:	4b82      	ldr	r3, [pc, #520]	; (8008920 <tcp_input+0x4b0>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	885b      	ldrh	r3, [r3, #2]
 800871a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800871c:	429a      	cmp	r2, r3
 800871e:	d130      	bne.n	8008782 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	4b7f      	ldr	r3, [pc, #508]	; (8008924 <tcp_input+0x4b4>)
 8008726:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008728:	429a      	cmp	r2, r3
 800872a:	d12a      	bne.n	8008782 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	4b7c      	ldr	r3, [pc, #496]	; (8008924 <tcp_input+0x4b4>)
 8008732:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008734:	429a      	cmp	r2, r3
 8008736:	d124      	bne.n	8008782 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	429a      	cmp	r2, r3
 8008740:	d105      	bne.n	800874e <tcp_input+0x2de>
 8008742:	4b72      	ldr	r3, [pc, #456]	; (800890c <tcp_input+0x49c>)
 8008744:	22ec      	movs	r2, #236	; 0xec
 8008746:	4978      	ldr	r1, [pc, #480]	; (8008928 <tcp_input+0x4b8>)
 8008748:	4872      	ldr	r0, [pc, #456]	; (8008914 <tcp_input+0x4a4>)
 800874a:	f005 ff91 	bl	800e670 <iprintf>
      if (prev != NULL) {
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00a      	beq.n	800876a <tcp_input+0x2fa>
        prev->next = pcb->next;
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	68da      	ldr	r2, [r3, #12]
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800875c:	4b73      	ldr	r3, [pc, #460]	; (800892c <tcp_input+0x4bc>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008764:	4a71      	ldr	r2, [pc, #452]	; (800892c <tcp_input+0x4bc>)
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	69fa      	ldr	r2, [r7, #28]
 8008770:	429a      	cmp	r2, r3
 8008772:	d10f      	bne.n	8008794 <tcp_input+0x324>
 8008774:	4b65      	ldr	r3, [pc, #404]	; (800890c <tcp_input+0x49c>)
 8008776:	22f4      	movs	r2, #244	; 0xf4
 8008778:	496d      	ldr	r1, [pc, #436]	; (8008930 <tcp_input+0x4c0>)
 800877a:	4866      	ldr	r0, [pc, #408]	; (8008914 <tcp_input+0x4a4>)
 800877c:	f005 ff78 	bl	800e670 <iprintf>
      break;
 8008780:	e008      	b.n	8008794 <tcp_input+0x324>
    }
    prev = pcb;
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	61fb      	str	r3, [r7, #28]
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d198      	bne.n	80086c4 <tcp_input+0x254>
 8008792:	e000      	b.n	8008796 <tcp_input+0x326>
      break;
 8008794:	bf00      	nop
  }

  if (pcb == NULL) {
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d173      	bne.n	8008884 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800879c:	4b65      	ldr	r3, [pc, #404]	; (8008934 <tcp_input+0x4c4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	61fb      	str	r3, [r7, #28]
 80087a2:	e02f      	b.n	8008804 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	7d1b      	ldrb	r3, [r3, #20]
 80087a8:	2b0a      	cmp	r3, #10
 80087aa:	d005      	beq.n	80087b8 <tcp_input+0x348>
 80087ac:	4b57      	ldr	r3, [pc, #348]	; (800890c <tcp_input+0x49c>)
 80087ae:	22fe      	movs	r2, #254	; 0xfe
 80087b0:	4961      	ldr	r1, [pc, #388]	; (8008938 <tcp_input+0x4c8>)
 80087b2:	4858      	ldr	r0, [pc, #352]	; (8008914 <tcp_input+0x4a4>)
 80087b4:	f005 ff5c 	bl	800e670 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	8b1a      	ldrh	r2, [r3, #24]
 80087bc:	4b58      	ldr	r3, [pc, #352]	; (8008920 <tcp_input+0x4b0>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d11a      	bne.n	80087fe <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	8ada      	ldrh	r2, [r3, #22]
 80087cc:	4b54      	ldr	r3, [pc, #336]	; (8008920 <tcp_input+0x4b0>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	885b      	ldrh	r3, [r3, #2]
 80087d2:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d112      	bne.n	80087fe <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	4b51      	ldr	r3, [pc, #324]	; (8008924 <tcp_input+0x4b4>)
 80087de:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d10c      	bne.n	80087fe <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	4b4e      	ldr	r3, [pc, #312]	; (8008924 <tcp_input+0x4b4>)
 80087ea:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d106      	bne.n	80087fe <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80087f0:	69f8      	ldr	r0, [r7, #28]
 80087f2:	f000 fb15 	bl	8008e20 <tcp_timewait_input>
        pbuf_free(p);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7fe f960 	bl	8006abc <pbuf_free>
        return;
 80087fc:	e1da      	b.n	8008bb4 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	61fb      	str	r3, [r7, #28]
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1cc      	bne.n	80087a4 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800880e:	4b4b      	ldr	r3, [pc, #300]	; (800893c <tcp_input+0x4cc>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	e019      	b.n	800884a <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	8ada      	ldrh	r2, [r3, #22]
 800881a:	4b41      	ldr	r3, [pc, #260]	; (8008920 <tcp_input+0x4b0>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	885b      	ldrh	r3, [r3, #2]
 8008820:	b29b      	uxth	r3, r3
 8008822:	429a      	cmp	r2, r3
 8008824:	d10c      	bne.n	8008840 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	4b3e      	ldr	r3, [pc, #248]	; (8008924 <tcp_input+0x4b4>)
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	429a      	cmp	r2, r3
 8008830:	d00f      	beq.n	8008852 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00d      	beq.n	8008854 <tcp_input+0x3e4>
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d009      	beq.n	8008854 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e2      	bne.n	8008816 <tcp_input+0x3a6>
 8008850:	e000      	b.n	8008854 <tcp_input+0x3e4>
            break;
 8008852:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d014      	beq.n	8008884 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00a      	beq.n	8008876 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	68da      	ldr	r2, [r3, #12]
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008868:	4b34      	ldr	r3, [pc, #208]	; (800893c <tcp_input+0x4cc>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008870:	4a32      	ldr	r2, [pc, #200]	; (800893c <tcp_input+0x4cc>)
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8008876:	6978      	ldr	r0, [r7, #20]
 8008878:	f000 f9f0 	bl	8008c5c <tcp_listen_input>
      pbuf_free(p);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7fe f91d 	bl	8006abc <pbuf_free>
      return;
 8008882:	e197      	b.n	8008bb4 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 8164 	beq.w	8008b54 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800888c:	4b2c      	ldr	r3, [pc, #176]	; (8008940 <tcp_input+0x4d0>)
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	891a      	ldrh	r2, [r3, #8]
 8008896:	4b2a      	ldr	r3, [pc, #168]	; (8008940 <tcp_input+0x4d0>)
 8008898:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800889a:	4a29      	ldr	r2, [pc, #164]	; (8008940 <tcp_input+0x4d0>)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80088a0:	4b1f      	ldr	r3, [pc, #124]	; (8008920 <tcp_input+0x4b0>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a26      	ldr	r2, [pc, #152]	; (8008940 <tcp_input+0x4d0>)
 80088a6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80088a8:	4b26      	ldr	r3, [pc, #152]	; (8008944 <tcp_input+0x4d4>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80088ae:	4b26      	ldr	r3, [pc, #152]	; (8008948 <tcp_input+0x4d8>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80088b4:	4b25      	ldr	r3, [pc, #148]	; (800894c <tcp_input+0x4dc>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80088ba:	4b25      	ldr	r3, [pc, #148]	; (8008950 <tcp_input+0x4e0>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	f003 0308 	and.w	r3, r3, #8
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d006      	beq.n	80088d4 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	7b5b      	ldrb	r3, [r3, #13]
 80088ca:	f043 0301 	orr.w	r3, r3, #1
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d03d      	beq.n	8008958 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80088dc:	69f8      	ldr	r0, [r7, #28]
 80088de:	f7ff fa59 	bl	8007d94 <tcp_process_refused_data>
 80088e2:	4603      	mov	r3, r0
 80088e4:	f113 0f0d 	cmn.w	r3, #13
 80088e8:	d007      	beq.n	80088fa <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d032      	beq.n	8008958 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80088f2:	4b18      	ldr	r3, [pc, #96]	; (8008954 <tcp_input+0x4e4>)
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d02e      	beq.n	8008958 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f040 8108 	bne.w	8008b14 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008904:	69f8      	ldr	r0, [r7, #28]
 8008906:	f002 fa0b 	bl	800ad20 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800890a:	e103      	b.n	8008b14 <tcp_input+0x6a4>
 800890c:	08010364 	.word	0x08010364
 8008910:	080103fc 	.word	0x080103fc
 8008914:	080103a8 	.word	0x080103a8
 8008918:	08010424 	.word	0x08010424
 800891c:	08010450 	.word	0x08010450
 8008920:	200004e8 	.word	0x200004e8
 8008924:	20004660 	.word	0x20004660
 8008928:	08010478 	.word	0x08010478
 800892c:	20007b90 	.word	0x20007b90
 8008930:	080104a4 	.word	0x080104a4
 8008934:	20007ba0 	.word	0x20007ba0
 8008938:	080104d0 	.word	0x080104d0
 800893c:	20007b98 	.word	0x20007b98
 8008940:	200004d8 	.word	0x200004d8
 8008944:	20000508 	.word	0x20000508
 8008948:	20000505 	.word	0x20000505
 800894c:	20000500 	.word	0x20000500
 8008950:	20000504 	.word	0x20000504
 8008954:	20000502 	.word	0x20000502
      }
    }
    tcp_input_pcb = pcb;
 8008958:	4a98      	ldr	r2, [pc, #608]	; (8008bbc <tcp_input+0x74c>)
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800895e:	69f8      	ldr	r0, [r7, #28]
 8008960:	f000 fac6 	bl	8008ef0 <tcp_process>
 8008964:	4603      	mov	r3, r0
 8008966:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008968:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800896c:	f113 0f0d 	cmn.w	r3, #13
 8008970:	f000 80d2 	beq.w	8008b18 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8008974:	4b92      	ldr	r3, [pc, #584]	; (8008bc0 <tcp_input+0x750>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 0308 	and.w	r3, r3, #8
 800897c:	2b00      	cmp	r3, #0
 800897e:	d016      	beq.n	80089ae <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d008      	beq.n	800899c <tcp_input+0x52c>
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008990:	69fa      	ldr	r2, [r7, #28]
 8008992:	6912      	ldr	r2, [r2, #16]
 8008994:	f06f 010d 	mvn.w	r1, #13
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800899c:	69f9      	ldr	r1, [r7, #28]
 800899e:	4889      	ldr	r0, [pc, #548]	; (8008bc4 <tcp_input+0x754>)
 80089a0:	f7ff fc4c 	bl	800823c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80089a4:	69f9      	ldr	r1, [r7, #28]
 80089a6:	2001      	movs	r0, #1
 80089a8:	f7fd fb5e 	bl	8006068 <memp_free>
 80089ac:	e0bf      	b.n	8008b2e <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80089b2:	4b85      	ldr	r3, [pc, #532]	; (8008bc8 <tcp_input+0x758>)
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d01b      	beq.n	80089f2 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80089ba:	4b83      	ldr	r3, [pc, #524]	; (8008bc8 <tcp_input+0x758>)
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d009      	beq.n	80089dc <tcp_input+0x56c>
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089cc:	69fa      	ldr	r2, [r7, #28]
 80089ce:	6910      	ldr	r0, [r2, #16]
 80089d0:	89fa      	ldrh	r2, [r7, #14]
 80089d2:	69f9      	ldr	r1, [r7, #28]
 80089d4:	4798      	blx	r3
 80089d6:	4603      	mov	r3, r0
 80089d8:	74fb      	strb	r3, [r7, #19]
 80089da:	e001      	b.n	80089e0 <tcp_input+0x570>
 80089dc:	2300      	movs	r3, #0
 80089de:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80089e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089e4:	f113 0f0d 	cmn.w	r3, #13
 80089e8:	f000 8098 	beq.w	8008b1c <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 80089ec:	4b76      	ldr	r3, [pc, #472]	; (8008bc8 <tcp_input+0x758>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80089f2:	69f8      	ldr	r0, [r7, #28]
 80089f4:	f000 f900 	bl	8008bf8 <tcp_input_delayed_close>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f040 8090 	bne.w	8008b20 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008a00:	4b72      	ldr	r3, [pc, #456]	; (8008bcc <tcp_input+0x75c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d041      	beq.n	8008a8c <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d006      	beq.n	8008a1e <tcp_input+0x5ae>
 8008a10:	4b6f      	ldr	r3, [pc, #444]	; (8008bd0 <tcp_input+0x760>)
 8008a12:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8008a16:	496f      	ldr	r1, [pc, #444]	; (8008bd4 <tcp_input+0x764>)
 8008a18:	486f      	ldr	r0, [pc, #444]	; (8008bd8 <tcp_input+0x768>)
 8008a1a:	f005 fe29 	bl	800e670 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	7e9b      	ldrb	r3, [r3, #26]
 8008a22:	f003 0310 	and.w	r3, r3, #16
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d008      	beq.n	8008a3c <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008a2a:	4b68      	ldr	r3, [pc, #416]	; (8008bcc <tcp_input+0x75c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe f844 	bl	8006abc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008a34:	69f8      	ldr	r0, [r7, #28]
 8008a36:	f7fe fdd5 	bl	80075e4 <tcp_abort>
            goto aborted;
 8008a3a:	e078      	b.n	8008b2e <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00c      	beq.n	8008a60 <tcp_input+0x5f0>
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	6918      	ldr	r0, [r3, #16]
 8008a50:	4b5e      	ldr	r3, [pc, #376]	; (8008bcc <tcp_input+0x75c>)
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	2300      	movs	r3, #0
 8008a56:	69f9      	ldr	r1, [r7, #28]
 8008a58:	47a0      	blx	r4
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	74fb      	strb	r3, [r7, #19]
 8008a5e:	e008      	b.n	8008a72 <tcp_input+0x602>
 8008a60:	4b5a      	ldr	r3, [pc, #360]	; (8008bcc <tcp_input+0x75c>)
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	2300      	movs	r3, #0
 8008a66:	69f9      	ldr	r1, [r7, #28]
 8008a68:	2000      	movs	r0, #0
 8008a6a:	f7ff fa44 	bl	8007ef6 <tcp_recv_null>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008a72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a76:	f113 0f0d 	cmn.w	r3, #13
 8008a7a:	d053      	beq.n	8008b24 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008a7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d003      	beq.n	8008a8c <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008a84:	4b51      	ldr	r3, [pc, #324]	; (8008bcc <tcp_input+0x75c>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008a8c:	4b4c      	ldr	r3, [pc, #304]	; (8008bc0 <tcp_input+0x750>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d030      	beq.n	8008afa <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d009      	beq.n	8008ab4 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa4:	7b5a      	ldrb	r2, [r3, #13]
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aaa:	f042 0220 	orr.w	r2, r2, #32
 8008aae:	b2d2      	uxtb	r2, r2
 8008ab0:	735a      	strb	r2, [r3, #13]
 8008ab2:	e022      	b.n	8008afa <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008abc:	d005      	beq.n	8008aca <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00b      	beq.n	8008aec <tcp_input+0x67c>
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	6918      	ldr	r0, [r3, #16]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	69f9      	ldr	r1, [r7, #28]
 8008ae4:	47a0      	blx	r4
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	74fb      	strb	r3, [r7, #19]
 8008aea:	e001      	b.n	8008af0 <tcp_input+0x680>
 8008aec:	2300      	movs	r3, #0
 8008aee:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008af0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008af4:	f113 0f0d 	cmn.w	r3, #13
 8008af8:	d016      	beq.n	8008b28 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008afa:	4b30      	ldr	r3, [pc, #192]	; (8008bbc <tcp_input+0x74c>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008b00:	69f8      	ldr	r0, [r7, #28]
 8008b02:	f000 f879 	bl	8008bf8 <tcp_input_delayed_close>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10f      	bne.n	8008b2c <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008b0c:	69f8      	ldr	r0, [r7, #28]
 8008b0e:	f002 f963 	bl	800add8 <tcp_output>
 8008b12:	e00c      	b.n	8008b2e <tcp_input+0x6be>
        goto aborted;
 8008b14:	bf00      	nop
 8008b16:	e00a      	b.n	8008b2e <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008b18:	bf00      	nop
 8008b1a:	e008      	b.n	8008b2e <tcp_input+0x6be>
              goto aborted;
 8008b1c:	bf00      	nop
 8008b1e:	e006      	b.n	8008b2e <tcp_input+0x6be>
          goto aborted;
 8008b20:	bf00      	nop
 8008b22:	e004      	b.n	8008b2e <tcp_input+0x6be>
            goto aborted;
 8008b24:	bf00      	nop
 8008b26:	e002      	b.n	8008b2e <tcp_input+0x6be>
              goto aborted;
 8008b28:	bf00      	nop
 8008b2a:	e000      	b.n	8008b2e <tcp_input+0x6be>
          goto aborted;
 8008b2c:	bf00      	nop
    tcp_input_pcb = NULL;
 8008b2e:	4b23      	ldr	r3, [pc, #140]	; (8008bbc <tcp_input+0x74c>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008b34:	4b25      	ldr	r3, [pc, #148]	; (8008bcc <tcp_input+0x75c>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8008b3a:	4b28      	ldr	r3, [pc, #160]	; (8008bdc <tcp_input+0x76c>)
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d037      	beq.n	8008bb2 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8008b42:	4b26      	ldr	r3, [pc, #152]	; (8008bdc <tcp_input+0x76c>)
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fd ffb8 	bl	8006abc <pbuf_free>
      inseg.p = NULL;
 8008b4c:	4b23      	ldr	r3, [pc, #140]	; (8008bdc <tcp_input+0x76c>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008b52:	e02e      	b.n	8008bb2 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008b54:	4b22      	ldr	r3, [pc, #136]	; (8008be0 <tcp_input+0x770>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	899b      	ldrh	r3, [r3, #12]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7fc fe88 	bl	8005872 <lwip_htons>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d115      	bne.n	8008b98 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b6c:	4b1d      	ldr	r3, [pc, #116]	; (8008be4 <tcp_input+0x774>)
 8008b6e:	6818      	ldr	r0, [r3, #0]
 8008b70:	4b1d      	ldr	r3, [pc, #116]	; (8008be8 <tcp_input+0x778>)
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	4b1d      	ldr	r3, [pc, #116]	; (8008bec <tcp_input+0x77c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b7c:	4b18      	ldr	r3, [pc, #96]	; (8008be0 <tcp_input+0x770>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b80:	885b      	ldrh	r3, [r3, #2]
 8008b82:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b84:	4a16      	ldr	r2, [pc, #88]	; (8008be0 <tcp_input+0x770>)
 8008b86:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b88:	8812      	ldrh	r2, [r2, #0]
 8008b8a:	b292      	uxth	r2, r2
 8008b8c:	9201      	str	r2, [sp, #4]
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	4b17      	ldr	r3, [pc, #92]	; (8008bf0 <tcp_input+0x780>)
 8008b92:	4a18      	ldr	r2, [pc, #96]	; (8008bf4 <tcp_input+0x784>)
 8008b94:	f002 fbaa 	bl	800b2ec <tcp_rst>
    pbuf_free(p);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7fd ff8f 	bl	8006abc <pbuf_free>
  return;
 8008b9e:	e008      	b.n	8008bb2 <tcp_input+0x742>
    goto dropped;
 8008ba0:	bf00      	nop
 8008ba2:	e002      	b.n	8008baa <tcp_input+0x73a>
dropped:
 8008ba4:	bf00      	nop
 8008ba6:	e000      	b.n	8008baa <tcp_input+0x73a>
      goto dropped;
 8008ba8:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7fd ff86 	bl	8006abc <pbuf_free>
 8008bb0:	e000      	b.n	8008bb4 <tcp_input+0x744>
  return;
 8008bb2:	bf00      	nop
}
 8008bb4:	3724      	adds	r7, #36	; 0x24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd90      	pop	{r4, r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20007ba4 	.word	0x20007ba4
 8008bc0:	20000505 	.word	0x20000505
 8008bc4:	20007b90 	.word	0x20007b90
 8008bc8:	20000500 	.word	0x20000500
 8008bcc:	20000508 	.word	0x20000508
 8008bd0:	08010364 	.word	0x08010364
 8008bd4:	08010500 	.word	0x08010500
 8008bd8:	080103a8 	.word	0x080103a8
 8008bdc:	200004d8 	.word	0x200004d8
 8008be0:	200004e8 	.word	0x200004e8
 8008be4:	200004fc 	.word	0x200004fc
 8008be8:	20000502 	.word	0x20000502
 8008bec:	200004f8 	.word	0x200004f8
 8008bf0:	20004670 	.word	0x20004670
 8008bf4:	20004674 	.word	0x20004674

08008bf8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8008c00:	4b14      	ldr	r3, [pc, #80]	; (8008c54 <tcp_input_delayed_close+0x5c>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	f003 0310 	and.w	r3, r3, #16
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01d      	beq.n	8008c48 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	7e9b      	ldrb	r3, [r3, #26]
 8008c10:	f003 0310 	and.w	r3, r3, #16
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10d      	bne.n	8008c34 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d008      	beq.n	8008c34 <tcp_input_delayed_close+0x3c>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	6912      	ldr	r2, [r2, #16]
 8008c2c:	f06f 010e 	mvn.w	r1, #14
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	4808      	ldr	r0, [pc, #32]	; (8008c58 <tcp_input_delayed_close+0x60>)
 8008c38:	f7ff fb00 	bl	800823c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	2001      	movs	r0, #1
 8008c40:	f7fd fa12 	bl	8006068 <memp_free>
    return 1;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e000      	b.n	8008c4a <tcp_input_delayed_close+0x52>
  }
  return 0;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20000505 	.word	0x20000505
 8008c58:	20007b90 	.word	0x20007b90

08008c5c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af02      	add	r7, sp, #8
 8008c62:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008c64:	4b64      	ldr	r3, [pc, #400]	; (8008df8 <tcp_listen_input+0x19c>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	f003 0304 	and.w	r3, r3, #4
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f040 80bc 	bne.w	8008dea <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008c72:	4b61      	ldr	r3, [pc, #388]	; (8008df8 <tcp_listen_input+0x19c>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	f003 0310 	and.w	r3, r3, #16
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d016      	beq.n	8008cac <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c7e:	4b5f      	ldr	r3, [pc, #380]	; (8008dfc <tcp_listen_input+0x1a0>)
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	4b5f      	ldr	r3, [pc, #380]	; (8008e00 <tcp_listen_input+0x1a4>)
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	4b5e      	ldr	r3, [pc, #376]	; (8008e04 <tcp_listen_input+0x1a8>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c8e:	4b5e      	ldr	r3, [pc, #376]	; (8008e08 <tcp_listen_input+0x1ac>)
 8008c90:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c92:	885b      	ldrh	r3, [r3, #2]
 8008c94:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c96:	4a5c      	ldr	r2, [pc, #368]	; (8008e08 <tcp_listen_input+0x1ac>)
 8008c98:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c9a:	8812      	ldrh	r2, [r2, #0]
 8008c9c:	b292      	uxth	r2, r2
 8008c9e:	9201      	str	r2, [sp, #4]
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	4b5a      	ldr	r3, [pc, #360]	; (8008e0c <tcp_listen_input+0x1b0>)
 8008ca4:	4a5a      	ldr	r2, [pc, #360]	; (8008e10 <tcp_listen_input+0x1b4>)
 8008ca6:	f002 fb21 	bl	800b2ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008caa:	e0a0      	b.n	8008dee <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8008cac:	4b52      	ldr	r3, [pc, #328]	; (8008df8 <tcp_listen_input+0x19c>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 809a 	beq.w	8008dee <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	7d5b      	ldrb	r3, [r3, #21]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff f9f8 	bl	80080b4 <tcp_alloc>
 8008cc4:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d111      	bne.n	8008cf0 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00a      	beq.n	8008cea <tcp_listen_input+0x8e>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	6910      	ldr	r0, [r2, #16]
 8008cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	4798      	blx	r3
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73bb      	strb	r3, [r7, #14]
      return;
 8008ce8:	e082      	b.n	8008df0 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008cea:	23f0      	movs	r3, #240	; 0xf0
 8008cec:	73bb      	strb	r3, [r7, #14]
      return;
 8008cee:	e07f      	b.n	8008df0 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008cf0:	4b48      	ldr	r3, [pc, #288]	; (8008e14 <tcp_listen_input+0x1b8>)
 8008cf2:	695a      	ldr	r2, [r3, #20]
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008cf8:	4b46      	ldr	r3, [pc, #280]	; (8008e14 <tcp_listen_input+0x1b8>)
 8008cfa:	691a      	ldr	r2, [r3, #16]
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	8ada      	ldrh	r2, [r3, #22]
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008d08:	4b3f      	ldr	r3, [pc, #252]	; (8008e08 <tcp_listen_input+0x1ac>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2203      	movs	r2, #3
 8008d18:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008d1a:	4b3a      	ldr	r3, [pc, #232]	; (8008e04 <tcp_listen_input+0x1a8>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008d2c:	6978      	ldr	r0, [r7, #20]
 8008d2e:	f7ff fb01 	bl	8008334 <tcp_next_iss>
 8008d32:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008d4c:	4b2d      	ldr	r3, [pc, #180]	; (8008e04 <tcp_listen_input+0x1a8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	1e5a      	subs	r2, r3, #1
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691a      	ldr	r2, [r3, #16]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	7a1b      	ldrb	r3, [r3, #8]
 8008d68:	f003 030c 	and.w	r3, r3, #12
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008d72:	4b29      	ldr	r3, [pc, #164]	; (8008e18 <tcp_listen_input+0x1bc>)
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	60da      	str	r2, [r3, #12]
 8008d7a:	4a27      	ldr	r2, [pc, #156]	; (8008e18 <tcp_listen_input+0x1bc>)
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	f002 fd06 	bl	800b790 <tcp_timer_needed>
 8008d84:	4b25      	ldr	r3, [pc, #148]	; (8008e1c <tcp_listen_input+0x1c0>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008d8a:	6978      	ldr	r0, [r7, #20]
 8008d8c:	f001 fd14 	bl	800a7b8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008d90:	4b1d      	ldr	r3, [pc, #116]	; (8008e08 <tcp_listen_input+0x1ac>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	89db      	ldrh	r3, [r3, #14]
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	3304      	adds	r3, #4
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f7ff fad5 	bl	8008364 <tcp_eff_send_mss_impl>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008dc2:	2112      	movs	r1, #18
 8008dc4:	6978      	ldr	r0, [r7, #20]
 8008dc6:	f001 feaf 	bl	800ab28 <tcp_enqueue_flags>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d004      	beq.n	8008de0 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	6978      	ldr	r0, [r7, #20]
 8008dda:	f7fe fb51 	bl	8007480 <tcp_abandon>
      return;
 8008dde:	e007      	b.n	8008df0 <tcp_listen_input+0x194>
    tcp_output(npcb);
 8008de0:	6978      	ldr	r0, [r7, #20]
 8008de2:	f001 fff9 	bl	800add8 <tcp_output>
  return;
 8008de6:	bf00      	nop
 8008de8:	e001      	b.n	8008dee <tcp_listen_input+0x192>
    return;
 8008dea:	bf00      	nop
 8008dec:	e000      	b.n	8008df0 <tcp_listen_input+0x194>
  return;
 8008dee:	bf00      	nop
}
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20000504 	.word	0x20000504
 8008dfc:	200004fc 	.word	0x200004fc
 8008e00:	20000502 	.word	0x20000502
 8008e04:	200004f8 	.word	0x200004f8
 8008e08:	200004e8 	.word	0x200004e8
 8008e0c:	20004670 	.word	0x20004670
 8008e10:	20004674 	.word	0x20004674
 8008e14:	20004660 	.word	0x20004660
 8008e18:	20007b90 	.word	0x20007b90
 8008e1c:	20007b8c 	.word	0x20007b8c

08008e20 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008e28:	4b29      	ldr	r3, [pc, #164]	; (8008ed0 <tcp_timewait_input+0xb0>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d147      	bne.n	8008ec4 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008e34:	4b26      	ldr	r3, [pc, #152]	; (8008ed0 <tcp_timewait_input+0xb0>)
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d027      	beq.n	8008e90 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008e40:	4b24      	ldr	r3, [pc, #144]	; (8008ed4 <tcp_timewait_input+0xb4>)
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	db2a      	blt.n	8008ea4 <tcp_timewait_input+0x84>
 8008e4e:	4b21      	ldr	r3, [pc, #132]	; (8008ed4 <tcp_timewait_input+0xb4>)
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008e5a:	440b      	add	r3, r1
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	dc20      	bgt.n	8008ea4 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e62:	4b1d      	ldr	r3, [pc, #116]	; (8008ed8 <tcp_timewait_input+0xb8>)
 8008e64:	6818      	ldr	r0, [r3, #0]
 8008e66:	4b1d      	ldr	r3, [pc, #116]	; (8008edc <tcp_timewait_input+0xbc>)
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	4b19      	ldr	r3, [pc, #100]	; (8008ed4 <tcp_timewait_input+0xb4>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e72:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <tcp_timewait_input+0xc0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e76:	885b      	ldrh	r3, [r3, #2]
 8008e78:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e7a:	4a19      	ldr	r2, [pc, #100]	; (8008ee0 <tcp_timewait_input+0xc0>)
 8008e7c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e7e:	8812      	ldrh	r2, [r2, #0]
 8008e80:	b292      	uxth	r2, r2
 8008e82:	9201      	str	r2, [sp, #4]
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	4b17      	ldr	r3, [pc, #92]	; (8008ee4 <tcp_timewait_input+0xc4>)
 8008e88:	4a17      	ldr	r2, [pc, #92]	; (8008ee8 <tcp_timewait_input+0xc8>)
 8008e8a:	f002 fa2f 	bl	800b2ec <tcp_rst>
      return;
 8008e8e:	e01c      	b.n	8008eca <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8008e90:	4b0f      	ldr	r3, [pc, #60]	; (8008ed0 <tcp_timewait_input+0xb0>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008e9c:	4b13      	ldr	r3, [pc, #76]	; (8008eec <tcp_timewait_input+0xcc>)
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008ea4:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <tcp_timewait_input+0xbc>)
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00d      	beq.n	8008ec8 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	7e9b      	ldrb	r3, [r3, #26]
 8008eb0:	f043 0302 	orr.w	r3, r3, #2
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f001 ff8c 	bl	800add8 <tcp_output>
  }
  return;
 8008ec0:	bf00      	nop
 8008ec2:	e001      	b.n	8008ec8 <tcp_timewait_input+0xa8>
    return;
 8008ec4:	bf00      	nop
 8008ec6:	e000      	b.n	8008eca <tcp_timewait_input+0xaa>
  return;
 8008ec8:	bf00      	nop
}
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20000504 	.word	0x20000504
 8008ed4:	200004f8 	.word	0x200004f8
 8008ed8:	200004fc 	.word	0x200004fc
 8008edc:	20000502 	.word	0x20000502
 8008ee0:	200004e8 	.word	0x200004e8
 8008ee4:	20004670 	.word	0x20004670
 8008ee8:	20004674 	.word	0x20004674
 8008eec:	20007b94 	.word	0x20007b94

08008ef0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	; 0x28
 8008ef4:	af02      	add	r7, sp, #8
 8008ef6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008f00:	4ba4      	ldr	r3, [pc, #656]	; (8009194 <tcp_process+0x2a4>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	f003 0304 	and.w	r3, r3, #4
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d04e      	beq.n	8008faa <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	7d1b      	ldrb	r3, [r3, #20]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d108      	bne.n	8008f26 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f18:	4b9f      	ldr	r3, [pc, #636]	; (8009198 <tcp_process+0x2a8>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d123      	bne.n	8008f68 <tcp_process+0x78>
        acceptable = 1;
 8008f20:	2301      	movs	r3, #1
 8008f22:	76fb      	strb	r3, [r7, #27]
 8008f24:	e020      	b.n	8008f68 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f2a:	4b9c      	ldr	r3, [pc, #624]	; (800919c <tcp_process+0x2ac>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d102      	bne.n	8008f38 <tcp_process+0x48>
        acceptable = 1;
 8008f32:	2301      	movs	r3, #1
 8008f34:	76fb      	strb	r3, [r7, #27]
 8008f36:	e017      	b.n	8008f68 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f38:	4b98      	ldr	r3, [pc, #608]	; (800919c <tcp_process+0x2ac>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	db10      	blt.n	8008f68 <tcp_process+0x78>
 8008f46:	4b95      	ldr	r3, [pc, #596]	; (800919c <tcp_process+0x2ac>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f52:	440b      	add	r3, r1
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dc06      	bgt.n	8008f68 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7e9b      	ldrb	r3, [r3, #26]
 8008f5e:	f043 0302 	orr.w	r3, r3, #2
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008f68:	7efb      	ldrb	r3, [r7, #27]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d01b      	beq.n	8008fa6 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	7d1b      	ldrb	r3, [r3, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d106      	bne.n	8008f84 <tcp_process+0x94>
 8008f76:	4b8a      	ldr	r3, [pc, #552]	; (80091a0 <tcp_process+0x2b0>)
 8008f78:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008f7c:	4989      	ldr	r1, [pc, #548]	; (80091a4 <tcp_process+0x2b4>)
 8008f7e:	488a      	ldr	r0, [pc, #552]	; (80091a8 <tcp_process+0x2b8>)
 8008f80:	f005 fb76 	bl	800e670 <iprintf>
      recv_flags |= TF_RESET;
 8008f84:	4b89      	ldr	r3, [pc, #548]	; (80091ac <tcp_process+0x2bc>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	f043 0308 	orr.w	r3, r3, #8
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	4b87      	ldr	r3, [pc, #540]	; (80091ac <tcp_process+0x2bc>)
 8008f90:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	7e9b      	ldrb	r3, [r3, #26]
 8008f96:	f023 0301 	bic.w	r3, r3, #1
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8008fa0:	f06f 030d 	mvn.w	r3, #13
 8008fa4:	e34d      	b.n	8009642 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e34b      	b.n	8009642 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008faa:	4b7a      	ldr	r3, [pc, #488]	; (8009194 <tcp_process+0x2a4>)
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d010      	beq.n	8008fd8 <tcp_process+0xe8>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	7d1b      	ldrb	r3, [r3, #20]
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d00c      	beq.n	8008fd8 <tcp_process+0xe8>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	7d1b      	ldrb	r3, [r3, #20]
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d008      	beq.n	8008fd8 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	7e9b      	ldrb	r3, [r3, #26]
 8008fca:	f043 0302 	orr.w	r3, r3, #2
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	e334      	b.n	8009642 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	7e9b      	ldrb	r3, [r3, #26]
 8008fdc:	f003 0310 	and.w	r3, r3, #16
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d103      	bne.n	8008fec <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008fe4:	4b72      	ldr	r3, [pc, #456]	; (80091b0 <tcp_process+0x2c0>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 fbdf 	bl	800a7b8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	7d1b      	ldrb	r3, [r3, #20]
 8008ffe:	3b02      	subs	r3, #2
 8009000:	2b07      	cmp	r3, #7
 8009002:	f200 830e 	bhi.w	8009622 <tcp_process+0x732>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <tcp_process+0x11c>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	0800902d 	.word	0x0800902d
 8009010:	08009225 	.word	0x08009225
 8009014:	0800937d 	.word	0x0800937d
 8009018:	080093a7 	.word	0x080093a7
 800901c:	080094d1 	.word	0x080094d1
 8009020:	0800937d 	.word	0x0800937d
 8009024:	0800955d 	.word	0x0800955d
 8009028:	080095ed 	.word	0x080095ed
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800902c:	4b59      	ldr	r3, [pc, #356]	; (8009194 <tcp_process+0x2a4>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	f003 0310 	and.w	r3, r3, #16
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80cb 	beq.w	80091d0 <tcp_process+0x2e0>
 800903a:	4b56      	ldr	r3, [pc, #344]	; (8009194 <tcp_process+0x2a4>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 80c4 	beq.w	80091d0 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800904c:	1c5a      	adds	r2, r3, #1
 800904e:	4b52      	ldr	r3, [pc, #328]	; (8009198 <tcp_process+0x2a8>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	f040 80bc 	bne.w	80091d0 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8009058:	4b50      	ldr	r3, [pc, #320]	; (800919c <tcp_process+0x2ac>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800906a:	4b4b      	ldr	r3, [pc, #300]	; (8009198 <tcp_process+0x2a8>)
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8009072:	4b50      	ldr	r3, [pc, #320]	; (80091b4 <tcp_process+0x2c4>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	89db      	ldrh	r3, [r3, #14]
 8009078:	b29a      	uxth	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800908c:	4b43      	ldr	r3, [pc, #268]	; (800919c <tcp_process+0x2ac>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	1e5a      	subs	r2, r3, #1
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2204      	movs	r2, #4
 800909a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3304      	adds	r3, #4
 80090a4:	4619      	mov	r1, r3
 80090a6:	4610      	mov	r0, r2
 80090a8:	f7ff f95c 	bl	8008364 <tcp_eff_send_mss_impl>
 80090ac:	4603      	mov	r3, r0
 80090ae:	461a      	mov	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	f241 121c 	movw	r2, #4380	; 0x111c
 80090be:	429a      	cmp	r2, r3
 80090c0:	bf38      	it	cc
 80090c2:	461a      	movcc	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4293      	cmp	r3, r2
 80090cc:	bf28      	it	cs
 80090ce:	4613      	movcs	r3, r2
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d106      	bne.n	80090f0 <tcp_process+0x200>
 80090e2:	4b2f      	ldr	r3, [pc, #188]	; (80091a0 <tcp_process+0x2b0>)
 80090e4:	f240 321a 	movw	r2, #794	; 0x31a
 80090e8:	4933      	ldr	r1, [pc, #204]	; (80091b8 <tcp_process+0x2c8>)
 80090ea:	482f      	ldr	r0, [pc, #188]	; (80091a8 <tcp_process+0x2b8>)
 80090ec:	f005 fac0 	bl	800e670 <iprintf>
      --pcb->snd_queuelen;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090f6:	3b01      	subs	r3, #1
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009104:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d111      	bne.n	8009130 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009110:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d106      	bne.n	8009126 <tcp_process+0x236>
 8009118:	4b21      	ldr	r3, [pc, #132]	; (80091a0 <tcp_process+0x2b0>)
 800911a:	f240 3222 	movw	r2, #802	; 0x322
 800911e:	4927      	ldr	r1, [pc, #156]	; (80091bc <tcp_process+0x2cc>)
 8009120:	4821      	ldr	r0, [pc, #132]	; (80091a8 <tcp_process+0x2b8>)
 8009122:	f005 faa5 	bl	800e670 <iprintf>
        pcb->unsent = rseg->next;
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	669a      	str	r2, [r3, #104]	; 0x68
 800912e:	e003      	b.n	8009138 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8009138:	69f8      	ldr	r0, [r7, #28]
 800913a:	f7fe fea8 	bl	8007e8e <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009142:	2b00      	cmp	r3, #0
 8009144:	d104      	bne.n	8009150 <tcp_process+0x260>
        pcb->rtime = -1;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800914c:	861a      	strh	r2, [r3, #48]	; 0x30
 800914e:	e006      	b.n	800915e <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00a      	beq.n	800917e <tcp_process+0x28e>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	6910      	ldr	r0, [r2, #16]
 8009172:	2200      	movs	r2, #0
 8009174:	6879      	ldr	r1, [r7, #4]
 8009176:	4798      	blx	r3
 8009178:	4603      	mov	r3, r0
 800917a:	76bb      	strb	r3, [r7, #26]
 800917c:	e001      	b.n	8009182 <tcp_process+0x292>
 800917e:	2300      	movs	r3, #0
 8009180:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8009182:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009186:	f113 0f0d 	cmn.w	r3, #13
 800918a:	d119      	bne.n	80091c0 <tcp_process+0x2d0>
        return ERR_ABRT;
 800918c:	f06f 030c 	mvn.w	r3, #12
 8009190:	e257      	b.n	8009642 <tcp_process+0x752>
 8009192:	bf00      	nop
 8009194:	20000504 	.word	0x20000504
 8009198:	200004fc 	.word	0x200004fc
 800919c:	200004f8 	.word	0x200004f8
 80091a0:	08010364 	.word	0x08010364
 80091a4:	0801051c 	.word	0x0801051c
 80091a8:	080103a8 	.word	0x080103a8
 80091ac:	20000505 	.word	0x20000505
 80091b0:	20007b94 	.word	0x20007b94
 80091b4:	200004e8 	.word	0x200004e8
 80091b8:	0801053c 	.word	0x0801053c
 80091bc:	08010554 	.word	0x08010554
      }
      tcp_ack_now(pcb);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	7e9b      	ldrb	r3, [r3, #26]
 80091c4:	f043 0302 	orr.w	r3, r3, #2
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80091ce:	e22a      	b.n	8009626 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 80091d0:	4b9f      	ldr	r3, [pc, #636]	; (8009450 <tcp_process+0x560>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f003 0310 	and.w	r3, r3, #16
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 8224 	beq.w	8009626 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80091de:	4b9d      	ldr	r3, [pc, #628]	; (8009454 <tcp_process+0x564>)
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	4b9d      	ldr	r3, [pc, #628]	; (8009458 <tcp_process+0x568>)
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	4b9c      	ldr	r3, [pc, #624]	; (800945c <tcp_process+0x56c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091ee:	4b9c      	ldr	r3, [pc, #624]	; (8009460 <tcp_process+0x570>)
 80091f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80091f2:	885b      	ldrh	r3, [r3, #2]
 80091f4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091f6:	4a9a      	ldr	r2, [pc, #616]	; (8009460 <tcp_process+0x570>)
 80091f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80091fa:	8812      	ldrh	r2, [r2, #0]
 80091fc:	b292      	uxth	r2, r2
 80091fe:	9201      	str	r2, [sp, #4]
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	4b98      	ldr	r3, [pc, #608]	; (8009464 <tcp_process+0x574>)
 8009204:	4a98      	ldr	r2, [pc, #608]	; (8009468 <tcp_process+0x578>)
 8009206:	f002 f871 	bl	800b2ec <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009210:	2b05      	cmp	r3, #5
 8009212:	f200 8208 	bhi.w	8009626 <tcp_process+0x736>
        pcb->rtime = 0;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f002 f8db 	bl	800b3d8 <tcp_rexmit_rto>
    break;
 8009222:	e200      	b.n	8009626 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8009224:	4b8a      	ldr	r3, [pc, #552]	; (8009450 <tcp_process+0x560>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	f003 0310 	and.w	r3, r3, #16
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 8091 	beq.w	8009354 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009232:	4b88      	ldr	r3, [pc, #544]	; (8009454 <tcp_process+0x564>)
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	3b01      	subs	r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	db71      	blt.n	8009326 <tcp_process+0x436>
 8009242:	4b84      	ldr	r3, [pc, #528]	; (8009454 <tcp_process+0x564>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	2b00      	cmp	r3, #0
 800924e:	dc6a      	bgt.n	8009326 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2204      	movs	r2, #4
 8009254:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00b      	beq.n	8009276 <tcp_process+0x386>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d106      	bne.n	8009276 <tcp_process+0x386>
 8009268:	4b80      	ldr	r3, [pc, #512]	; (800946c <tcp_process+0x57c>)
 800926a:	f240 3251 	movw	r2, #849	; 0x351
 800926e:	4980      	ldr	r1, [pc, #512]	; (8009470 <tcp_process+0x580>)
 8009270:	4880      	ldr	r0, [pc, #512]	; (8009474 <tcp_process+0x584>)
 8009272:	f005 f9fd 	bl	800e670 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800927a:	2b00      	cmp	r3, #0
 800927c:	d102      	bne.n	8009284 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800927e:	23fa      	movs	r3, #250	; 0xfa
 8009280:	76bb      	strb	r3, [r7, #26]
 8009282:	e011      	b.n	80092a8 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <tcp_process+0x3b4>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6910      	ldr	r0, [r2, #16]
 8009298:	2200      	movs	r2, #0
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4798      	blx	r3
 800929e:	4603      	mov	r3, r0
 80092a0:	76bb      	strb	r3, [r7, #26]
 80092a2:	e001      	b.n	80092a8 <tcp_process+0x3b8>
 80092a4:	23f0      	movs	r3, #240	; 0xf0
 80092a6:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80092a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80092b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80092b4:	f113 0f0d 	cmn.w	r3, #13
 80092b8:	d002      	beq.n	80092c0 <tcp_process+0x3d0>
            tcp_abort(pcb);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7fe f992 	bl	80075e4 <tcp_abort>
          }
          return ERR_ABRT;
 80092c0:	f06f 030c 	mvn.w	r3, #12
 80092c4:	e1bd      	b.n	8009642 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fa42 	bl	8009750 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80092cc:	4b6a      	ldr	r3, [pc, #424]	; (8009478 <tcp_process+0x588>)
 80092ce:	881b      	ldrh	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d005      	beq.n	80092e0 <tcp_process+0x3f0>
          recv_acked--;
 80092d4:	4b68      	ldr	r3, [pc, #416]	; (8009478 <tcp_process+0x588>)
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	3b01      	subs	r3, #1
 80092da:	b29a      	uxth	r2, r3
 80092dc:	4b66      	ldr	r3, [pc, #408]	; (8009478 <tcp_process+0x588>)
 80092de:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80092ea:	429a      	cmp	r2, r3
 80092ec:	bf38      	it	cc
 80092ee:	461a      	movcc	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4293      	cmp	r3, r2
 80092f8:	bf28      	it	cs
 80092fa:	4613      	movcs	r3, r2
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8009304:	4b5d      	ldr	r3, [pc, #372]	; (800947c <tcp_process+0x58c>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	f003 0320 	and.w	r3, r3, #32
 800930c:	2b00      	cmp	r3, #0
 800930e:	d034      	beq.n	800937a <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	7e9b      	ldrb	r3, [r3, #26]
 8009314:	f043 0302 	orr.w	r3, r3, #2
 8009318:	b2da      	uxtb	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2207      	movs	r2, #7
 8009322:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8009324:	e029      	b.n	800937a <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009326:	4b4b      	ldr	r3, [pc, #300]	; (8009454 <tcp_process+0x564>)
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	4b4b      	ldr	r3, [pc, #300]	; (8009458 <tcp_process+0x568>)
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	4b4a      	ldr	r3, [pc, #296]	; (800945c <tcp_process+0x56c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009336:	4b4a      	ldr	r3, [pc, #296]	; (8009460 <tcp_process+0x570>)
 8009338:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800933a:	885b      	ldrh	r3, [r3, #2]
 800933c:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800933e:	4a48      	ldr	r2, [pc, #288]	; (8009460 <tcp_process+0x570>)
 8009340:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009342:	8812      	ldrh	r2, [r2, #0]
 8009344:	b292      	uxth	r2, r2
 8009346:	9201      	str	r2, [sp, #4]
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	4b46      	ldr	r3, [pc, #280]	; (8009464 <tcp_process+0x574>)
 800934c:	4a46      	ldr	r2, [pc, #280]	; (8009468 <tcp_process+0x578>)
 800934e:	f001 ffcd 	bl	800b2ec <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8009352:	e16a      	b.n	800962a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009354:	4b3e      	ldr	r3, [pc, #248]	; (8009450 <tcp_process+0x560>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 8164 	beq.w	800962a <tcp_process+0x73a>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	1e5a      	subs	r2, r3, #1
 8009368:	4b3c      	ldr	r3, [pc, #240]	; (800945c <tcp_process+0x56c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	f040 815c 	bne.w	800962a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f002 f866 	bl	800b444 <tcp_rexmit>
    break;
 8009378:	e157      	b.n	800962a <tcp_process+0x73a>
 800937a:	e156      	b.n	800962a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f9e7 	bl	8009750 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009382:	4b3e      	ldr	r3, [pc, #248]	; (800947c <tcp_process+0x58c>)
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 814f 	beq.w	800962e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	7e9b      	ldrb	r3, [r3, #26]
 8009394:	f043 0302 	orr.w	r3, r3, #2
 8009398:	b2da      	uxtb	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2207      	movs	r2, #7
 80093a2:	751a      	strb	r2, [r3, #20]
    }
    break;
 80093a4:	e143      	b.n	800962e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f9d2 	bl	8009750 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80093ac:	4b33      	ldr	r3, [pc, #204]	; (800947c <tcp_process+0x58c>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	f003 0320 	and.w	r3, r3, #32
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d074      	beq.n	80094a2 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093b8:	4b25      	ldr	r3, [pc, #148]	; (8009450 <tcp_process+0x560>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	f003 0310 	and.w	r3, r3, #16
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d063      	beq.n	800948c <tcp_process+0x59c>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093c8:	4b22      	ldr	r3, [pc, #136]	; (8009454 <tcp_process+0x564>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d15d      	bne.n	800948c <tcp_process+0x59c>
          pcb->unsent == NULL) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d159      	bne.n	800948c <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7e9b      	ldrb	r3, [r3, #26]
 80093dc:	f043 0302 	orr.w	r3, r3, #2
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7fe fee6 	bl	80081b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80093ec:	4b24      	ldr	r3, [pc, #144]	; (8009480 <tcp_process+0x590>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d105      	bne.n	8009402 <tcp_process+0x512>
 80093f6:	4b22      	ldr	r3, [pc, #136]	; (8009480 <tcp_process+0x590>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	4a20      	ldr	r2, [pc, #128]	; (8009480 <tcp_process+0x590>)
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	e013      	b.n	800942a <tcp_process+0x53a>
 8009402:	4b1f      	ldr	r3, [pc, #124]	; (8009480 <tcp_process+0x590>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	617b      	str	r3, [r7, #20]
 8009408:	e00c      	b.n	8009424 <tcp_process+0x534>
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	429a      	cmp	r2, r3
 8009412:	d104      	bne.n	800941e <tcp_process+0x52e>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	60da      	str	r2, [r3, #12]
 800941c:	e005      	b.n	800942a <tcp_process+0x53a>
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	617b      	str	r3, [r7, #20]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1ef      	bne.n	800940a <tcp_process+0x51a>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	60da      	str	r2, [r3, #12]
 8009430:	4b14      	ldr	r3, [pc, #80]	; (8009484 <tcp_process+0x594>)
 8009432:	2201      	movs	r2, #1
 8009434:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	220a      	movs	r2, #10
 800943a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800943c:	4b12      	ldr	r3, [pc, #72]	; (8009488 <tcp_process+0x598>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	60da      	str	r2, [r3, #12]
 8009444:	4a10      	ldr	r2, [pc, #64]	; (8009488 <tcp_process+0x598>)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6013      	str	r3, [r2, #0]
 800944a:	f002 f9a1 	bl	800b790 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800944e:	e0f0      	b.n	8009632 <tcp_process+0x742>
 8009450:	20000504 	.word	0x20000504
 8009454:	200004fc 	.word	0x200004fc
 8009458:	20000502 	.word	0x20000502
 800945c:	200004f8 	.word	0x200004f8
 8009460:	200004e8 	.word	0x200004e8
 8009464:	20004670 	.word	0x20004670
 8009468:	20004674 	.word	0x20004674
 800946c:	08010364 	.word	0x08010364
 8009470:	08010568 	.word	0x08010568
 8009474:	080103a8 	.word	0x080103a8
 8009478:	20000500 	.word	0x20000500
 800947c:	20000505 	.word	0x20000505
 8009480:	20007b90 	.word	0x20007b90
 8009484:	20007b8c 	.word	0x20007b8c
 8009488:	20007ba0 	.word	0x20007ba0
        tcp_ack_now(pcb);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	7e9b      	ldrb	r3, [r3, #26]
 8009490:	f043 0302 	orr.w	r3, r3, #2
 8009494:	b2da      	uxtb	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2208      	movs	r2, #8
 800949e:	751a      	strb	r2, [r3, #20]
    break;
 80094a0:	e0c7      	b.n	8009632 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80094a2:	4b6a      	ldr	r3, [pc, #424]	; (800964c <tcp_process+0x75c>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 0310 	and.w	r3, r3, #16
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 80c1 	beq.w	8009632 <tcp_process+0x742>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094b4:	4b66      	ldr	r3, [pc, #408]	; (8009650 <tcp_process+0x760>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	f040 80ba 	bne.w	8009632 <tcp_process+0x742>
               pcb->unsent == NULL) {
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f040 80b5 	bne.w	8009632 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2206      	movs	r2, #6
 80094cc:	751a      	strb	r2, [r3, #20]
    break;
 80094ce:	e0b0      	b.n	8009632 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f93d 	bl	8009750 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80094d6:	4b5f      	ldr	r3, [pc, #380]	; (8009654 <tcp_process+0x764>)
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	f003 0320 	and.w	r3, r3, #32
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 80a9 	beq.w	8009636 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	7e9b      	ldrb	r3, [r3, #26]
 80094e8:	f043 0302 	orr.w	r3, r3, #2
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fe fe60 	bl	80081b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80094f8:	4b57      	ldr	r3, [pc, #348]	; (8009658 <tcp_process+0x768>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d105      	bne.n	800950e <tcp_process+0x61e>
 8009502:	4b55      	ldr	r3, [pc, #340]	; (8009658 <tcp_process+0x768>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	4a53      	ldr	r2, [pc, #332]	; (8009658 <tcp_process+0x768>)
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	e013      	b.n	8009536 <tcp_process+0x646>
 800950e:	4b52      	ldr	r3, [pc, #328]	; (8009658 <tcp_process+0x768>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	613b      	str	r3, [r7, #16]
 8009514:	e00c      	b.n	8009530 <tcp_process+0x640>
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	429a      	cmp	r2, r3
 800951e:	d104      	bne.n	800952a <tcp_process+0x63a>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68da      	ldr	r2, [r3, #12]
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	60da      	str	r2, [r3, #12]
 8009528:	e005      	b.n	8009536 <tcp_process+0x646>
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	613b      	str	r3, [r7, #16]
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1ef      	bne.n	8009516 <tcp_process+0x626>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	60da      	str	r2, [r3, #12]
 800953c:	4b47      	ldr	r3, [pc, #284]	; (800965c <tcp_process+0x76c>)
 800953e:	2201      	movs	r2, #1
 8009540:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	220a      	movs	r2, #10
 8009546:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009548:	4b45      	ldr	r3, [pc, #276]	; (8009660 <tcp_process+0x770>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	60da      	str	r2, [r3, #12]
 8009550:	4a43      	ldr	r2, [pc, #268]	; (8009660 <tcp_process+0x770>)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	f002 f91b 	bl	800b790 <tcp_timer_needed>
    }
    break;
 800955a:	e06c      	b.n	8009636 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f8f7 	bl	8009750 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009562:	4b3a      	ldr	r3, [pc, #232]	; (800964c <tcp_process+0x75c>)
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	f003 0310 	and.w	r3, r3, #16
 800956a:	2b00      	cmp	r3, #0
 800956c:	d065      	beq.n	800963a <tcp_process+0x74a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009572:	4b37      	ldr	r3, [pc, #220]	; (8009650 <tcp_process+0x760>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d15f      	bne.n	800963a <tcp_process+0x74a>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800957e:	2b00      	cmp	r3, #0
 8009580:	d15b      	bne.n	800963a <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7fe fe18 	bl	80081b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009588:	4b33      	ldr	r3, [pc, #204]	; (8009658 <tcp_process+0x768>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	429a      	cmp	r2, r3
 8009590:	d105      	bne.n	800959e <tcp_process+0x6ae>
 8009592:	4b31      	ldr	r3, [pc, #196]	; (8009658 <tcp_process+0x768>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	4a2f      	ldr	r2, [pc, #188]	; (8009658 <tcp_process+0x768>)
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	e013      	b.n	80095c6 <tcp_process+0x6d6>
 800959e:	4b2e      	ldr	r3, [pc, #184]	; (8009658 <tcp_process+0x768>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	e00c      	b.n	80095c0 <tcp_process+0x6d0>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d104      	bne.n	80095ba <tcp_process+0x6ca>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68da      	ldr	r2, [r3, #12]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	60da      	str	r2, [r3, #12]
 80095b8:	e005      	b.n	80095c6 <tcp_process+0x6d6>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1ef      	bne.n	80095a6 <tcp_process+0x6b6>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	60da      	str	r2, [r3, #12]
 80095cc:	4b23      	ldr	r3, [pc, #140]	; (800965c <tcp_process+0x76c>)
 80095ce:	2201      	movs	r2, #1
 80095d0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	220a      	movs	r2, #10
 80095d6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80095d8:	4b21      	ldr	r3, [pc, #132]	; (8009660 <tcp_process+0x770>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	60da      	str	r2, [r3, #12]
 80095e0:	4a1f      	ldr	r2, [pc, #124]	; (8009660 <tcp_process+0x770>)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	f002 f8d3 	bl	800b790 <tcp_timer_needed>
    }
    break;
 80095ea:	e026      	b.n	800963a <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f8af 	bl	8009750 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80095f2:	4b16      	ldr	r3, [pc, #88]	; (800964c <tcp_process+0x75c>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	f003 0310 	and.w	r3, r3, #16
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d01f      	beq.n	800963e <tcp_process+0x74e>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009602:	4b13      	ldr	r3, [pc, #76]	; (8009650 <tcp_process+0x760>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d119      	bne.n	800963e <tcp_process+0x74e>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800960e:	2b00      	cmp	r3, #0
 8009610:	d115      	bne.n	800963e <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8009612:	4b10      	ldr	r3, [pc, #64]	; (8009654 <tcp_process+0x764>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	f043 0310 	orr.w	r3, r3, #16
 800961a:	b2da      	uxtb	r2, r3
 800961c:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <tcp_process+0x764>)
 800961e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8009620:	e00d      	b.n	800963e <tcp_process+0x74e>
  default:
    break;
 8009622:	bf00      	nop
 8009624:	e00c      	b.n	8009640 <tcp_process+0x750>
    break;
 8009626:	bf00      	nop
 8009628:	e00a      	b.n	8009640 <tcp_process+0x750>
    break;
 800962a:	bf00      	nop
 800962c:	e008      	b.n	8009640 <tcp_process+0x750>
    break;
 800962e:	bf00      	nop
 8009630:	e006      	b.n	8009640 <tcp_process+0x750>
    break;
 8009632:	bf00      	nop
 8009634:	e004      	b.n	8009640 <tcp_process+0x750>
    break;
 8009636:	bf00      	nop
 8009638:	e002      	b.n	8009640 <tcp_process+0x750>
    break;
 800963a:	bf00      	nop
 800963c:	e000      	b.n	8009640 <tcp_process+0x750>
    break;
 800963e:	bf00      	nop
  }
  return ERR_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3720      	adds	r7, #32
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000504 	.word	0x20000504
 8009650:	200004fc 	.word	0x200004fc
 8009654:	20000505 	.word	0x20000505
 8009658:	20007b90 	.word	0x20007b90
 800965c:	20007b8c 	.word	0x20007b8c
 8009660:	20007ba0 	.word	0x20007ba0

08009664 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009664:	b590      	push	{r4, r7, lr}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	899b      	ldrh	r3, [r3, #12]
 8009674:	b29b      	uxth	r3, r3
 8009676:	4618      	mov	r0, r3
 8009678:	f7fc f8fb 	bl	8005872 <lwip_htons>
 800967c:	4603      	mov	r3, r0
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d027      	beq.n	80096d6 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009686:	6838      	ldr	r0, [r7, #0]
 8009688:	f7fe fbed 	bl	8007e66 <tcp_segs_free>
    next = NULL;
 800968c:	2300      	movs	r3, #0
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	e055      	b.n	800973e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	899b      	ldrh	r3, [r3, #12]
 8009698:	b29b      	uxth	r3, r3
 800969a:	4618      	mov	r0, r3
 800969c:	f7fc f8e9 	bl	8005872 <lwip_htons>
 80096a0:	4603      	mov	r3, r0
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00d      	beq.n	80096c6 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	899b      	ldrh	r3, [r3, #12]
 80096b0:	b29c      	uxth	r4, r3
 80096b2:	2001      	movs	r0, #1
 80096b4:	f7fc f8dd 	bl	8005872 <lwip_htons>
 80096b8:	4603      	mov	r3, r0
 80096ba:	461a      	mov	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	4322      	orrs	r2, r4
 80096c2:	b292      	uxth	r2, r2
 80096c4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f7fe fbdc 	bl	8007e8e <tcp_seg_free>
    while (next &&
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00e      	beq.n	80096fa <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	891b      	ldrh	r3, [r3, #8]
 80096e0:	461a      	mov	r2, r3
 80096e2:	4b1a      	ldr	r3, [pc, #104]	; (800974c <tcp_oos_insert_segment+0xe8>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	441a      	add	r2, r3
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	8909      	ldrh	r1, [r1, #8]
 80096f2:	440b      	add	r3, r1
 80096f4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	dacb      	bge.n	8009692 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01e      	beq.n	800973e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	891b      	ldrh	r3, [r3, #8]
 8009704:	461a      	mov	r2, r3
 8009706:	4b11      	ldr	r3, [pc, #68]	; (800974c <tcp_oos_insert_segment+0xe8>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	441a      	add	r2, r3
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009714:	2b00      	cmp	r3, #0
 8009716:	dd12      	ble.n	800973e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	b29a      	uxth	r2, r3
 8009720:	4b0a      	ldr	r3, [pc, #40]	; (800974c <tcp_oos_insert_segment+0xe8>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	b29b      	uxth	r3, r3
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	b29a      	uxth	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	891b      	ldrh	r3, [r3, #8]
 8009736:	4619      	mov	r1, r3
 8009738:	4610      	mov	r0, r2
 800973a:	f7fd f84b 	bl	80067d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	683a      	ldr	r2, [r7, #0]
 8009742:	601a      	str	r2, [r3, #0]
}
 8009744:	bf00      	nop
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	bd90      	pop	{r4, r7, pc}
 800974c:	200004f8 	.word	0x200004f8

08009750 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009752:	b08d      	sub	sp, #52	; 0x34
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	7d1b      	ldrb	r3, [r3, #20]
 8009760:	2b03      	cmp	r3, #3
 8009762:	d806      	bhi.n	8009772 <tcp_receive+0x22>
 8009764:	4ba6      	ldr	r3, [pc, #664]	; (8009a00 <tcp_receive+0x2b0>)
 8009766:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800976a:	49a6      	ldr	r1, [pc, #664]	; (8009a04 <tcp_receive+0x2b4>)
 800976c:	48a6      	ldr	r0, [pc, #664]	; (8009a08 <tcp_receive+0x2b8>)
 800976e:	f004 ff7f 	bl	800e670 <iprintf>

  if (flags & TCP_ACK) {
 8009772:	4ba6      	ldr	r3, [pc, #664]	; (8009a0c <tcp_receive+0x2bc>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f003 0310 	and.w	r3, r3, #16
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 82bf 	beq.w	8009cfe <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009786:	461a      	mov	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800978c:	4413      	add	r3, r2
 800978e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009794:	4b9e      	ldr	r3, [pc, #632]	; (8009a10 <tcp_receive+0x2c0>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	db1b      	blt.n	80097d6 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097a2:	4b9b      	ldr	r3, [pc, #620]	; (8009a10 <tcp_receive+0x2c0>)
 80097a4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d106      	bne.n	80097b8 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097ae:	4b99      	ldr	r3, [pc, #612]	; (8009a14 <tcp_receive+0x2c4>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	db0e      	blt.n	80097d6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097bc:	4b95      	ldr	r3, [pc, #596]	; (8009a14 <tcp_receive+0x2c4>)
 80097be:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d141      	bne.n	8009848 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80097c4:	4b94      	ldr	r3, [pc, #592]	; (8009a18 <tcp_receive+0x2c8>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	89db      	ldrh	r3, [r3, #14]
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d938      	bls.n	8009848 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80097d6:	4b90      	ldr	r3, [pc, #576]	; (8009a18 <tcp_receive+0x2c8>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	89db      	ldrh	r3, [r3, #14]
 80097dc:	b29a      	uxth	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d205      	bcs.n	8009800 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8009800:	4b83      	ldr	r3, [pc, #524]	; (8009a10 <tcp_receive+0x2c0>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8009808:	4b82      	ldr	r3, [pc, #520]	; (8009a14 <tcp_receive+0x2c4>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10d      	bne.n	8009836 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009820:	2b00      	cmp	r3, #0
 8009822:	d111      	bne.n	8009848 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8009834:	e008      	b.n	8009848 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009848:	4b72      	ldr	r3, [pc, #456]	; (8009a14 <tcp_receive+0x2c4>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	dc53      	bgt.n	80098fe <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8009856:	4b71      	ldr	r3, [pc, #452]	; (8009a1c <tcp_receive+0x2cc>)
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d146      	bne.n	80098ec <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8009868:	4413      	add	r3, r2
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	429a      	cmp	r2, r3
 800986e:	d13d      	bne.n	80098ec <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009876:	2b00      	cmp	r3, #0
 8009878:	db38      	blt.n	80098ec <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800987e:	4b65      	ldr	r3, [pc, #404]	; (8009a14 <tcp_receive+0x2c4>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d132      	bne.n	80098ec <tcp_receive+0x19c>
              found_dupack = 1;
 8009886:	2301      	movs	r3, #1
 8009888:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009890:	2bff      	cmp	r3, #255	; 0xff
 8009892:	d007      	beq.n	80098a4 <tcp_receive+0x154>
                ++pcb->dupacks;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800989a:	3301      	adds	r3, #1
 800989c:	b2da      	uxtb	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	d916      	bls.n	80098dc <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098b8:	4413      	add	r3, r2
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d912      	bls.n	80098ec <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098d0:	4413      	add	r3, r2
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80098da:	e007      	b.n	80098ec <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d102      	bne.n	80098ec <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 fdfc 	bl	800b4e4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f040 8169 	bne.w	8009bc6 <tcp_receive+0x476>
        pcb->dupacks = 0;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098fc:	e163      	b.n	8009bc6 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80098fe:	4b45      	ldr	r3, [pc, #276]	; (8009a14 <tcp_receive+0x2c4>)
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	f2c0 8107 	blt.w	8009b1e <tcp_receive+0x3ce>
 8009910:	4b40      	ldr	r3, [pc, #256]	; (8009a14 <tcp_receive+0x2c4>)
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	f300 80ff 	bgt.w	8009b1e <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	7e9b      	ldrb	r3, [r3, #26]
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00c      	beq.n	8009946 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	7e9b      	ldrb	r3, [r3, #26]
 8009930:	f023 0304 	bic.w	r3, r3, #4
 8009934:	b2da      	uxtb	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009954:	10db      	asrs	r3, r3, #3
 8009956:	b21b      	sxth	r3, r3
 8009958:	b29a      	uxth	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009960:	b29b      	uxth	r3, r3
 8009962:	4413      	add	r3, r2
 8009964:	b29b      	uxth	r3, r3
 8009966:	b21a      	sxth	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009976:	4b27      	ldr	r3, [pc, #156]	; (8009a14 <tcp_receive+0x2c4>)
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	7d1b      	ldrb	r3, [r3, #20]
 8009982:	2b03      	cmp	r3, #3
 8009984:	f240 8094 	bls.w	8009ab0 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009994:	429a      	cmp	r2, r3
 8009996:	d216      	bcs.n	80099c6 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099a2:	4413      	add	r3, r2
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d97f      	bls.n	8009ab0 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099ba:	4413      	add	r3, r2
 80099bc:	b29a      	uxth	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80099c4:	e074      	b.n	8009ab0 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099d0:	4619      	mov	r1, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099d6:	fb03 f301 	mul.w	r3, r3, r1
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80099e0:	fb93 f3f1 	sdiv	r3, r3, r1
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	4413      	add	r3, r2
 80099e8:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099f0:	8a7a      	ldrh	r2, [r7, #18]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d95c      	bls.n	8009ab0 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	8a7a      	ldrh	r2, [r7, #18]
 80099fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80099fe:	e057      	b.n	8009ab0 <tcp_receive+0x360>
 8009a00:	08010364 	.word	0x08010364
 8009a04:	08010588 	.word	0x08010588
 8009a08:	080103a8 	.word	0x080103a8
 8009a0c:	20000504 	.word	0x20000504
 8009a10:	200004f8 	.word	0x200004f8
 8009a14:	200004fc 	.word	0x200004fc
 8009a18:	200004e8 	.word	0x200004e8
 8009a1c:	20000502 	.word	0x20000502
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a24:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8009a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fd f8d2 	bl	8006be4 <pbuf_clen>
 8009a40:	4603      	mov	r3, r0
 8009a42:	429c      	cmp	r4, r3
 8009a44:	d206      	bcs.n	8009a54 <tcp_receive+0x304>
 8009a46:	4b70      	ldr	r3, [pc, #448]	; (8009c08 <tcp_receive+0x4b8>)
 8009a48:	f240 429e 	movw	r2, #1182	; 0x49e
 8009a4c:	496f      	ldr	r1, [pc, #444]	; (8009c0c <tcp_receive+0x4bc>)
 8009a4e:	4870      	ldr	r0, [pc, #448]	; (8009c10 <tcp_receive+0x4c0>)
 8009a50:	f004 fe0e 	bl	800e670 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8009a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fd f8c3 	bl	8006be4 <pbuf_clen>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	461a      	mov	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a68:	1a9b      	subs	r3, r3, r2
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8009a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a74:	891a      	ldrh	r2, [r3, #8]
 8009a76:	4b67      	ldr	r3, [pc, #412]	; (8009c14 <tcp_receive+0x4c4>)
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	4b65      	ldr	r3, [pc, #404]	; (8009c14 <tcp_receive+0x4c4>)
 8009a80:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8009a82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a84:	f7fe fa03 	bl	8007e8e <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00e      	beq.n	8009ab0 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10a      	bne.n	8009ab0 <tcp_receive+0x360>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <tcp_receive+0x360>
 8009aa2:	4b59      	ldr	r3, [pc, #356]	; (8009c08 <tcp_receive+0x4b8>)
 8009aa4:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8009aa8:	495b      	ldr	r1, [pc, #364]	; (8009c18 <tcp_receive+0x4c8>)
 8009aaa:	4859      	ldr	r0, [pc, #356]	; (8009c10 <tcp_receive+0x4c0>)
 8009aac:	f004 fde0 	bl	800e670 <iprintf>
      while (pcb->unacked != NULL &&
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d022      	beq.n	8009afe <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fb fee4 	bl	800588e <lwip_htonl>
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009acc:	891b      	ldrh	r3, [r3, #8]
 8009ace:	461d      	mov	r5, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	899b      	ldrh	r3, [r3, #12]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fb fec9 	bl	8005872 <lwip_htons>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <tcp_receive+0x39e>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <tcp_receive+0x3a0>
 8009aee:	2300      	movs	r3, #0
 8009af0:	442b      	add	r3, r5
 8009af2:	18e2      	adds	r2, r4, r3
 8009af4:	4b49      	ldr	r3, [pc, #292]	; (8009c1c <tcp_receive+0x4cc>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	dd90      	ble.n	8009a20 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b0c:	861a      	strh	r2, [r3, #48]	; 0x30
 8009b0e:	e002      	b.n	8009b16 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	76da      	strb	r2, [r3, #27]
 8009b1c:	e002      	b.n	8009b24 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f001 f8fe 	bl	800ad20 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8009b24:	e04f      	b.n	8009bc6 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d103      	bne.n	8009b46 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8009b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fd f847 	bl	8006be4 <pbuf_clen>
 8009b56:	4603      	mov	r3, r0
 8009b58:	429c      	cmp	r4, r3
 8009b5a:	d206      	bcs.n	8009b6a <tcp_receive+0x41a>
 8009b5c:	4b2a      	ldr	r3, [pc, #168]	; (8009c08 <tcp_receive+0x4b8>)
 8009b5e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009b62:	492a      	ldr	r1, [pc, #168]	; (8009c0c <tcp_receive+0x4bc>)
 8009b64:	482a      	ldr	r0, [pc, #168]	; (8009c10 <tcp_receive+0x4c0>)
 8009b66:	f004 fd83 	bl	800e670 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8009b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fd f838 	bl	8006be4 <pbuf_clen>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	891a      	ldrh	r2, [r3, #8]
 8009b8c:	4b21      	ldr	r3, [pc, #132]	; (8009c14 <tcp_receive+0x4c4>)
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	4413      	add	r3, r2
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	4b1f      	ldr	r3, [pc, #124]	; (8009c14 <tcp_receive+0x4c4>)
 8009b96:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8009b98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b9a:	f7fe f978 	bl	8007e8e <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00e      	beq.n	8009bc6 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10a      	bne.n	8009bc6 <tcp_receive+0x476>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d106      	bne.n	8009bc6 <tcp_receive+0x476>
 8009bb8:	4b13      	ldr	r3, [pc, #76]	; (8009c08 <tcp_receive+0x4b8>)
 8009bba:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8009bbe:	4916      	ldr	r1, [pc, #88]	; (8009c18 <tcp_receive+0x4c8>)
 8009bc0:	4813      	ldr	r0, [pc, #76]	; (8009c10 <tcp_receive+0x4c0>)
 8009bc2:	f004 fd55 	bl	800e670 <iprintf>
    while (pcb->unsent != NULL &&
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d036      	beq.n	8009c3c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009bce:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <tcp_receive+0x4cc>)
 8009bd0:	681c      	ldr	r4, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fb fe57 	bl	800588e <lwip_htonl>
 8009be0:	4605      	mov	r5, r0
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009be6:	891b      	ldrh	r3, [r3, #8]
 8009be8:	461e      	mov	r6, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	899b      	ldrh	r3, [r3, #12]
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fb fe3c 	bl	8005872 <lwip_htons>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f003 0303 	and.w	r3, r3, #3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00d      	beq.n	8009c20 <tcp_receive+0x4d0>
 8009c04:	2301      	movs	r3, #1
 8009c06:	e00c      	b.n	8009c22 <tcp_receive+0x4d2>
 8009c08:	08010364 	.word	0x08010364
 8009c0c:	080105a4 	.word	0x080105a4
 8009c10:	080103a8 	.word	0x080103a8
 8009c14:	20000500 	.word	0x20000500
 8009c18:	080105cc 	.word	0x080105cc
 8009c1c:	200004fc 	.word	0x200004fc
 8009c20:	2300      	movs	r3, #0
 8009c22:	4433      	add	r3, r6
 8009c24:	442b      	add	r3, r5
 8009c26:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	db07      	blt.n	8009c3c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009c2c:	4b8d      	ldr	r3, [pc, #564]	; (8009e64 <tcp_receive+0x714>)
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f77f af75 	ble.w	8009b26 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009c42:	4b89      	ldr	r3, [pc, #548]	; (8009e68 <tcp_receive+0x718>)
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	4413      	add	r3, r2
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d052      	beq.n	8009cfe <tcp_receive+0x5ae>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c5c:	4b81      	ldr	r3, [pc, #516]	; (8009e64 <tcp_receive+0x714>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	da4b      	bge.n	8009cfe <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009c66:	4b81      	ldr	r3, [pc, #516]	; (8009e6c <tcp_receive+0x71c>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8009c78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009c80:	10db      	asrs	r3, r3, #3
 8009c82:	b21b      	sxth	r3, r3
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c96:	4413      	add	r3, r2
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	b21a      	sxth	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009ca0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	da03      	bge.n	8009cb0 <tcp_receive+0x560>
        m = -m;
 8009ca8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009caa:	425b      	negs	r3, r3
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8009cb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009cb8:	109b      	asrs	r3, r3, #2
 8009cba:	b21b      	sxth	r3, r3
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009cce:	4413      	add	r3, r2
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	b21a      	sxth	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009cde:	10db      	asrs	r3, r3, #3
 8009ce0:	b21b      	sxth	r3, r3
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	4413      	add	r3, r2
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	b21a      	sxth	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009cfe:	4b5c      	ldr	r3, [pc, #368]	; (8009e70 <tcp_receive+0x720>)
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 84f1 	beq.w	800a6ea <tcp_receive+0xf9a>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	7d1b      	ldrb	r3, [r3, #20]
 8009d0c:	2b06      	cmp	r3, #6
 8009d0e:	f200 84ec 	bhi.w	800a6ea <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d16:	4b57      	ldr	r3, [pc, #348]	; (8009e74 <tcp_receive+0x724>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f2c0 80b8 	blt.w	8009e94 <tcp_receive+0x744>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d28:	4b51      	ldr	r3, [pc, #324]	; (8009e70 <tcp_receive+0x720>)
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	4b51      	ldr	r3, [pc, #324]	; (8009e74 <tcp_receive+0x724>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	440b      	add	r3, r1
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	3301      	adds	r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f300 80ab 	bgt.w	8009e94 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009d3e:	4b4e      	ldr	r3, [pc, #312]	; (8009e78 <tcp_receive+0x728>)
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d48:	4b4a      	ldr	r3, [pc, #296]	; (8009e74 <tcp_receive+0x724>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009d50:	4b49      	ldr	r3, [pc, #292]	; (8009e78 <tcp_receive+0x728>)
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d106      	bne.n	8009d66 <tcp_receive+0x616>
 8009d58:	4b48      	ldr	r3, [pc, #288]	; (8009e7c <tcp_receive+0x72c>)
 8009d5a:	f240 523c 	movw	r2, #1340	; 0x53c
 8009d5e:	4948      	ldr	r1, [pc, #288]	; (8009e80 <tcp_receive+0x730>)
 8009d60:	4848      	ldr	r0, [pc, #288]	; (8009e84 <tcp_receive+0x734>)
 8009d62:	f004 fc85 	bl	800e670 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	dd06      	ble.n	8009d7e <tcp_receive+0x62e>
 8009d70:	4b42      	ldr	r3, [pc, #264]	; (8009e7c <tcp_receive+0x72c>)
 8009d72:	f240 523d 	movw	r2, #1341	; 0x53d
 8009d76:	4944      	ldr	r1, [pc, #272]	; (8009e88 <tcp_receive+0x738>)
 8009d78:	4842      	ldr	r0, [pc, #264]	; (8009e84 <tcp_receive+0x734>)
 8009d7a:	f004 fc79 	bl	800e670 <iprintf>
      if (inseg.p->len < off) {
 8009d7e:	4b3e      	ldr	r3, [pc, #248]	; (8009e78 <tcp_receive+0x728>)
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	895b      	ldrh	r3, [r3, #10]
 8009d84:	461a      	mov	r2, r3
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	dd3e      	ble.n	8009e0a <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009d8c:	4b3a      	ldr	r3, [pc, #232]	; (8009e78 <tcp_receive+0x728>)
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	891b      	ldrh	r3, [r3, #8]
 8009d92:	461a      	mov	r2, r3
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	4293      	cmp	r3, r2
 8009d98:	dd06      	ble.n	8009da8 <tcp_receive+0x658>
 8009d9a:	4b38      	ldr	r3, [pc, #224]	; (8009e7c <tcp_receive+0x72c>)
 8009d9c:	f240 523f 	movw	r2, #1343	; 0x53f
 8009da0:	493a      	ldr	r1, [pc, #232]	; (8009e8c <tcp_receive+0x73c>)
 8009da2:	4838      	ldr	r0, [pc, #224]	; (8009e84 <tcp_receive+0x734>)
 8009da4:	f004 fc64 	bl	800e670 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009da8:	4b33      	ldr	r3, [pc, #204]	; (8009e78 <tcp_receive+0x728>)
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	891a      	ldrh	r2, [r3, #8]
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8009db6:	e00e      	b.n	8009dd6 <tcp_receive+0x686>
          off -= p->len;
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	895b      	ldrh	r3, [r3, #10]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	1a9b      	subs	r3, r3, r2
 8009dc2:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	8a3a      	ldrh	r2, [r7, #16]
 8009dc8:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	895b      	ldrh	r3, [r3, #10]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dde:	4293      	cmp	r3, r2
 8009de0:	dcea      	bgt.n	8009db8 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	425b      	negs	r3, r3
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	b21b      	sxth	r3, r3
 8009dec:	4619      	mov	r1, r3
 8009dee:	69b8      	ldr	r0, [r7, #24]
 8009df0:	f7fc fe40 	bl	8006a74 <pbuf_header>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d01c      	beq.n	8009e34 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8009dfa:	4b20      	ldr	r3, [pc, #128]	; (8009e7c <tcp_receive+0x72c>)
 8009dfc:	f240 524c 	movw	r2, #1356	; 0x54c
 8009e00:	4923      	ldr	r1, [pc, #140]	; (8009e90 <tcp_receive+0x740>)
 8009e02:	4820      	ldr	r0, [pc, #128]	; (8009e84 <tcp_receive+0x734>)
 8009e04:	f004 fc34 	bl	800e670 <iprintf>
 8009e08:	e014      	b.n	8009e34 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8009e0a:	4b1b      	ldr	r3, [pc, #108]	; (8009e78 <tcp_receive+0x728>)
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e10:	b292      	uxth	r2, r2
 8009e12:	4252      	negs	r2, r2
 8009e14:	b292      	uxth	r2, r2
 8009e16:	b212      	sxth	r2, r2
 8009e18:	4611      	mov	r1, r2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fc fe2a 	bl	8006a74 <pbuf_header>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d006      	beq.n	8009e34 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8009e26:	4b15      	ldr	r3, [pc, #84]	; (8009e7c <tcp_receive+0x72c>)
 8009e28:	f240 5251 	movw	r2, #1361	; 0x551
 8009e2c:	4918      	ldr	r1, [pc, #96]	; (8009e90 <tcp_receive+0x740>)
 8009e2e:	4815      	ldr	r0, [pc, #84]	; (8009e84 <tcp_receive+0x734>)
 8009e30:	f004 fc1e 	bl	800e670 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8009e34:	4b10      	ldr	r3, [pc, #64]	; (8009e78 <tcp_receive+0x728>)
 8009e36:	891a      	ldrh	r2, [r3, #8]
 8009e38:	4b0e      	ldr	r3, [pc, #56]	; (8009e74 <tcp_receive+0x724>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	b299      	uxth	r1, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	1acb      	subs	r3, r1, r3
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	4413      	add	r3, r2
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	; (8009e78 <tcp_receive+0x728>)
 8009e4e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e54:	4a07      	ldr	r2, [pc, #28]	; (8009e74 <tcp_receive+0x724>)
 8009e56:	6013      	str	r3, [r2, #0]
 8009e58:	4b07      	ldr	r3, [pc, #28]	; (8009e78 <tcp_receive+0x728>)
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	4a05      	ldr	r2, [pc, #20]	; (8009e74 <tcp_receive+0x724>)
 8009e5e:	6812      	ldr	r2, [r2, #0]
 8009e60:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009e62:	e025      	b.n	8009eb0 <tcp_receive+0x760>
 8009e64:	200004fc 	.word	0x200004fc
 8009e68:	20000500 	.word	0x20000500
 8009e6c:	20007b94 	.word	0x20007b94
 8009e70:	20000502 	.word	0x20000502
 8009e74:	200004f8 	.word	0x200004f8
 8009e78:	200004d8 	.word	0x200004d8
 8009e7c:	08010364 	.word	0x08010364
 8009e80:	080105ec 	.word	0x080105ec
 8009e84:	080103a8 	.word	0x080103a8
 8009e88:	080105fc 	.word	0x080105fc
 8009e8c:	0801060c 	.word	0x0801060c
 8009e90:	0801061c 	.word	0x0801061c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009e94:	4b87      	ldr	r3, [pc, #540]	; (800a0b4 <tcp_receive+0x964>)
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	da06      	bge.n	8009eb0 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	7e9b      	ldrb	r3, [r3, #26]
 8009ea6:	f043 0302 	orr.w	r3, r3, #2
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009eb0:	4b80      	ldr	r3, [pc, #512]	; (800a0b4 <tcp_receive+0x964>)
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f2c0 8410 	blt.w	800a6e0 <tcp_receive+0xf90>
 8009ec0:	4b7c      	ldr	r3, [pc, #496]	; (800a0b4 <tcp_receive+0x964>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	6879      	ldr	r1, [r7, #4]
 8009eca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009ecc:	440b      	add	r3, r1
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f300 8404 	bgt.w	800a6e0 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009edc:	4b75      	ldr	r3, [pc, #468]	; (800a0b4 <tcp_receive+0x964>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	f040 8287 	bne.w	800a3f4 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009ee6:	4b74      	ldr	r3, [pc, #464]	; (800a0b8 <tcp_receive+0x968>)
 8009ee8:	891c      	ldrh	r4, [r3, #8]
 8009eea:	4b73      	ldr	r3, [pc, #460]	; (800a0b8 <tcp_receive+0x968>)
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	899b      	ldrh	r3, [r3, #12]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fb fcbd 	bl	8005872 <lwip_htons>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f003 0303 	and.w	r3, r3, #3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <tcp_receive+0x7b6>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e000      	b.n	8009f08 <tcp_receive+0x7b8>
 8009f06:	2300      	movs	r3, #0
 8009f08:	4423      	add	r3, r4
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	4b6b      	ldr	r3, [pc, #428]	; (800a0bc <tcp_receive+0x96c>)
 8009f0e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f14:	4b69      	ldr	r3, [pc, #420]	; (800a0bc <tcp_receive+0x96c>)
 8009f16:	881b      	ldrh	r3, [r3, #0]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d26e      	bcs.n	8009ffa <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f1c:	4b66      	ldr	r3, [pc, #408]	; (800a0b8 <tcp_receive+0x968>)
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	899b      	ldrh	r3, [r3, #12]
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fb fca4 	bl	8005872 <lwip_htons>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01b      	beq.n	8009f6c <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009f34:	4b60      	ldr	r3, [pc, #384]	; (800a0b8 <tcp_receive+0x968>)
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	899b      	ldrh	r3, [r3, #12]
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f40:	b29c      	uxth	r4, r3
 8009f42:	4b5d      	ldr	r3, [pc, #372]	; (800a0b8 <tcp_receive+0x968>)
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	899b      	ldrh	r3, [r3, #12]
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fb fc91 	bl	8005872 <lwip_htons>
 8009f50:	4603      	mov	r3, r0
 8009f52:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fb fc8a 	bl	8005872 <lwip_htons>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	461a      	mov	r2, r3
 8009f62:	4b55      	ldr	r3, [pc, #340]	; (800a0b8 <tcp_receive+0x968>)
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	4322      	orrs	r2, r4
 8009f68:	b292      	uxth	r2, r2
 8009f6a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f70:	4b51      	ldr	r3, [pc, #324]	; (800a0b8 <tcp_receive+0x968>)
 8009f72:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009f74:	4b50      	ldr	r3, [pc, #320]	; (800a0b8 <tcp_receive+0x968>)
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	899b      	ldrh	r3, [r3, #12]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fb fc78 	bl	8005872 <lwip_htons>
 8009f82:	4603      	mov	r3, r0
 8009f84:	f003 0302 	and.w	r3, r3, #2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d005      	beq.n	8009f98 <tcp_receive+0x848>
            inseg.len -= 1;
 8009f8c:	4b4a      	ldr	r3, [pc, #296]	; (800a0b8 <tcp_receive+0x968>)
 8009f8e:	891b      	ldrh	r3, [r3, #8]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	4b48      	ldr	r3, [pc, #288]	; (800a0b8 <tcp_receive+0x968>)
 8009f96:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009f98:	4b47      	ldr	r3, [pc, #284]	; (800a0b8 <tcp_receive+0x968>)
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	4b46      	ldr	r3, [pc, #280]	; (800a0b8 <tcp_receive+0x968>)
 8009f9e:	891b      	ldrh	r3, [r3, #8]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	f7fc fc16 	bl	80067d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009fa8:	4b43      	ldr	r3, [pc, #268]	; (800a0b8 <tcp_receive+0x968>)
 8009faa:	891c      	ldrh	r4, [r3, #8]
 8009fac:	4b42      	ldr	r3, [pc, #264]	; (800a0b8 <tcp_receive+0x968>)
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	899b      	ldrh	r3, [r3, #12]
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fb fc5c 	bl	8005872 <lwip_htons>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f003 0303 	and.w	r3, r3, #3
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <tcp_receive+0x878>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e000      	b.n	8009fca <tcp_receive+0x87a>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4423      	add	r3, r4
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	4b3b      	ldr	r3, [pc, #236]	; (800a0bc <tcp_receive+0x96c>)
 8009fd0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009fd2:	4b3a      	ldr	r3, [pc, #232]	; (800a0bc <tcp_receive+0x96c>)
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	4b36      	ldr	r3, [pc, #216]	; (800a0b4 <tcp_receive+0x964>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	441a      	add	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009fe6:	440b      	add	r3, r1
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d006      	beq.n	8009ffa <tcp_receive+0x8aa>
 8009fec:	4b34      	ldr	r3, [pc, #208]	; (800a0c0 <tcp_receive+0x970>)
 8009fee:	f240 527f 	movw	r2, #1407	; 0x57f
 8009ff2:	4934      	ldr	r1, [pc, #208]	; (800a0c4 <tcp_receive+0x974>)
 8009ff4:	4834      	ldr	r0, [pc, #208]	; (800a0c8 <tcp_receive+0x978>)
 8009ff6:	f004 fb3b 	bl	800e670 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 80e1 	beq.w	800a1c6 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a004:	4b2c      	ldr	r3, [pc, #176]	; (800a0b8 <tcp_receive+0x968>)
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	899b      	ldrh	r3, [r3, #12]
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fb fc30 	bl	8005872 <lwip_htons>
 800a012:	4603      	mov	r3, r0
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d010      	beq.n	800a03e <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a01c:	e00a      	b.n	800a034 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a022:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800a02e:	68b8      	ldr	r0, [r7, #8]
 800a030:	f7fd ff2d 	bl	8007e8e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1f0      	bne.n	800a01e <tcp_receive+0x8ce>
 800a03c:	e0c3      	b.n	800a1c6 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a042:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a044:	e04f      	b.n	800a0e6 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	899b      	ldrh	r3, [r3, #12]
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fb fc0f 	bl	8005872 <lwip_htons>
 800a054:	4603      	mov	r3, r0
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d03b      	beq.n	800a0d6 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a05e:	4b16      	ldr	r3, [pc, #88]	; (800a0b8 <tcp_receive+0x968>)
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	899b      	ldrh	r3, [r3, #12]
 800a064:	b29b      	uxth	r3, r3
 800a066:	4618      	mov	r0, r3
 800a068:	f7fb fc03 	bl	8005872 <lwip_htons>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a072:	2b00      	cmp	r3, #0
 800a074:	d12f      	bne.n	800a0d6 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a076:	4b10      	ldr	r3, [pc, #64]	; (800a0b8 <tcp_receive+0x968>)
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	899b      	ldrh	r3, [r3, #12]
 800a07c:	b29c      	uxth	r4, r3
 800a07e:	2001      	movs	r0, #1
 800a080:	f7fb fbf7 	bl	8005872 <lwip_htons>
 800a084:	4603      	mov	r3, r0
 800a086:	461a      	mov	r2, r3
 800a088:	4b0b      	ldr	r3, [pc, #44]	; (800a0b8 <tcp_receive+0x968>)
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	4322      	orrs	r2, r4
 800a08e:	b292      	uxth	r2, r2
 800a090:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a092:	4b09      	ldr	r3, [pc, #36]	; (800a0b8 <tcp_receive+0x968>)
 800a094:	891c      	ldrh	r4, [r3, #8]
 800a096:	4b08      	ldr	r3, [pc, #32]	; (800a0b8 <tcp_receive+0x968>)
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	899b      	ldrh	r3, [r3, #12]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fb fbe7 	bl	8005872 <lwip_htons>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	f003 0303 	and.w	r3, r3, #3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00e      	beq.n	800a0cc <tcp_receive+0x97c>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e00d      	b.n	800a0ce <tcp_receive+0x97e>
 800a0b2:	bf00      	nop
 800a0b4:	200004f8 	.word	0x200004f8
 800a0b8:	200004d8 	.word	0x200004d8
 800a0bc:	20000502 	.word	0x20000502
 800a0c0:	08010364 	.word	0x08010364
 800a0c4:	08010630 	.word	0x08010630
 800a0c8:	080103a8 	.word	0x080103a8
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4423      	add	r3, r4
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	4b95      	ldr	r3, [pc, #596]	; (800a328 <tcp_receive+0xbd8>)
 800a0d4:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800a0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d8:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800a0e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0e2:	f7fd fed4 	bl	8007e8e <tcp_seg_free>
            while (next &&
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00e      	beq.n	800a10a <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a0ec:	4b8e      	ldr	r3, [pc, #568]	; (800a328 <tcp_receive+0xbd8>)
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4b8e      	ldr	r3, [pc, #568]	; (800a32c <tcp_receive+0xbdc>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	441a      	add	r2, r3
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a100:	8909      	ldrh	r1, [r1, #8]
 800a102:	440b      	add	r3, r1
 800a104:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a106:	2b00      	cmp	r3, #0
 800a108:	da9d      	bge.n	800a046 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d057      	beq.n	800a1c0 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800a110:	4b85      	ldr	r3, [pc, #532]	; (800a328 <tcp_receive+0xbd8>)
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	461a      	mov	r2, r3
 800a116:	4b85      	ldr	r3, [pc, #532]	; (800a32c <tcp_receive+0xbdc>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	441a      	add	r2, r3
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a124:	2b00      	cmp	r3, #0
 800a126:	dd4b      	ble.n	800a1c0 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	b29a      	uxth	r2, r3
 800a130:	4b7e      	ldr	r3, [pc, #504]	; (800a32c <tcp_receive+0xbdc>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	b29a      	uxth	r2, r3
 800a13a:	4b7d      	ldr	r3, [pc, #500]	; (800a330 <tcp_receive+0xbe0>)
 800a13c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a13e:	4b7c      	ldr	r3, [pc, #496]	; (800a330 <tcp_receive+0xbe0>)
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	899b      	ldrh	r3, [r3, #12]
 800a144:	b29b      	uxth	r3, r3
 800a146:	4618      	mov	r0, r3
 800a148:	f7fb fb93 	bl	8005872 <lwip_htons>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f003 0302 	and.w	r3, r3, #2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d005      	beq.n	800a162 <tcp_receive+0xa12>
                inseg.len -= 1;
 800a156:	4b76      	ldr	r3, [pc, #472]	; (800a330 <tcp_receive+0xbe0>)
 800a158:	891b      	ldrh	r3, [r3, #8]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	4b74      	ldr	r3, [pc, #464]	; (800a330 <tcp_receive+0xbe0>)
 800a160:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a162:	4b73      	ldr	r3, [pc, #460]	; (800a330 <tcp_receive+0xbe0>)
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	4b72      	ldr	r3, [pc, #456]	; (800a330 <tcp_receive+0xbe0>)
 800a168:	891b      	ldrh	r3, [r3, #8]
 800a16a:	4619      	mov	r1, r3
 800a16c:	4610      	mov	r0, r2
 800a16e:	f7fc fb31 	bl	80067d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a172:	4b6f      	ldr	r3, [pc, #444]	; (800a330 <tcp_receive+0xbe0>)
 800a174:	891c      	ldrh	r4, [r3, #8]
 800a176:	4b6e      	ldr	r3, [pc, #440]	; (800a330 <tcp_receive+0xbe0>)
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	899b      	ldrh	r3, [r3, #12]
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fb fb77 	bl	8005872 <lwip_htons>
 800a184:	4603      	mov	r3, r0
 800a186:	f003 0303 	and.w	r3, r3, #3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <tcp_receive+0xa42>
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <tcp_receive+0xa44>
 800a192:	2300      	movs	r3, #0
 800a194:	4423      	add	r3, r4
 800a196:	b29a      	uxth	r2, r3
 800a198:	4b63      	ldr	r3, [pc, #396]	; (800a328 <tcp_receive+0xbd8>)
 800a19a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a19c:	4b62      	ldr	r3, [pc, #392]	; (800a328 <tcp_receive+0xbd8>)
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	4b62      	ldr	r3, [pc, #392]	; (800a32c <tcp_receive+0xbdc>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	441a      	add	r2, r3
 800a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d006      	beq.n	800a1c0 <tcp_receive+0xa70>
 800a1b2:	4b60      	ldr	r3, [pc, #384]	; (800a334 <tcp_receive+0xbe4>)
 800a1b4:	f240 52af 	movw	r2, #1455	; 0x5af
 800a1b8:	495f      	ldr	r1, [pc, #380]	; (800a338 <tcp_receive+0xbe8>)
 800a1ba:	4860      	ldr	r0, [pc, #384]	; (800a33c <tcp_receive+0xbec>)
 800a1bc:	f004 fa58 	bl	800e670 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1c4:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a1c6:	4b58      	ldr	r3, [pc, #352]	; (800a328 <tcp_receive+0xbd8>)
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	4b57      	ldr	r3, [pc, #348]	; (800a32c <tcp_receive+0xbdc>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	441a      	add	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a1da:	4b53      	ldr	r3, [pc, #332]	; (800a328 <tcp_receive+0xbd8>)
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d206      	bcs.n	800a1f0 <tcp_receive+0xaa0>
 800a1e2:	4b54      	ldr	r3, [pc, #336]	; (800a334 <tcp_receive+0xbe4>)
 800a1e4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a1e8:	4955      	ldr	r1, [pc, #340]	; (800a340 <tcp_receive+0xbf0>)
 800a1ea:	4854      	ldr	r0, [pc, #336]	; (800a33c <tcp_receive+0xbec>)
 800a1ec:	f004 fa40 	bl	800e670 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a1f4:	4b4c      	ldr	r3, [pc, #304]	; (800a328 <tcp_receive+0xbd8>)
 800a1f6:	881b      	ldrh	r3, [r3, #0]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7fd f9fb 	bl	80075fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a206:	4b4a      	ldr	r3, [pc, #296]	; (800a330 <tcp_receive+0xbe0>)
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	891b      	ldrh	r3, [r3, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d006      	beq.n	800a21e <tcp_receive+0xace>
          recv_data = inseg.p;
 800a210:	4b47      	ldr	r3, [pc, #284]	; (800a330 <tcp_receive+0xbe0>)
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	4a4b      	ldr	r2, [pc, #300]	; (800a344 <tcp_receive+0xbf4>)
 800a216:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a218:	4b45      	ldr	r3, [pc, #276]	; (800a330 <tcp_receive+0xbe0>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a21e:	4b44      	ldr	r3, [pc, #272]	; (800a330 <tcp_receive+0xbe0>)
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	899b      	ldrh	r3, [r3, #12]
 800a224:	b29b      	uxth	r3, r3
 800a226:	4618      	mov	r0, r3
 800a228:	f7fb fb23 	bl	8005872 <lwip_htons>
 800a22c:	4603      	mov	r3, r0
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 80b4 	beq.w	800a3a0 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a238:	4b43      	ldr	r3, [pc, #268]	; (800a348 <tcp_receive+0xbf8>)
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	f043 0320 	orr.w	r3, r3, #32
 800a240:	b2da      	uxtb	r2, r3
 800a242:	4b41      	ldr	r3, [pc, #260]	; (800a348 <tcp_receive+0xbf8>)
 800a244:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a246:	e0ab      	b.n	800a3a0 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	4a35      	ldr	r2, [pc, #212]	; (800a32c <tcp_receive+0xbdc>)
 800a258:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	891b      	ldrh	r3, [r3, #8]
 800a25e:	461c      	mov	r4, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	899b      	ldrh	r3, [r3, #12]
 800a266:	b29b      	uxth	r3, r3
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fb fb02 	bl	8005872 <lwip_htons>
 800a26e:	4603      	mov	r3, r0
 800a270:	f003 0303 	and.w	r3, r3, #3
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <tcp_receive+0xb2c>
 800a278:	2301      	movs	r3, #1
 800a27a:	e000      	b.n	800a27e <tcp_receive+0xb2e>
 800a27c:	2300      	movs	r3, #0
 800a27e:	191a      	adds	r2, r3, r4
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	441a      	add	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a28e:	461c      	mov	r4, r3
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	891b      	ldrh	r3, [r3, #8]
 800a294:	461d      	mov	r5, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	899b      	ldrh	r3, [r3, #12]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fb fae7 	bl	8005872 <lwip_htons>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	f003 0303 	and.w	r3, r3, #3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <tcp_receive+0xb62>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <tcp_receive+0xb64>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	442b      	add	r3, r5
 800a2b6:	429c      	cmp	r4, r3
 800a2b8:	d206      	bcs.n	800a2c8 <tcp_receive+0xb78>
 800a2ba:	4b1e      	ldr	r3, [pc, #120]	; (800a334 <tcp_receive+0xbe4>)
 800a2bc:	f240 52de 	movw	r2, #1502	; 0x5de
 800a2c0:	4922      	ldr	r1, [pc, #136]	; (800a34c <tcp_receive+0xbfc>)
 800a2c2:	481e      	ldr	r0, [pc, #120]	; (800a33c <tcp_receive+0xbec>)
 800a2c4:	f004 f9d4 	bl	800e670 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	891b      	ldrh	r3, [r3, #8]
 800a2cc:	461c      	mov	r4, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	899b      	ldrh	r3, [r3, #12]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fb facb 	bl	8005872 <lwip_htons>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f003 0303 	and.w	r3, r3, #3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <tcp_receive+0xb9a>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e000      	b.n	800a2ec <tcp_receive+0xb9c>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	1919      	adds	r1, r3, r4
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a2f2:	b28b      	uxth	r3, r1
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7fd f97d 	bl	80075fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	891b      	ldrh	r3, [r3, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d028      	beq.n	800a35e <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a30c:	4b0d      	ldr	r3, [pc, #52]	; (800a344 <tcp_receive+0xbf4>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d01d      	beq.n	800a350 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800a314:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <tcp_receive+0xbf4>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	4619      	mov	r1, r3
 800a31e:	4610      	mov	r0, r2
 800a320:	f7fc fc9a 	bl	8006c58 <pbuf_cat>
 800a324:	e018      	b.n	800a358 <tcp_receive+0xc08>
 800a326:	bf00      	nop
 800a328:	20000502 	.word	0x20000502
 800a32c:	200004f8 	.word	0x200004f8
 800a330:	200004d8 	.word	0x200004d8
 800a334:	08010364 	.word	0x08010364
 800a338:	08010668 	.word	0x08010668
 800a33c:	080103a8 	.word	0x080103a8
 800a340:	080106a4 	.word	0x080106a4
 800a344:	20000508 	.word	0x20000508
 800a348:	20000505 	.word	0x20000505
 800a34c:	080106c4 	.word	0x080106c4
            } else {
              recv_data = cseg->p;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	4a71      	ldr	r2, [pc, #452]	; (800a51c <tcp_receive+0xdcc>)
 800a356:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	899b      	ldrh	r3, [r3, #12]
 800a364:	b29b      	uxth	r3, r3
 800a366:	4618      	mov	r0, r3
 800a368:	f7fb fa83 	bl	8005872 <lwip_htons>
 800a36c:	4603      	mov	r3, r0
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00d      	beq.n	800a392 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a376:	4b6a      	ldr	r3, [pc, #424]	; (800a520 <tcp_receive+0xdd0>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	f043 0320 	orr.w	r3, r3, #32
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	4b67      	ldr	r3, [pc, #412]	; (800a520 <tcp_receive+0xdd0>)
 800a382:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	7d1b      	ldrb	r3, [r3, #20]
 800a388:	2b04      	cmp	r3, #4
 800a38a:	d102      	bne.n	800a392 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2207      	movs	r2, #7
 800a390:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f7fd fd77 	bl	8007e8e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d008      	beq.n	800a3ba <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	685a      	ldr	r2, [r3, #4]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	f43f af47 	beq.w	800a248 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	7e9b      	ldrb	r3, [r3, #26]
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00e      	beq.n	800a3e4 <tcp_receive+0xc94>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	7e9b      	ldrb	r3, [r3, #26]
 800a3ca:	f023 0301 	bic.w	r3, r3, #1
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	769a      	strb	r2, [r3, #26]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	7e9b      	ldrb	r3, [r3, #26]
 800a3d8:	f043 0302 	orr.w	r3, r3, #2
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a3e2:	e181      	b.n	800a6e8 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	7e9b      	ldrb	r3, [r3, #26]
 800a3e8:	f043 0301 	orr.w	r3, r3, #1
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a3f2:	e179      	b.n	800a6e8 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fc93 	bl	800ad20 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d106      	bne.n	800a410 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a402:	4848      	ldr	r0, [pc, #288]	; (800a524 <tcp_receive+0xdd4>)
 800a404:	f7fd fd5b 	bl	8007ebe <tcp_seg_copy>
 800a408:	4602      	mov	r2, r0
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800a40e:	e16b      	b.n	800a6e8 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800a410:	2300      	movs	r3, #0
 800a412:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a41a:	e150      	b.n	800a6be <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800a41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	4b41      	ldr	r3, [pc, #260]	; (800a528 <tcp_receive+0xdd8>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	429a      	cmp	r2, r3
 800a428:	d11d      	bne.n	800a466 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a42a:	4b3e      	ldr	r3, [pc, #248]	; (800a524 <tcp_receive+0xdd4>)
 800a42c:	891a      	ldrh	r2, [r3, #8]
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	891b      	ldrh	r3, [r3, #8]
 800a432:	429a      	cmp	r2, r3
 800a434:	f240 8148 	bls.w	800a6c8 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800a438:	483a      	ldr	r0, [pc, #232]	; (800a524 <tcp_receive+0xdd4>)
 800a43a:	f7fd fd40 	bl	8007ebe <tcp_seg_copy>
 800a43e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	f000 8142 	beq.w	800a6cc <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800a448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <tcp_receive+0xd06>
                    prev->next = cseg;
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	e002      	b.n	800a45c <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a45c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f7ff f900 	bl	8009664 <tcp_oos_insert_segment>
                }
                break;
 800a464:	e132      	b.n	800a6cc <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d117      	bne.n	800a49c <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a46c:	4b2e      	ldr	r3, [pc, #184]	; (800a528 <tcp_receive+0xdd8>)
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	da57      	bge.n	800a52c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800a47c:	4829      	ldr	r0, [pc, #164]	; (800a524 <tcp_receive+0xdd4>)
 800a47e:	f7fd fd1e 	bl	8007ebe <tcp_seg_copy>
 800a482:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b00      	cmp	r3, #0
 800a488:	f000 8122 	beq.w	800a6d0 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800a492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f7ff f8e5 	bl	8009664 <tcp_oos_insert_segment>
                  }
                  break;
 800a49a:	e119      	b.n	800a6d0 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800a49c:	4b22      	ldr	r3, [pc, #136]	; (800a528 <tcp_receive+0xdd8>)
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	db3e      	blt.n	800a52c <tcp_receive+0xddc>
 800a4ae:	4b1e      	ldr	r3, [pc, #120]	; (800a528 <tcp_receive+0xdd8>)
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dc35      	bgt.n	800a52c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800a4c0:	4818      	ldr	r0, [pc, #96]	; (800a524 <tcp_receive+0xdd4>)
 800a4c2:	f7fd fcfc 	bl	8007ebe <tcp_seg_copy>
 800a4c6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 8102 	beq.w	800a6d4 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4d8:	8912      	ldrh	r2, [r2, #8]
 800a4da:	441a      	add	r2, r3
 800a4dc:	4b12      	ldr	r3, [pc, #72]	; (800a528 <tcp_receive+0xdd8>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dd12      	ble.n	800a50c <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a4e6:	4b10      	ldr	r3, [pc, #64]	; (800a528 <tcp_receive+0xdd8>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fe:	685a      	ldr	r2, [r3, #4]
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	891b      	ldrh	r3, [r3, #8]
 800a504:	4619      	mov	r1, r3
 800a506:	4610      	mov	r0, r2
 800a508:	f7fc f964 	bl	80067d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f7ff f8a5 	bl	8009664 <tcp_oos_insert_segment>
                  }
                  break;
 800a51a:	e0db      	b.n	800a6d4 <tcp_receive+0xf84>
 800a51c:	20000508 	.word	0x20000508
 800a520:	20000505 	.word	0x20000505
 800a524:	200004d8 	.word	0x200004d8
 800a528:	200004f8 	.word	0x200004f8
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	f040 80bf 	bne.w	800a6b4 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a536:	4b7c      	ldr	r3, [pc, #496]	; (800a728 <tcp_receive+0xfd8>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a542:	2b00      	cmp	r3, #0
 800a544:	f340 80b6 	ble.w	800a6b4 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	899b      	ldrh	r3, [r3, #12]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	4618      	mov	r0, r3
 800a552:	f7fb f98e 	bl	8005872 <lwip_htons>
 800a556:	4603      	mov	r3, r0
 800a558:	f003 0301 	and.w	r3, r3, #1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f040 80bb 	bne.w	800a6d8 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a562:	4872      	ldr	r0, [pc, #456]	; (800a72c <tcp_receive+0xfdc>)
 800a564:	f7fd fcab 	bl	8007ebe <tcp_seg_copy>
 800a568:	4602      	mov	r2, r0
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 80b2 	beq.w	800a6dc <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a580:	8912      	ldrh	r2, [r2, #8]
 800a582:	441a      	add	r2, r3
 800a584:	4b68      	ldr	r3, [pc, #416]	; (800a728 <tcp_receive+0xfd8>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	dd12      	ble.n	800a5b4 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a58e:	4b66      	ldr	r3, [pc, #408]	; (800a728 <tcp_receive+0xfd8>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	b29a      	uxth	r2, r3
 800a594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5aa:	891b      	ldrh	r3, [r3, #8]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	f7fc f910 	bl	80067d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a5b4:	4b5e      	ldr	r3, [pc, #376]	; (800a730 <tcp_receive+0xfe0>)
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	4b5b      	ldr	r3, [pc, #364]	; (800a728 <tcp_receive+0xfd8>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	441a      	add	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	6879      	ldr	r1, [r7, #4]
 800a5c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5c8:	440b      	add	r3, r1
 800a5ca:	1ad3      	subs	r3, r2, r3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f340 8085 	ble.w	800a6dc <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	899b      	ldrh	r3, [r3, #12]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fb f948 	bl	8005872 <lwip_htons>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d01e      	beq.n	800a62a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	899b      	ldrh	r3, [r3, #12]
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a5fa:	b29c      	uxth	r4, r3
 800a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	899b      	ldrh	r3, [r3, #12]
 800a604:	b29b      	uxth	r3, r3
 800a606:	4618      	mov	r0, r3
 800a608:	f7fb f933 	bl	8005872 <lwip_htons>
 800a60c:	4603      	mov	r3, r0
 800a60e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a612:	b29b      	uxth	r3, r3
 800a614:	4618      	mov	r0, r3
 800a616:	f7fb f92c 	bl	8005872 <lwip_htons>
 800a61a:	4603      	mov	r3, r0
 800a61c:	461a      	mov	r2, r3
 800a61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	4322      	orrs	r2, r4
 800a626:	b292      	uxth	r2, r2
 800a628:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	b29a      	uxth	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a634:	4413      	add	r3, r2
 800a636:	b299      	uxth	r1, r3
 800a638:	4b3b      	ldr	r3, [pc, #236]	; (800a728 <tcp_receive+0xfd8>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	1a8a      	subs	r2, r1, r2
 800a644:	b292      	uxth	r2, r2
 800a646:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	891b      	ldrh	r3, [r3, #8]
 800a654:	4619      	mov	r1, r3
 800a656:	4610      	mov	r0, r2
 800a658:	f7fc f8bc 	bl	80067d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	891c      	ldrh	r4, [r3, #8]
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	899b      	ldrh	r3, [r3, #12]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fb f900 	bl	8005872 <lwip_htons>
 800a672:	4603      	mov	r3, r0
 800a674:	f003 0303 	and.w	r3, r3, #3
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <tcp_receive+0xf30>
 800a67c:	2301      	movs	r3, #1
 800a67e:	e000      	b.n	800a682 <tcp_receive+0xf32>
 800a680:	2300      	movs	r3, #0
 800a682:	4423      	add	r3, r4
 800a684:	b29a      	uxth	r2, r3
 800a686:	4b2a      	ldr	r3, [pc, #168]	; (800a730 <tcp_receive+0xfe0>)
 800a688:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a68a:	4b29      	ldr	r3, [pc, #164]	; (800a730 <tcp_receive+0xfe0>)
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	4b25      	ldr	r3, [pc, #148]	; (800a728 <tcp_receive+0xfd8>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	441a      	add	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	6879      	ldr	r1, [r7, #4]
 800a69c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a69e:	440b      	add	r3, r1
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d01b      	beq.n	800a6dc <tcp_receive+0xf8c>
 800a6a4:	4b23      	ldr	r3, [pc, #140]	; (800a734 <tcp_receive+0xfe4>)
 800a6a6:	f240 627b 	movw	r2, #1659	; 0x67b
 800a6aa:	4923      	ldr	r1, [pc, #140]	; (800a738 <tcp_receive+0xfe8>)
 800a6ac:	4823      	ldr	r0, [pc, #140]	; (800a73c <tcp_receive+0xfec>)
 800a6ae:	f003 ffdf 	bl	800e670 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a6b2:	e013      	b.n	800a6dc <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f47f aeab 	bne.w	800a41c <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800a6c6:	e00f      	b.n	800a6e8 <tcp_receive+0xf98>
                break;
 800a6c8:	bf00      	nop
 800a6ca:	e00d      	b.n	800a6e8 <tcp_receive+0xf98>
                break;
 800a6cc:	bf00      	nop
 800a6ce:	e00b      	b.n	800a6e8 <tcp_receive+0xf98>
                  break;
 800a6d0:	bf00      	nop
 800a6d2:	e009      	b.n	800a6e8 <tcp_receive+0xf98>
                  break;
 800a6d4:	bf00      	nop
 800a6d6:	e007      	b.n	800a6e8 <tcp_receive+0xf98>
                  break;
 800a6d8:	bf00      	nop
 800a6da:	e005      	b.n	800a6e8 <tcp_receive+0xf98>
                break;
 800a6dc:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800a6de:	e003      	b.n	800a6e8 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fb1d 	bl	800ad20 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a6e6:	e01a      	b.n	800a71e <tcp_receive+0xfce>
 800a6e8:	e019      	b.n	800a71e <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a6ea:	4b0f      	ldr	r3, [pc, #60]	; (800a728 <tcp_receive+0xfd8>)
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	db0a      	blt.n	800a70e <tcp_receive+0xfbe>
 800a6f8:	4b0b      	ldr	r3, [pc, #44]	; (800a728 <tcp_receive+0xfd8>)
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	6879      	ldr	r1, [r7, #4]
 800a702:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a704:	440b      	add	r3, r1
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	3301      	adds	r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	dd07      	ble.n	800a71e <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	7e9b      	ldrb	r3, [r3, #26]
 800a712:	f043 0302 	orr.w	r3, r3, #2
 800a716:	b2da      	uxtb	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800a71c:	e7ff      	b.n	800a71e <tcp_receive+0xfce>
 800a71e:	bf00      	nop
 800a720:	3734      	adds	r7, #52	; 0x34
 800a722:	46bd      	mov	sp, r7
 800a724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a726:	bf00      	nop
 800a728:	200004f8 	.word	0x200004f8
 800a72c:	200004d8 	.word	0x200004d8
 800a730:	20000502 	.word	0x20000502
 800a734:	08010364 	.word	0x08010364
 800a738:	08010630 	.word	0x08010630
 800a73c:	080103a8 	.word	0x080103a8

0800a740 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800a746:	4b18      	ldr	r3, [pc, #96]	; (800a7a8 <tcp_getoptbyte+0x68>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d005      	beq.n	800a75a <tcp_getoptbyte+0x1a>
 800a74e:	4b17      	ldr	r3, [pc, #92]	; (800a7ac <tcp_getoptbyte+0x6c>)
 800a750:	881a      	ldrh	r2, [r3, #0]
 800a752:	4b17      	ldr	r3, [pc, #92]	; (800a7b0 <tcp_getoptbyte+0x70>)
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	429a      	cmp	r2, r3
 800a758:	d20e      	bcs.n	800a778 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800a75a:	4b16      	ldr	r3, [pc, #88]	; (800a7b4 <tcp_getoptbyte+0x74>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3314      	adds	r3, #20
 800a760:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800a762:	4b12      	ldr	r3, [pc, #72]	; (800a7ac <tcp_getoptbyte+0x6c>)
 800a764:	881b      	ldrh	r3, [r3, #0]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	b291      	uxth	r1, r2
 800a76a:	4a10      	ldr	r2, [pc, #64]	; (800a7ac <tcp_getoptbyte+0x6c>)
 800a76c:	8011      	strh	r1, [r2, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	4413      	add	r3, r2
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	e010      	b.n	800a79a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800a778:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <tcp_getoptbyte+0x6c>)
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	b291      	uxth	r1, r2
 800a780:	4a0a      	ldr	r2, [pc, #40]	; (800a7ac <tcp_getoptbyte+0x6c>)
 800a782:	8011      	strh	r1, [r2, #0]
 800a784:	b2da      	uxtb	r2, r3
 800a786:	4b0a      	ldr	r3, [pc, #40]	; (800a7b0 <tcp_getoptbyte+0x70>)
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800a790:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <tcp_getoptbyte+0x68>)
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	79fb      	ldrb	r3, [r7, #7]
 800a796:	4413      	add	r3, r2
 800a798:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	200004f0 	.word	0x200004f0
 800a7ac:	200004f4 	.word	0x200004f4
 800a7b0:	200004ee 	.word	0x200004ee
 800a7b4:	200004e8 	.word	0x200004e8

0800a7b8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a7c0:	4b2d      	ldr	r3, [pc, #180]	; (800a878 <tcp_parseopt+0xc0>)
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d053      	beq.n	800a870 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a7c8:	4b2c      	ldr	r3, [pc, #176]	; (800a87c <tcp_parseopt+0xc4>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	801a      	strh	r2, [r3, #0]
 800a7ce:	e043      	b.n	800a858 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800a7d0:	f7ff ffb6 	bl	800a740 <tcp_getoptbyte>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d03c      	beq.n	800a858 <tcp_parseopt+0xa0>
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d002      	beq.n	800a7e8 <tcp_parseopt+0x30>
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d03f      	beq.n	800a866 <tcp_parseopt+0xae>
 800a7e6:	e026      	b.n	800a836 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a7e8:	f7ff ffaa 	bl	800a740 <tcp_getoptbyte>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d13b      	bne.n	800a86a <tcp_parseopt+0xb2>
 800a7f2:	4b22      	ldr	r3, [pc, #136]	; (800a87c <tcp_parseopt+0xc4>)
 800a7f4:	881b      	ldrh	r3, [r3, #0]
 800a7f6:	3302      	adds	r3, #2
 800a7f8:	4a1f      	ldr	r2, [pc, #124]	; (800a878 <tcp_parseopt+0xc0>)
 800a7fa:	8812      	ldrh	r2, [r2, #0]
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	dc34      	bgt.n	800a86a <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800a800:	f7ff ff9e 	bl	800a740 <tcp_getoptbyte>
 800a804:	4603      	mov	r3, r0
 800a806:	b29b      	uxth	r3, r3
 800a808:	021b      	lsls	r3, r3, #8
 800a80a:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800a80c:	f7ff ff98 	bl	800a740 <tcp_getoptbyte>
 800a810:	4603      	mov	r3, r0
 800a812:	b29a      	uxth	r2, r3
 800a814:	89bb      	ldrh	r3, [r7, #12]
 800a816:	4313      	orrs	r3, r2
 800a818:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a81a:	89bb      	ldrh	r3, [r7, #12]
 800a81c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a820:	d804      	bhi.n	800a82c <tcp_parseopt+0x74>
 800a822:	89bb      	ldrh	r3, [r7, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <tcp_parseopt+0x74>
 800a828:	89ba      	ldrh	r2, [r7, #12]
 800a82a:	e001      	b.n	800a830 <tcp_parseopt+0x78>
 800a82c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800a834:	e010      	b.n	800a858 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800a836:	f7ff ff83 	bl	800a740 <tcp_getoptbyte>
 800a83a:	4603      	mov	r3, r0
 800a83c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800a83e:	7afb      	ldrb	r3, [r7, #11]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d914      	bls.n	800a86e <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800a844:	7afb      	ldrb	r3, [r7, #11]
 800a846:	b29a      	uxth	r2, r3
 800a848:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <tcp_parseopt+0xc4>)
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	4413      	add	r3, r2
 800a84e:	b29b      	uxth	r3, r3
 800a850:	3b02      	subs	r3, #2
 800a852:	b29a      	uxth	r2, r3
 800a854:	4b09      	ldr	r3, [pc, #36]	; (800a87c <tcp_parseopt+0xc4>)
 800a856:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a858:	4b08      	ldr	r3, [pc, #32]	; (800a87c <tcp_parseopt+0xc4>)
 800a85a:	881a      	ldrh	r2, [r3, #0]
 800a85c:	4b06      	ldr	r3, [pc, #24]	; (800a878 <tcp_parseopt+0xc0>)
 800a85e:	881b      	ldrh	r3, [r3, #0]
 800a860:	429a      	cmp	r2, r3
 800a862:	d3b5      	bcc.n	800a7d0 <tcp_parseopt+0x18>
 800a864:	e004      	b.n	800a870 <tcp_parseopt+0xb8>
        return;
 800a866:	bf00      	nop
 800a868:	e002      	b.n	800a870 <tcp_parseopt+0xb8>
          return;
 800a86a:	bf00      	nop
 800a86c:	e000      	b.n	800a870 <tcp_parseopt+0xb8>
          return;
 800a86e:	bf00      	nop
      }
    }
  }
}
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	200004ec 	.word	0x200004ec
 800a87c:	200004f4 	.word	0x200004f4

0800a880 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a880:	b480      	push	{r7}
 800a882:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a884:	4b05      	ldr	r3, [pc, #20]	; (800a89c <tcp_trigger_input_pcb_close+0x1c>)
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	f043 0310 	orr.w	r3, r3, #16
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	4b03      	ldr	r3, [pc, #12]	; (800a89c <tcp_trigger_input_pcb_close+0x1c>)
 800a890:	701a      	strb	r2, [r3, #0]
}
 800a892:	bf00      	nop
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	20000505 	.word	0x20000505

0800a8a0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	607b      	str	r3, [r7, #4]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	817b      	strh	r3, [r7, #10]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a8b2:	897a      	ldrh	r2, [r7, #10]
 800a8b4:	893b      	ldrh	r3, [r7, #8]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	3314      	adds	r3, #20
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	2200      	movs	r2, #0
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	2001      	movs	r0, #1
 800a8c4:	f7fb fd88 	bl	80063d8 <pbuf_alloc>
 800a8c8:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d057      	beq.n	800a980 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	895b      	ldrh	r3, [r3, #10]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	897b      	ldrh	r3, [r7, #10]
 800a8d8:	3314      	adds	r3, #20
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	da05      	bge.n	800a8ea <tcp_output_alloc_header+0x4a>
 800a8de:	4b2b      	ldr	r3, [pc, #172]	; (800a98c <tcp_output_alloc_header+0xec>)
 800a8e0:	2273      	movs	r2, #115	; 0x73
 800a8e2:	492b      	ldr	r1, [pc, #172]	; (800a990 <tcp_output_alloc_header+0xf0>)
 800a8e4:	482b      	ldr	r0, [pc, #172]	; (800a994 <tcp_output_alloc_header+0xf4>)
 800a8e6:	f003 fec3 	bl	800e670 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	8adb      	ldrh	r3, [r3, #22]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fa ffbc 	bl	8005872 <lwip_htons>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8b1b      	ldrh	r3, [r3, #24]
 800a906:	4618      	mov	r0, r3
 800a908:	f7fa ffb3 	bl	8005872 <lwip_htons>
 800a90c:	4603      	mov	r3, r0
 800a90e:	461a      	mov	r2, r3
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fa ffb5 	bl	800588e <lwip_htonl>
 800a924:	4602      	mov	r2, r0
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800a92a:	897b      	ldrh	r3, [r7, #10]
 800a92c:	089b      	lsrs	r3, r3, #2
 800a92e:	b29b      	uxth	r3, r3
 800a930:	3305      	adds	r3, #5
 800a932:	b29b      	uxth	r3, r3
 800a934:	031b      	lsls	r3, r3, #12
 800a936:	b29b      	uxth	r3, r3
 800a938:	f043 0310 	orr.w	r3, r3, #16
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fa ff97 	bl	8005872 <lwip_htons>
 800a944:	4603      	mov	r3, r0
 800a946:	461a      	mov	r2, r3
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a950:	4618      	mov	r0, r3
 800a952:	f7fa ff8e 	bl	8005872 <lwip_htons>
 800a956:	4603      	mov	r3, r0
 800a958:	461a      	mov	r2, r3
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2200      	movs	r2, #0
 800a962:	741a      	strb	r2, [r3, #16]
 800a964:	2200      	movs	r2, #0
 800a966:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	2200      	movs	r2, #0
 800a96c:	749a      	strb	r2, [r3, #18]
 800a96e:	2200      	movs	r2, #0
 800a970:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a97a:	441a      	add	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a980:	697b      	ldr	r3, [r7, #20]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	080106ec 	.word	0x080106ec
 800a990:	08010720 	.word	0x08010720
 800a994:	08010750 	.word	0x08010750

0800a998 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a998:	b590      	push	{r4, r7, lr}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d02d      	beq.n	800aa04 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9ac:	60fb      	str	r3, [r7, #12]
 800a9ae:	e002      	b.n	800a9b6 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1f8      	bne.n	800a9b0 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	899b      	ldrh	r3, [r3, #12]
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fa ff53 	bl	8005872 <lwip_htons>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	f003 0307 	and.w	r3, r3, #7
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d116      	bne.n	800aa04 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	899b      	ldrh	r3, [r3, #12]
 800a9dc:	b29c      	uxth	r4, r3
 800a9de:	2001      	movs	r0, #1
 800a9e0:	f7fa ff47 	bl	8005872 <lwip_htons>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	4322      	orrs	r2, r4
 800a9ee:	b292      	uxth	r2, r2
 800a9f0:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	7e9b      	ldrb	r3, [r3, #26]
 800a9f6:	f043 0320 	orr.w	r3, r3, #32
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	e004      	b.n	800aa0e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800aa04:	2101      	movs	r1, #1
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f88e 	bl	800ab28 <tcp_enqueue_flags>
 800aa0c:	4603      	mov	r3, r0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd90      	pop	{r4, r7, pc}
	...

0800aa18 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800aa18:	b590      	push	{r4, r7, lr}
 800aa1a:	b087      	sub	sp, #28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	603b      	str	r3, [r7, #0]
 800aa24:	4613      	mov	r3, r2
 800aa26:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800aa28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	f003 0304 	and.w	r3, r3, #4
 800aa34:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800aa36:	2003      	movs	r0, #3
 800aa38:	f7fb faca 	bl	8005fd0 <memp_malloc>
 800aa3c:	6138      	str	r0, [r7, #16]
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d104      	bne.n	800aa4e <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800aa44:	68b8      	ldr	r0, [r7, #8]
 800aa46:	f7fc f839 	bl	8006abc <pbuf_free>
    return NULL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	e061      	b.n	800ab12 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800aa54:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	891a      	ldrh	r2, [r3, #8]
 800aa66:	7dfb      	ldrb	r3, [r7, #23]
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d205      	bcs.n	800aa7a <tcp_create_segment+0x62>
 800aa6e:	4b2b      	ldr	r3, [pc, #172]	; (800ab1c <tcp_create_segment+0x104>)
 800aa70:	22ba      	movs	r2, #186	; 0xba
 800aa72:	492b      	ldr	r1, [pc, #172]	; (800ab20 <tcp_create_segment+0x108>)
 800aa74:	482b      	ldr	r0, [pc, #172]	; (800ab24 <tcp_create_segment+0x10c>)
 800aa76:	f003 fdfb 	bl	800e670 <iprintf>
  seg->len = p->tot_len - optlen;
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	891a      	ldrh	r2, [r3, #8]
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800aa8a:	2114      	movs	r1, #20
 800aa8c:	68b8      	ldr	r0, [r7, #8]
 800aa8e:	f7fb fff1 	bl	8006a74 <pbuf_header>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d004      	beq.n	800aaa2 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800aa98:	6938      	ldr	r0, [r7, #16]
 800aa9a:	f7fd f9f8 	bl	8007e8e <tcp_seg_free>
    return NULL;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e037      	b.n	800ab12 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	8ada      	ldrh	r2, [r3, #22]
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	68dc      	ldr	r4, [r3, #12]
 800aab4:	4610      	mov	r0, r2
 800aab6:	f7fa fedc 	bl	8005872 <lwip_htons>
 800aaba:	4603      	mov	r3, r0
 800aabc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	8b1a      	ldrh	r2, [r3, #24]
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	68dc      	ldr	r4, [r3, #12]
 800aac6:	4610      	mov	r0, r2
 800aac8:	f7fa fed3 	bl	8005872 <lwip_htons>
 800aacc:	4603      	mov	r3, r0
 800aace:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	68dc      	ldr	r4, [r3, #12]
 800aad4:	6838      	ldr	r0, [r7, #0]
 800aad6:	f7fa feda 	bl	800588e <lwip_htonl>
 800aada:	4603      	mov	r3, r0
 800aadc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800aade:	7dfb      	ldrb	r3, [r7, #23]
 800aae0:	089b      	lsrs	r3, r3, #2
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	3305      	adds	r3, #5
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	031b      	lsls	r3, r3, #12
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	79fb      	ldrb	r3, [r7, #7]
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	68dc      	ldr	r4, [r3, #12]
 800aafa:	4610      	mov	r0, r2
 800aafc:	f7fa feb9 	bl	8005872 <lwip_htons>
 800ab00:	4603      	mov	r3, r0
 800ab02:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	749a      	strb	r2, [r3, #18]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	74da      	strb	r2, [r3, #19]
  return seg;
 800ab10:	693b      	ldr	r3, [r7, #16]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd90      	pop	{r4, r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	080106ec 	.word	0x080106ec
 800ab20:	08010778 	.word	0x08010778
 800ab24:	08010750 	.word	0x08010750

0800ab28 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b08a      	sub	sp, #40	; 0x28
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	460b      	mov	r3, r1
 800ab32:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ab3c:	78fb      	ldrb	r3, [r7, #3]
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d106      	bne.n	800ab54 <tcp_enqueue_flags+0x2c>
 800ab46:	4b6f      	ldr	r3, [pc, #444]	; (800ad04 <tcp_enqueue_flags+0x1dc>)
 800ab48:	f240 321b 	movw	r2, #795	; 0x31b
 800ab4c:	496e      	ldr	r1, [pc, #440]	; (800ad08 <tcp_enqueue_flags+0x1e0>)
 800ab4e:	486f      	ldr	r0, [pc, #444]	; (800ad0c <tcp_enqueue_flags+0x1e4>)
 800ab50:	f003 fd8e 	bl	800e670 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab5a:	2b08      	cmp	r3, #8
 800ab5c:	d806      	bhi.n	800ab6c <tcp_enqueue_flags+0x44>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab64:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d90e      	bls.n	800ab8a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800ab6c:	78fb      	ldrb	r3, [r7, #3]
 800ab6e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d109      	bne.n	800ab8a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	7e9b      	ldrb	r3, [r3, #26]
 800ab7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800ab84:	f04f 33ff 	mov.w	r3, #4294967295
 800ab88:	e0b7      	b.n	800acfa <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	f003 0302 	and.w	r3, r3, #2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800ab94:	2301      	movs	r3, #1
 800ab96:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ab98:	7ffb      	ldrb	r3, [r7, #31]
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f003 0304 	and.w	r3, r3, #4
 800aba2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aba4:	7dfb      	ldrb	r3, [r7, #23]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	2200      	movs	r2, #0
 800abaa:	4619      	mov	r1, r3
 800abac:	2000      	movs	r0, #0
 800abae:	f7fb fc13 	bl	80063d8 <pbuf_alloc>
 800abb2:	6138      	str	r0, [r7, #16]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d109      	bne.n	800abce <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	7e9b      	ldrb	r3, [r3, #26]
 800abbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800abc2:	b2da      	uxtb	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800abc8:	f04f 33ff 	mov.w	r3, #4294967295
 800abcc:	e095      	b.n	800acfa <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	895a      	ldrh	r2, [r3, #10]
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d206      	bcs.n	800abe8 <tcp_enqueue_flags+0xc0>
 800abda:	4b4a      	ldr	r3, [pc, #296]	; (800ad04 <tcp_enqueue_flags+0x1dc>)
 800abdc:	f240 3241 	movw	r2, #833	; 0x341
 800abe0:	494b      	ldr	r1, [pc, #300]	; (800ad10 <tcp_enqueue_flags+0x1e8>)
 800abe2:	484a      	ldr	r0, [pc, #296]	; (800ad0c <tcp_enqueue_flags+0x1e4>)
 800abe4:	f003 fd44 	bl	800e670 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800abec:	78fa      	ldrb	r2, [r7, #3]
 800abee:	7ffb      	ldrb	r3, [r7, #31]
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	460b      	mov	r3, r1
 800abf4:	6939      	ldr	r1, [r7, #16]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7ff ff0e 	bl	800aa18 <tcp_create_segment>
 800abfc:	60f8      	str	r0, [r7, #12]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d109      	bne.n	800ac18 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	7e9b      	ldrb	r3, [r3, #26]
 800ac08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ac12:	f04f 33ff 	mov.w	r3, #4294967295
 800ac16:	e070      	b.n	800acfa <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	f003 0303 	and.w	r3, r3, #3
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d006      	beq.n	800ac32 <tcp_enqueue_flags+0x10a>
 800ac24:	4b37      	ldr	r3, [pc, #220]	; (800ad04 <tcp_enqueue_flags+0x1dc>)
 800ac26:	f240 3249 	movw	r2, #841	; 0x349
 800ac2a:	493a      	ldr	r1, [pc, #232]	; (800ad14 <tcp_enqueue_flags+0x1ec>)
 800ac2c:	4837      	ldr	r0, [pc, #220]	; (800ad0c <tcp_enqueue_flags+0x1e4>)
 800ac2e:	f003 fd1f 	bl	800e670 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	891b      	ldrh	r3, [r3, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d006      	beq.n	800ac48 <tcp_enqueue_flags+0x120>
 800ac3a:	4b32      	ldr	r3, [pc, #200]	; (800ad04 <tcp_enqueue_flags+0x1dc>)
 800ac3c:	f240 324a 	movw	r2, #842	; 0x34a
 800ac40:	4935      	ldr	r1, [pc, #212]	; (800ad18 <tcp_enqueue_flags+0x1f0>)
 800ac42:	4832      	ldr	r0, [pc, #200]	; (800ad0c <tcp_enqueue_flags+0x1e4>)
 800ac44:	f003 fd14 	bl	800e670 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d103      	bne.n	800ac58 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	669a      	str	r2, [r3, #104]	; 0x68
 800ac56:	e00d      	b.n	800ac74 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac5c:	61bb      	str	r3, [r7, #24]
 800ac5e:	e002      	b.n	800ac66 <tcp_enqueue_flags+0x13e>
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	61bb      	str	r3, [r7, #24]
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1f8      	bne.n	800ac60 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ac7c:	78fb      	ldrb	r3, [r7, #3]
 800ac7e:	f003 0302 	and.w	r3, r3, #2
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d104      	bne.n	800ac90 <tcp_enqueue_flags+0x168>
 800ac86:	78fb      	ldrb	r3, [r7, #3]
 800ac88:	f003 0301 	and.w	r3, r3, #1
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d004      	beq.n	800ac9a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac94:	1c5a      	adds	r2, r3, #1
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ac9a:	78fb      	ldrb	r3, [r7, #3]
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d006      	beq.n	800acb2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	7e9b      	ldrb	r3, [r3, #26]
 800aca8:	f043 0320 	orr.w	r3, r3, #32
 800acac:	b2da      	uxtb	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fb ff94 	bl	8006be4 <pbuf_clen>
 800acbc:	4603      	mov	r3, r0
 800acbe:	461a      	mov	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800acc6:	4413      	add	r3, r2
 800acc8:	b29a      	uxth	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00e      	beq.n	800acf8 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10a      	bne.n	800acf8 <tcp_enqueue_flags+0x1d0>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d106      	bne.n	800acf8 <tcp_enqueue_flags+0x1d0>
 800acea:	4b06      	ldr	r3, [pc, #24]	; (800ad04 <tcp_enqueue_flags+0x1dc>)
 800acec:	f240 326d 	movw	r2, #877	; 0x36d
 800acf0:	490a      	ldr	r1, [pc, #40]	; (800ad1c <tcp_enqueue_flags+0x1f4>)
 800acf2:	4806      	ldr	r0, [pc, #24]	; (800ad0c <tcp_enqueue_flags+0x1e4>)
 800acf4:	f003 fcbc 	bl	800e670 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3720      	adds	r7, #32
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	080106ec 	.word	0x080106ec
 800ad08:	080109f0 	.word	0x080109f0
 800ad0c:	08010750 	.word	0x08010750
 800ad10:	08010a48 	.word	0x08010a48
 800ad14:	08010a84 	.word	0x08010a84
 800ad18:	08010a9c 	.word	0x08010a9c
 800ad1c:	08010ac8 	.word	0x08010ac8

0800ad20 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ad20:	b590      	push	{r4, r7, lr}
 800ad22:	b08b      	sub	sp, #44	; 0x2c
 800ad24:	af04      	add	r7, sp, #16
 800ad26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ad2c:	7dbb      	ldrb	r3, [r7, #22]
 800ad2e:	b29c      	uxth	r4, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fa fdaa 	bl	800588e <lwip_htonl>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	4621      	mov	r1, r4
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7ff fdad 	bl	800a8a0 <tcp_output_alloc_header>
 800ad46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d109      	bne.n	800ad62 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	7e9b      	ldrb	r3, [r3, #26]
 800ad52:	f043 0303 	orr.w	r3, r3, #3
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ad5c:	f06f 0301 	mvn.w	r3, #1
 800ad60:	e036      	b.n	800add0 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3304      	adds	r3, #4
 800ad66:	4618      	mov	r0, r3
 800ad68:	f002 fad8 	bl	800d31c <ip4_route>
 800ad6c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d102      	bne.n	800ad7a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800ad74:	23fc      	movs	r3, #252	; 0xfc
 800ad76:	75fb      	strb	r3, [r7, #23]
 800ad78:	e012      	b.n	800ada0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800ad7a:	6879      	ldr	r1, [r7, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	1d18      	adds	r0, r3, #4
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	7a9c      	ldrb	r4, [r3, #10]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7a5b      	ldrb	r3, [r3, #9]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	9202      	str	r2, [sp, #8]
 800ad8c:	2206      	movs	r2, #6
 800ad8e:	9201      	str	r2, [sp, #4]
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	4623      	mov	r3, r4
 800ad94:	4602      	mov	r2, r0
 800ad96:	6938      	ldr	r0, [r7, #16]
 800ad98:	f002 fc68 	bl	800d66c <ip4_output_if>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800ada0:	6938      	ldr	r0, [r7, #16]
 800ada2:	f7fb fe8b 	bl	8006abc <pbuf_free>

  if (err != ERR_OK) {
 800ada6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d007      	beq.n	800adbe <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	7e9b      	ldrb	r3, [r3, #26]
 800adb2:	f043 0303 	orr.w	r3, r3, #3
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	769a      	strb	r2, [r3, #26]
 800adbc:	e006      	b.n	800adcc <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	7e9b      	ldrb	r3, [r3, #26]
 800adc2:	f023 0303 	bic.w	r3, r3, #3
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800adcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800add0:	4618      	mov	r0, r3
 800add2:	371c      	adds	r7, #28
 800add4:	46bd      	mov	sp, r7
 800add6:	bd90      	pop	{r4, r7, pc}

0800add8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800add8:	b5b0      	push	{r4, r5, r7, lr}
 800adda:	b08a      	sub	sp, #40	; 0x28
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	7d1b      	ldrb	r3, [r3, #20]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d106      	bne.n	800adf6 <tcp_output+0x1e>
 800ade8:	4b9b      	ldr	r3, [pc, #620]	; (800b058 <tcp_output+0x280>)
 800adea:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800adee:	499b      	ldr	r1, [pc, #620]	; (800b05c <tcp_output+0x284>)
 800adf0:	489b      	ldr	r0, [pc, #620]	; (800b060 <tcp_output+0x288>)
 800adf2:	f003 fc3d 	bl	800e670 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800adf6:	4b9b      	ldr	r3, [pc, #620]	; (800b064 <tcp_output+0x28c>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d101      	bne.n	800ae04 <tcp_output+0x2c>
    return ERR_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	e1cf      	b.n	800b1a4 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d203      	bcs.n	800ae1c <tcp_output+0x44>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae1a:	e002      	b.n	800ae22 <tcp_output+0x4a>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae22:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	7e9b      	ldrb	r3, [r3, #26]
 800ae2e:	f003 0302 	and.w	r3, r3, #2
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d017      	beq.n	800ae66 <tcp_output+0x8e>
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00f      	beq.n	800ae5c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fa fd23 	bl	800588e <lwip_htonl>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae52:	8912      	ldrh	r2, [r2, #8]
 800ae54:	4413      	add	r3, r2
     (seg == NULL ||
 800ae56:	69ba      	ldr	r2, [r7, #24]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d204      	bcs.n	800ae66 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7ff ff5f 	bl	800ad20 <tcp_send_empty_ack>
 800ae62:	4603      	mov	r3, r0
 800ae64:	e19e      	b.n	800b1a4 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae6a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d007      	beq.n	800ae82 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800ae72:	e002      	b.n	800ae7a <tcp_output+0xa2>
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	623b      	str	r3, [r7, #32]
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1f8      	bne.n	800ae74 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3304      	adds	r3, #4
 800ae86:	4618      	mov	r0, r3
 800ae88:	f002 fa48 	bl	800d31c <ip4_route>
 800ae8c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d102      	bne.n	800ae9a <tcp_output+0xc2>
    return ERR_RTE;
 800ae94:	f06f 0303 	mvn.w	r3, #3
 800ae98:	e184      	b.n	800b1a4 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d003      	beq.n	800aea8 <tcp_output+0xd0>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d111      	bne.n	800aecc <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <tcp_output+0xdc>
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	e000      	b.n	800aeb6 <tcp_output+0xde>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d102      	bne.n	800aec4 <tcp_output+0xec>
      return ERR_RTE;
 800aebe:	f06f 0303 	mvn.w	r3, #3
 800aec2:	e16f      	b.n	800b1a4 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f000 813e 	beq.w	800b150 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800aed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fa fcd7 	bl	800588e <lwip_htonl>
 800aee0:	4602      	mov	r2, r0
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeea:	8912      	ldrh	r2, [r2, #8]
 800aeec:	4413      	add	r3, r2
  if (seg != NULL &&
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	f080 812d 	bcs.w	800b150 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 8129 	beq.w	800b150 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af04:	461a      	mov	r2, r3
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	4293      	cmp	r3, r2
 800af0a:	f040 8121 	bne.w	800b150 <tcp_output+0x378>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af12:	2b00      	cmp	r3, #0
 800af14:	f040 811c 	bne.w	800b150 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f040 812b 	bne.w	800b17a <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800af34:	e121      	b.n	800b17a <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800af36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	899b      	ldrh	r3, [r3, #12]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fa fc97 	bl	8005872 <lwip_htons>
 800af44:	4603      	mov	r3, r0
 800af46:	f003 0304 	and.w	r3, r3, #4
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d006      	beq.n	800af5c <tcp_output+0x184>
 800af4e:	4b42      	ldr	r3, [pc, #264]	; (800b058 <tcp_output+0x280>)
 800af50:	f240 4246 	movw	r2, #1094	; 0x446
 800af54:	4944      	ldr	r1, [pc, #272]	; (800b068 <tcp_output+0x290>)
 800af56:	4842      	ldr	r0, [pc, #264]	; (800b060 <tcp_output+0x288>)
 800af58:	f003 fb8a 	bl	800e670 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af60:	2b00      	cmp	r3, #0
 800af62:	d01f      	beq.n	800afa4 <tcp_output+0x1cc>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	7e9b      	ldrb	r3, [r3, #26]
 800af68:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d119      	bne.n	800afa4 <tcp_output+0x1cc>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af74:	2b00      	cmp	r3, #0
 800af76:	d00b      	beq.n	800af90 <tcp_output+0x1b8>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d110      	bne.n	800afa4 <tcp_output+0x1cc>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af86:	891a      	ldrh	r2, [r3, #8]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d209      	bcs.n	800afa4 <tcp_output+0x1cc>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af96:	2b00      	cmp	r3, #0
 800af98:	d004      	beq.n	800afa4 <tcp_output+0x1cc>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	d901      	bls.n	800afa8 <tcp_output+0x1d0>
 800afa4:	2301      	movs	r3, #1
 800afa6:	e000      	b.n	800afaa <tcp_output+0x1d2>
 800afa8:	2300      	movs	r3, #0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d106      	bne.n	800afbc <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	7e9b      	ldrb	r3, [r3, #26]
 800afb2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f000 80e1 	beq.w	800b17e <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	7d1b      	ldrb	r3, [r3, #20]
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d00d      	beq.n	800afe0 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	899b      	ldrh	r3, [r3, #12]
 800afca:	b29c      	uxth	r4, r3
 800afcc:	2010      	movs	r0, #16
 800afce:	f7fa fc50 	bl	8005872 <lwip_htons>
 800afd2:	4603      	mov	r3, r0
 800afd4:	461a      	mov	r2, r3
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	4322      	orrs	r2, r4
 800afdc:	b292      	uxth	r2, r2
 800afde:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	6879      	ldr	r1, [r7, #4]
 800afe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afe6:	f000 f8e1 	bl	800b1ac <tcp_output_segment>
 800afea:	4603      	mov	r3, r0
 800afec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800afee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d009      	beq.n	800b00a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	7e9b      	ldrb	r3, [r3, #26]
 800affa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800affe:	b2da      	uxtb	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	769a      	strb	r2, [r3, #26]
      return err;
 800b004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b008:	e0cc      	b.n	800b1a4 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	7d1b      	ldrb	r3, [r3, #20]
 800b016:	2b02      	cmp	r3, #2
 800b018:	d006      	beq.n	800b028 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	7e9b      	ldrb	r3, [r3, #26]
 800b01e:	f023 0303 	bic.w	r3, r3, #3
 800b022:	b2da      	uxtb	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fa fc2d 	bl	800588e <lwip_htonl>
 800b034:	4604      	mov	r4, r0
 800b036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b038:	891b      	ldrh	r3, [r3, #8]
 800b03a:	461d      	mov	r5, r3
 800b03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	899b      	ldrh	r3, [r3, #12]
 800b042:	b29b      	uxth	r3, r3
 800b044:	4618      	mov	r0, r3
 800b046:	f7fa fc14 	bl	8005872 <lwip_htons>
 800b04a:	4603      	mov	r3, r0
 800b04c:	f003 0303 	and.w	r3, r3, #3
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00b      	beq.n	800b06c <tcp_output+0x294>
 800b054:	2301      	movs	r3, #1
 800b056:	e00a      	b.n	800b06e <tcp_output+0x296>
 800b058:	080106ec 	.word	0x080106ec
 800b05c:	08010af0 	.word	0x08010af0
 800b060:	08010750 	.word	0x08010750
 800b064:	20007ba4 	.word	0x20007ba4
 800b068:	08010b18 	.word	0x08010b18
 800b06c:	2300      	movs	r3, #0
 800b06e:	442b      	add	r3, r5
 800b070:	4423      	add	r3, r4
 800b072:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	da02      	bge.n	800b086 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b088:	891b      	ldrh	r3, [r3, #8]
 800b08a:	461c      	mov	r4, r3
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	899b      	ldrh	r3, [r3, #12]
 800b092:	b29b      	uxth	r3, r3
 800b094:	4618      	mov	r0, r3
 800b096:	f7fa fbec 	bl	8005872 <lwip_htons>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f003 0303 	and.w	r3, r3, #3
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d001      	beq.n	800b0a8 <tcp_output+0x2d0>
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e000      	b.n	800b0aa <tcp_output+0x2d2>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	4423      	add	r3, r4
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d049      	beq.n	800b144 <tcp_output+0x36c>
      seg->next = NULL;
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d105      	bne.n	800b0ca <tcp_output+0x2f2>
        pcb->unacked = seg;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	623b      	str	r3, [r7, #32]
 800b0c8:	e03f      	b.n	800b14a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7fa fbdc 	bl	800588e <lwip_htonl>
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	6a3b      	ldr	r3, [r7, #32]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fa fbd5 	bl	800588e <lwip_htonl>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	1ae3      	subs	r3, r4, r3
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	da24      	bge.n	800b136 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	336c      	adds	r3, #108	; 0x6c
 800b0f0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b0f2:	e002      	b.n	800b0fa <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d011      	beq.n	800b126 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fa fbbf 	bl	800588e <lwip_htonl>
 800b110:	4604      	mov	r4, r0
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fa fbb8 	bl	800588e <lwip_htonl>
 800b11e:	4603      	mov	r3, r0
 800b120:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b122:	2b00      	cmp	r3, #0
 800b124:	dbe6      	blt.n	800b0f4 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	e009      	b.n	800b14a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b13a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	623b      	str	r3, [r7, #32]
 800b142:	e002      	b.n	800b14a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b146:	f7fc fea2 	bl	8007e8e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b14e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	2b00      	cmp	r3, #0
 800b154:	d015      	beq.n	800b182 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fa fb96 	bl	800588e <lwip_htonl>
 800b162:	4602      	mov	r2, r0
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b16c:	8912      	ldrh	r2, [r2, #8]
 800b16e:	4413      	add	r3, r2
  while (seg != NULL &&
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	429a      	cmp	r2, r3
 800b174:	f4bf aedf 	bcs.w	800af36 <tcp_output+0x15e>
  }
output_done:
 800b178:	e003      	b.n	800b182 <tcp_output+0x3aa>
    goto output_done;
 800b17a:	bf00      	nop
 800b17c:	e002      	b.n	800b184 <tcp_output+0x3ac>
      break;
 800b17e:	bf00      	nop
 800b180:	e000      	b.n	800b184 <tcp_output+0x3ac>
output_done:
 800b182:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d103      	bne.n	800b194 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	7e9b      	ldrb	r3, [r3, #26]
 800b198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3728      	adds	r7, #40	; 0x28
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bdb0      	pop	{r4, r5, r7, pc}

0800b1ac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b1ac:	b5b0      	push	{r4, r5, r7, lr}
 800b1ae:	b08c      	sub	sp, #48	; 0x30
 800b1b0:	af04      	add	r7, sp, #16
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	89db      	ldrh	r3, [r3, #14]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d001      	beq.n	800b1c6 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e08b      	b.n	800b2de <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	68dc      	ldr	r4, [r3, #12]
 800b1ce:	4610      	mov	r0, r2
 800b1d0:	f7fa fb5d 	bl	800588e <lwip_htonl>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	68dc      	ldr	r4, [r3, #12]
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f7fa fb46 	bl	8005872 <lwip_htons>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b1f2:	441a      	add	r2, r3
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	3314      	adds	r3, #20
 800b1fe:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	7a9b      	ldrb	r3, [r3, #10]
 800b204:	f003 0301 	and.w	r3, r3, #1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d014      	beq.n	800b236 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	3304      	adds	r3, #4
 800b210:	4619      	mov	r1, r3
 800b212:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b216:	f7fd f8a5 	bl	8008364 <tcp_eff_send_mss_impl>
 800b21a:	4603      	mov	r3, r0
 800b21c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b21e:	8b7b      	ldrh	r3, [r7, #26]
 800b220:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b224:	4618      	mov	r0, r3
 800b226:	f7fa fb32 	bl	800588e <lwip_htonl>
 800b22a:	4602      	mov	r2, r0
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	3304      	adds	r3, #4
 800b234:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	da02      	bge.n	800b246 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	2200      	movs	r2, #0
 800b244:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10c      	bne.n	800b268 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800b24e:	4b26      	ldr	r3, [pc, #152]	; (800b2e8 <tcp_output_segment+0x13c>)
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fa fb16 	bl	800588e <lwip_htonl>
 800b262:	4602      	mov	r2, r0
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	461a      	mov	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	8959      	ldrh	r1, [r3, #10]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	8b3a      	ldrh	r2, [r7, #24]
 800b284:	1a8a      	subs	r2, r1, r2
 800b286:	b292      	uxth	r2, r2
 800b288:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	8919      	ldrh	r1, [r3, #8]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	8b3a      	ldrh	r2, [r7, #24]
 800b296:	1a8a      	subs	r2, r1, r2
 800b298:	b292      	uxth	r2, r2
 800b29a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	68d2      	ldr	r2, [r2, #12]
 800b2a4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	741a      	strb	r2, [r3, #16]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6858      	ldr	r0, [r3, #4]
 800b2b6:	68b9      	ldr	r1, [r7, #8]
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	1d1c      	adds	r4, r3, #4
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	7a9d      	ldrb	r5, [r3, #10]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	7a5b      	ldrb	r3, [r3, #9]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	9202      	str	r2, [sp, #8]
 800b2c8:	2206      	movs	r2, #6
 800b2ca:	9201      	str	r2, [sp, #4]
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	462b      	mov	r3, r5
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	f002 f9cb 	bl	800d66c <ip4_output_if>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800b2da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3720      	adds	r7, #32
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20007b94 	.word	0x20007b94

0800b2ec <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08c      	sub	sp, #48	; 0x30
 800b2f0:	af04      	add	r7, sp, #16
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2114      	movs	r1, #20
 800b2fe:	2001      	movs	r0, #1
 800b300:	f7fb f86a 	bl	80063d8 <pbuf_alloc>
 800b304:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d05b      	beq.n	800b3c4 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	895b      	ldrh	r3, [r3, #10]
 800b310:	2b13      	cmp	r3, #19
 800b312:	d806      	bhi.n	800b322 <tcp_rst+0x36>
 800b314:	4b2d      	ldr	r3, [pc, #180]	; (800b3cc <tcp_rst+0xe0>)
 800b316:	f240 524d 	movw	r2, #1357	; 0x54d
 800b31a:	492d      	ldr	r1, [pc, #180]	; (800b3d0 <tcp_rst+0xe4>)
 800b31c:	482d      	ldr	r0, [pc, #180]	; (800b3d4 <tcp_rst+0xe8>)
 800b31e:	f003 f9a7 	bl	800e670 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800b328:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fa faa1 	bl	8005872 <lwip_htons>
 800b330:	4603      	mov	r3, r0
 800b332:	461a      	mov	r2, r3
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800b338:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fa fa99 	bl	8005872 <lwip_htons>
 800b340:	4603      	mov	r3, r0
 800b342:	461a      	mov	r2, r3
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f7fa faa0 	bl	800588e <lwip_htonl>
 800b34e:	4602      	mov	r2, r0
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800b354:	68b8      	ldr	r0, [r7, #8]
 800b356:	f7fa fa9a 	bl	800588e <lwip_htonl>
 800b35a:	4602      	mov	r2, r0
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800b360:	f245 0014 	movw	r0, #20500	; 0x5014
 800b364:	f7fa fa85 	bl	8005872 <lwip_htons>
 800b368:	4603      	mov	r3, r0
 800b36a:	461a      	mov	r2, r3
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	2200      	movs	r2, #0
 800b374:	f042 0208 	orr.w	r2, r2, #8
 800b378:	739a      	strb	r2, [r3, #14]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b380:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	2200      	movs	r2, #0
 800b386:	741a      	strb	r2, [r3, #16]
 800b388:	2200      	movs	r2, #0
 800b38a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	2200      	movs	r2, #0
 800b390:	749a      	strb	r2, [r3, #18]
 800b392:	2200      	movs	r2, #0
 800b394:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800b396:	6838      	ldr	r0, [r7, #0]
 800b398:	f001 ffc0 	bl	800d31c <ip4_route>
 800b39c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00b      	beq.n	800b3bc <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	9302      	str	r3, [sp, #8]
 800b3a8:	2306      	movs	r3, #6
 800b3aa:	9301      	str	r3, [sp, #4]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	23ff      	movs	r3, #255	; 0xff
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	6879      	ldr	r1, [r7, #4]
 800b3b6:	69f8      	ldr	r0, [r7, #28]
 800b3b8:	f002 f958 	bl	800d66c <ip4_output_if>
  }
  pbuf_free(p);
 800b3bc:	69f8      	ldr	r0, [r7, #28]
 800b3be:	f7fb fb7d 	bl	8006abc <pbuf_free>
 800b3c2:	e000      	b.n	800b3c6 <tcp_rst+0xda>
    return;
 800b3c4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b3c6:	3720      	adds	r7, #32
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	080106ec 	.word	0x080106ec
 800b3d0:	08010720 	.word	0x08010720
 800b3d4:	08010750 	.word	0x08010750

0800b3d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d029      	beq.n	800b43c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3ec:	60fb      	str	r3, [r7, #12]
 800b3ee:	e002      	b.n	800b3f6 <tcp_rexmit_rto+0x1e>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	60fb      	str	r3, [r7, #12]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1f8      	bne.n	800b3f0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b41a:	2bff      	cmp	r3, #255	; 0xff
 800b41c:	d007      	beq.n	800b42e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b424:	3301      	adds	r3, #1
 800b426:	b2da      	uxtb	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7ff fccf 	bl	800add8 <tcp_output>
 800b43a:	e000      	b.n	800b43e <tcp_rexmit_rto+0x66>
    return;
 800b43c:	bf00      	nop
}
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b444:	b590      	push	{r4, r7, lr}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d043      	beq.n	800b4dc <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b458:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3368      	adds	r3, #104	; 0x68
 800b466:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b468:	e002      	b.n	800b470 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d011      	beq.n	800b49c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	4618      	mov	r0, r3
 800b482:	f7fa fa04 	bl	800588e <lwip_htonl>
 800b486:	4604      	mov	r4, r0
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fa f9fd 	bl	800588e <lwip_htonl>
 800b494:	4603      	mov	r3, r0
 800b496:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dbe6      	blt.n	800b46a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d103      	bne.n	800b4ba <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4c0:	2bff      	cmp	r3, #255	; 0xff
 800b4c2:	d007      	beq.n	800b4d4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	635a      	str	r2, [r3, #52]	; 0x34
 800b4da:	e000      	b.n	800b4de <tcp_rexmit+0x9a>
    return;
 800b4dc:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800b4de:	3714      	adds	r7, #20
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd90      	pop	{r4, r7, pc}

0800b4e4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b082      	sub	sp, #8
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d04c      	beq.n	800b58e <tcp_rexmit_fast+0xaa>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	7e9b      	ldrb	r3, [r3, #26]
 800b4f8:	f003 0304 	and.w	r3, r3, #4
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d146      	bne.n	800b58e <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7ff ff9f 	bl	800b444 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b512:	429a      	cmp	r2, r3
 800b514:	d208      	bcs.n	800b528 <tcp_rexmit_fast+0x44>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	da00      	bge.n	800b522 <tcp_rexmit_fast+0x3e>
 800b520:	3301      	adds	r3, #1
 800b522:	105b      	asrs	r3, r3, #1
 800b524:	b29b      	uxth	r3, r3
 800b526:	e007      	b.n	800b538 <tcp_rexmit_fast+0x54>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	da00      	bge.n	800b534 <tcp_rexmit_fast+0x50>
 800b532:	3301      	adds	r3, #1
 800b534:	105b      	asrs	r3, r3, #1
 800b536:	b29b      	uxth	r3, r3
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b544:	461a      	mov	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b54a:	005b      	lsls	r3, r3, #1
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d206      	bcs.n	800b55e <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b554:	005b      	lsls	r3, r3, #1
 800b556:	b29a      	uxth	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b568:	4619      	mov	r1, r3
 800b56a:	0049      	lsls	r1, r1, #1
 800b56c:	440b      	add	r3, r1
 800b56e:	b29b      	uxth	r3, r3
 800b570:	4413      	add	r3, r2
 800b572:	b29a      	uxth	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	7e9b      	ldrb	r3, [r3, #26]
 800b57e:	f043 0304 	orr.w	r3, r3, #4
 800b582:	b2da      	uxtb	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800b58e:	bf00      	nop
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b08a      	sub	sp, #40	; 0x28
 800b59a:	af04      	add	r7, sp, #16
 800b59c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fa f972 	bl	800588e <lwip_htonl>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7ff f975 	bl	800a8a0 <tcp_output_alloc_header>
 800b5b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d102      	bne.n	800b5c4 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b5be:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c2:	e021      	b.n	800b608 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f001 fea7 	bl	800d31c <ip4_route>
 800b5ce:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d102      	bne.n	800b5dc <tcp_keepalive+0x46>
    err = ERR_RTE;
 800b5d6:	23fc      	movs	r3, #252	; 0xfc
 800b5d8:	75fb      	strb	r3, [r7, #23]
 800b5da:	e010      	b.n	800b5fe <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800b5dc:	6879      	ldr	r1, [r7, #4]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	1d1a      	adds	r2, r3, #4
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	7a98      	ldrb	r0, [r3, #10]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	9302      	str	r3, [sp, #8]
 800b5ea:	2306      	movs	r3, #6
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	6938      	ldr	r0, [r7, #16]
 800b5f6:	f002 f839 	bl	800d66c <ip4_output_if>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800b5fe:	6938      	ldr	r0, [r7, #16]
 800b600:	f7fb fa5c 	bl	8006abc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b604:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3718      	adds	r7, #24
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b610:	b590      	push	{r4, r7, lr}
 800b612:	b08f      	sub	sp, #60	; 0x3c
 800b614:	af04      	add	r7, sp, #16
 800b616:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b61c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800b61e:	6a3b      	ldr	r3, [r7, #32]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d102      	bne.n	800b62a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b628:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800b630:	2300      	movs	r3, #0
 800b632:	e085      	b.n	800b740 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	899b      	ldrh	r3, [r3, #12]
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fa f918 	bl	8005872 <lwip_htons>
 800b642:	4603      	mov	r3, r0
 800b644:	f003 0301 	and.w	r3, r3, #1
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d005      	beq.n	800b658 <tcp_zero_window_probe+0x48>
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	891b      	ldrh	r3, [r3, #8]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d101      	bne.n	800b658 <tcp_zero_window_probe+0x48>
 800b654:	2301      	movs	r3, #1
 800b656:	e000      	b.n	800b65a <tcp_zero_window_probe+0x4a>
 800b658:	2300      	movs	r3, #0
 800b65a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b65c:	7ffb      	ldrb	r3, [r7, #31]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	bf0c      	ite	eq
 800b662:	2301      	moveq	r3, #1
 800b664:	2300      	movne	r3, #0
 800b666:	b2db      	uxtb	r3, r3
 800b668:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	8bba      	ldrh	r2, [r7, #28]
 800b672:	2100      	movs	r1, #0
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff f913 	bl	800a8a0 <tcp_output_alloc_header>
 800b67a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d102      	bne.n	800b688 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b682:	f04f 33ff 	mov.w	r3, #4294967295
 800b686:	e05b      	b.n	800b740 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b68e:	7ffb      	ldrb	r3, [r7, #31]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00e      	beq.n	800b6b2 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	899b      	ldrh	r3, [r3, #12]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b69e:	b29c      	uxth	r4, r3
 800b6a0:	2011      	movs	r0, #17
 800b6a2:	f7fa f8e6 	bl	8005872 <lwip_htons>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	4323      	orrs	r3, r4
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	819a      	strh	r2, [r3, #12]
 800b6b0:	e010      	b.n	800b6d4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	3314      	adds	r3, #20
 800b6b8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	6858      	ldr	r0, [r3, #4]
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	891a      	ldrh	r2, [r3, #8]
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
 800b6c6:	891b      	ldrh	r3, [r3, #8]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	6939      	ldr	r1, [r7, #16]
 800b6d0:	f7fb fbf4 	bl	8006ebc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fa f8d7 	bl	800588e <lwip_htonl>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	da02      	bge.n	800b6f8 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f001 fe0d 	bl	800d31c <ip4_route>
 800b702:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d103      	bne.n	800b712 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800b70a:	23fc      	movs	r3, #252	; 0xfc
 800b70c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b710:	e011      	b.n	800b736 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b712:	6879      	ldr	r1, [r7, #4]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	1d1a      	adds	r2, r3, #4
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	7a98      	ldrb	r0, [r3, #10]
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	9302      	str	r3, [sp, #8]
 800b720:	2306      	movs	r3, #6
 800b722:	9301      	str	r3, [sp, #4]
 800b724:	2300      	movs	r3, #0
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	4603      	mov	r3, r0
 800b72a:	69b8      	ldr	r0, [r7, #24]
 800b72c:	f001 ff9e 	bl	800d66c <ip4_output_if>
 800b730:	4603      	mov	r3, r0
 800b732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800b736:	69b8      	ldr	r0, [r7, #24]
 800b738:	f7fb f9c0 	bl	8006abc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b73c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b740:	4618      	mov	r0, r3
 800b742:	372c      	adds	r7, #44	; 0x2c
 800b744:	46bd      	mov	sp, r7
 800b746:	bd90      	pop	{r4, r7, pc}

0800b748 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b750:	f7fb fcc8 	bl	80070e4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b754:	4b0a      	ldr	r3, [pc, #40]	; (800b780 <tcpip_tcp_timer+0x38>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d103      	bne.n	800b764 <tcpip_tcp_timer+0x1c>
 800b75c:	4b09      	ldr	r3, [pc, #36]	; (800b784 <tcpip_tcp_timer+0x3c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d005      	beq.n	800b770 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b764:	2200      	movs	r2, #0
 800b766:	4908      	ldr	r1, [pc, #32]	; (800b788 <tcpip_tcp_timer+0x40>)
 800b768:	20fa      	movs	r0, #250	; 0xfa
 800b76a:	f000 f86f 	bl	800b84c <sys_timeout>
 800b76e:	e002      	b.n	800b776 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b770:	4b06      	ldr	r3, [pc, #24]	; (800b78c <tcpip_tcp_timer+0x44>)
 800b772:	2200      	movs	r2, #0
 800b774:	601a      	str	r2, [r3, #0]
  }
}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20007b90 	.word	0x20007b90
 800b784:	20007ba0 	.word	0x20007ba0
 800b788:	0800b749 	.word	0x0800b749
 800b78c:	20000514 	.word	0x20000514

0800b790 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b794:	4b0a      	ldr	r3, [pc, #40]	; (800b7c0 <tcp_timer_needed+0x30>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10f      	bne.n	800b7bc <tcp_timer_needed+0x2c>
 800b79c:	4b09      	ldr	r3, [pc, #36]	; (800b7c4 <tcp_timer_needed+0x34>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d103      	bne.n	800b7ac <tcp_timer_needed+0x1c>
 800b7a4:	4b08      	ldr	r3, [pc, #32]	; (800b7c8 <tcp_timer_needed+0x38>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d007      	beq.n	800b7bc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b7ac:	4b04      	ldr	r3, [pc, #16]	; (800b7c0 <tcp_timer_needed+0x30>)
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	4905      	ldr	r1, [pc, #20]	; (800b7cc <tcp_timer_needed+0x3c>)
 800b7b6:	20fa      	movs	r0, #250	; 0xfa
 800b7b8:	f000 f848 	bl	800b84c <sys_timeout>
  }
}
 800b7bc:	bf00      	nop
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20000514 	.word	0x20000514
 800b7c4:	20007b90 	.word	0x20007b90
 800b7c8:	20007ba0 	.word	0x20007ba0
 800b7cc:	0800b749 	.word	0x0800b749

0800b7d0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	4903      	ldr	r1, [pc, #12]	; (800b7f8 <cyclic_timer+0x28>)
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 f82e 	bl	800b84c <sys_timeout>
}
 800b7f0:	bf00      	nop
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	0800b7d1 	.word	0x0800b7d1

0800b7fc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b802:	2301      	movs	r3, #1
 800b804:	607b      	str	r3, [r7, #4]
 800b806:	e00e      	b.n	800b826 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800b808:	4a0d      	ldr	r2, [pc, #52]	; (800b840 <sys_timeouts_init+0x44>)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	00db      	lsls	r3, r3, #3
 800b814:	4a0a      	ldr	r2, [pc, #40]	; (800b840 <sys_timeouts_init+0x44>)
 800b816:	4413      	add	r3, r2
 800b818:	461a      	mov	r2, r3
 800b81a:	490a      	ldr	r1, [pc, #40]	; (800b844 <sys_timeouts_init+0x48>)
 800b81c:	f000 f816 	bl	800b84c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3301      	adds	r3, #1
 800b824:	607b      	str	r3, [r7, #4]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d9ed      	bls.n	800b808 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800b82c:	f7fa f81a 	bl	8005864 <sys_now>
 800b830:	4602      	mov	r2, r0
 800b832:	4b05      	ldr	r3, [pc, #20]	; (800b848 <sys_timeouts_init+0x4c>)
 800b834:	601a      	str	r2, [r3, #0]
}
 800b836:	bf00      	nop
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	080113c0 	.word	0x080113c0
 800b844:	0800b7d1 	.word	0x0800b7d1
 800b848:	20000510 	.word	0x20000510

0800b84c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b088      	sub	sp, #32
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b858:	2006      	movs	r0, #6
 800b85a:	f7fa fbb9 	bl	8005fd0 <memp_malloc>
 800b85e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10a      	bne.n	800b87c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f040 8084 	bne.w	800b976 <sys_timeout+0x12a>
 800b86e:	4b44      	ldr	r3, [pc, #272]	; (800b980 <sys_timeout+0x134>)
 800b870:	22d4      	movs	r2, #212	; 0xd4
 800b872:	4944      	ldr	r1, [pc, #272]	; (800b984 <sys_timeout+0x138>)
 800b874:	4844      	ldr	r0, [pc, #272]	; (800b988 <sys_timeout+0x13c>)
 800b876:	f002 fefb 	bl	800e670 <iprintf>
    return;
 800b87a:	e07c      	b.n	800b976 <sys_timeout+0x12a>
  }

  now = sys_now();
 800b87c:	f7f9 fff2 	bl	8005864 <sys_now>
 800b880:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800b882:	4b42      	ldr	r3, [pc, #264]	; (800b98c <sys_timeout+0x140>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d105      	bne.n	800b896 <sys_timeout+0x4a>
    diff = 0;
 800b88a:	2300      	movs	r3, #0
 800b88c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800b88e:	4a40      	ldr	r2, [pc, #256]	; (800b990 <sys_timeout+0x144>)
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	e004      	b.n	800b8a0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800b896:	4b3e      	ldr	r3, [pc, #248]	; (800b990 <sys_timeout+0x144>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	441a      	add	r2, r3
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b8bc:	4b33      	ldr	r3, [pc, #204]	; (800b98c <sys_timeout+0x140>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d103      	bne.n	800b8cc <sys_timeout+0x80>
    next_timeout = timeout;
 800b8c4:	4a31      	ldr	r2, [pc, #196]	; (800b98c <sys_timeout+0x140>)
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	6013      	str	r3, [r2, #0]
    return;
 800b8ca:	e055      	b.n	800b978 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800b8cc:	4b2f      	ldr	r3, [pc, #188]	; (800b98c <sys_timeout+0x140>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d20f      	bcs.n	800b8f8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800b8d8:	4b2c      	ldr	r3, [pc, #176]	; (800b98c <sys_timeout+0x140>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6859      	ldr	r1, [r3, #4]
 800b8de:	4b2b      	ldr	r3, [pc, #172]	; (800b98c <sys_timeout+0x140>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	1a8a      	subs	r2, r1, r2
 800b8e6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800b8e8:	4b28      	ldr	r3, [pc, #160]	; (800b98c <sys_timeout+0x140>)
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b8f0:	4a26      	ldr	r2, [pc, #152]	; (800b98c <sys_timeout+0x140>)
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	6013      	str	r3, [r2, #0]
 800b8f6:	e03f      	b.n	800b978 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b8f8:	4b24      	ldr	r3, [pc, #144]	; (800b98c <sys_timeout+0x140>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	61fb      	str	r3, [r7, #28]
 800b8fe:	e036      	b.n	800b96e <sys_timeout+0x122>
      timeout->time -= t->time;
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	1ad2      	subs	r2, r2, r3
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d006      	beq.n	800b924 <sys_timeout+0xd8>
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	429a      	cmp	r2, r3
 800b922:	d921      	bls.n	800b968 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d009      	beq.n	800b940 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6859      	ldr	r1, [r3, #4]
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	1a8a      	subs	r2, r1, r2
 800b93c:	605a      	str	r2, [r3, #4]
 800b93e:	e00b      	b.n	800b958 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	429a      	cmp	r2, r3
 800b948:	d206      	bcs.n	800b958 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800b94a:	4b10      	ldr	r3, [pc, #64]	; (800b98c <sys_timeout+0x140>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	441a      	add	r2, r3
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	697a      	ldr	r2, [r7, #20]
 800b964:	601a      	str	r2, [r3, #0]
        break;
 800b966:	e007      	b.n	800b978 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	61fb      	str	r3, [r7, #28]
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1c5      	bne.n	800b900 <sys_timeout+0xb4>
 800b974:	e000      	b.n	800b978 <sys_timeout+0x12c>
    return;
 800b976:	bf00      	nop
      }
    }
  }
}
 800b978:	3720      	adds	r7, #32
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	08010b30 	.word	0x08010b30
 800b984:	08010b64 	.word	0x08010b64
 800b988:	08010ba4 	.word	0x08010ba4
 800b98c:	2000050c 	.word	0x2000050c
 800b990:	20000510 	.word	0x20000510

0800b994 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800b99a:	4b24      	ldr	r3, [pc, #144]	; (800ba2c <sys_check_timeouts+0x98>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d040      	beq.n	800ba24 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800b9a2:	f7f9 ff5f 	bl	8005864 <sys_now>
 800b9a6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800b9a8:	4b21      	ldr	r3, [pc, #132]	; (800ba30 <sys_check_timeouts+0x9c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800b9b2:	4b20      	ldr	r3, [pc, #128]	; (800ba34 <sys_check_timeouts+0xa0>)
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <sys_check_timeouts+0x2c>
 800b9bc:	f7fa fcdc 	bl	8006378 <pbuf_free_ooseq>
      had_one = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800b9c4:	4b19      	ldr	r3, [pc, #100]	; (800ba2c <sys_check_timeouts+0x98>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d026      	beq.n	800ba1e <sys_check_timeouts+0x8a>
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d321      	bcc.n	800ba1e <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	4b13      	ldr	r3, [pc, #76]	; (800ba30 <sys_check_timeouts+0x9c>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	4a11      	ldr	r2, [pc, #68]	; (800ba30 <sys_check_timeouts+0x9c>)
 800b9ea:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	697a      	ldr	r2, [r7, #20]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a0c      	ldr	r2, [pc, #48]	; (800ba2c <sys_check_timeouts+0x98>)
 800b9fc:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ba0a:	68b9      	ldr	r1, [r7, #8]
 800ba0c:	2006      	movs	r0, #6
 800ba0e:	f7fa fb2b 	bl	8006068 <memp_free>
        if (handler != NULL) {
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6838      	ldr	r0, [r7, #0]
 800ba1c:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800ba1e:	7cfb      	ldrb	r3, [r7, #19]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1c6      	bne.n	800b9b2 <sys_check_timeouts+0x1e>
  }
}
 800ba24:	bf00      	nop
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	2000050c 	.word	0x2000050c
 800ba30:	20000510 	.word	0x20000510
 800ba34:	20007b88 	.word	0x20007b88

0800ba38 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800ba3c:	bf00      	nop
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr
	...

0800ba48 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ba52:	4b17      	ldr	r3, [pc, #92]	; (800bab0 <udp_new_port+0x68>)
 800ba54:	881b      	ldrh	r3, [r3, #0]
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	b291      	uxth	r1, r2
 800ba5a:	4a15      	ldr	r2, [pc, #84]	; (800bab0 <udp_new_port+0x68>)
 800ba5c:	8011      	strh	r1, [r2, #0]
 800ba5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d103      	bne.n	800ba6e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ba66:	4b12      	ldr	r3, [pc, #72]	; (800bab0 <udp_new_port+0x68>)
 800ba68:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ba6c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba6e:	4b11      	ldr	r3, [pc, #68]	; (800bab4 <udp_new_port+0x6c>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	603b      	str	r3, [r7, #0]
 800ba74:	e011      	b.n	800ba9a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	8a5a      	ldrh	r2, [r3, #18]
 800ba7a:	4b0d      	ldr	r3, [pc, #52]	; (800bab0 <udp_new_port+0x68>)
 800ba7c:	881b      	ldrh	r3, [r3, #0]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d108      	bne.n	800ba94 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ba82:	88fb      	ldrh	r3, [r7, #6]
 800ba84:	3301      	adds	r3, #1
 800ba86:	80fb      	strh	r3, [r7, #6]
 800ba88:	88fb      	ldrh	r3, [r7, #6]
 800ba8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba8e:	d3e0      	bcc.n	800ba52 <udp_new_port+0xa>
        return 0;
 800ba90:	2300      	movs	r3, #0
 800ba92:	e007      	b.n	800baa4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	603b      	str	r3, [r7, #0]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1ea      	bne.n	800ba76 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800baa0:	4b03      	ldr	r3, [pc, #12]	; (800bab0 <udp_new_port+0x68>)
 800baa2:	881b      	ldrh	r3, [r3, #0]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	20000014 	.word	0x20000014
 800bab4:	20007ba8 	.word	0x20007ba8

0800bab8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	4613      	mov	r3, r2
 800bac4:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bac6:	79fb      	ldrb	r3, [r7, #7]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d018      	beq.n	800bafe <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d013      	beq.n	800bafa <udp_input_local_match+0x42>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00f      	beq.n	800bafa <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bada:	4b14      	ldr	r3, [pc, #80]	; (800bb2c <udp_input_local_match+0x74>)
 800badc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae2:	d00a      	beq.n	800bafa <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	4b10      	ldr	r3, [pc, #64]	; (800bb2c <udp_input_local_match+0x74>)
 800baea:	695b      	ldr	r3, [r3, #20]
 800baec:	405a      	eors	r2, r3
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	3308      	adds	r3, #8
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d110      	bne.n	800bb1c <udp_input_local_match+0x64>
          return 1;
 800bafa:	2301      	movs	r3, #1
 800bafc:	e00f      	b.n	800bb1e <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d009      	beq.n	800bb18 <udp_input_local_match+0x60>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d005      	beq.n	800bb18 <udp_input_local_match+0x60>
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	4b06      	ldr	r3, [pc, #24]	; (800bb2c <udp_input_local_match+0x74>)
 800bb12:	695b      	ldr	r3, [r3, #20]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d101      	bne.n	800bb1c <udp_input_local_match+0x64>
      return 1;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e000      	b.n	800bb1e <udp_input_local_match+0x66>
    }
  }

  return 0;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3714      	adds	r7, #20
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	20004660 	.word	0x20004660

0800bb30 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bb30:	b590      	push	{r4, r7, lr}
 800bb32:	b08d      	sub	sp, #52	; 0x34
 800bb34:	af02      	add	r7, sp, #8
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	895b      	ldrh	r3, [r3, #10]
 800bb42:	2b07      	cmp	r3, #7
 800bb44:	d803      	bhi.n	800bb4e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7fa ffb8 	bl	8006abc <pbuf_free>
    goto end;
 800bb4c:	e0c6      	b.n	800bcdc <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bb54:	4b63      	ldr	r3, [pc, #396]	; (800bce4 <udp_input+0x1b4>)
 800bb56:	695a      	ldr	r2, [r3, #20]
 800bb58:	4b62      	ldr	r3, [pc, #392]	; (800bce4 <udp_input+0x1b4>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4610      	mov	r0, r2
 800bb60:	f001 fe56 	bl	800d810 <ip4_addr_isbroadcast_u32>
 800bb64:	4603      	mov	r3, r0
 800bb66:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7f9 fe7f 	bl	8005872 <lwip_htons>
 800bb74:	4603      	mov	r3, r0
 800bb76:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	885b      	ldrh	r3, [r3, #2]
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7f9 fe77 	bl	8005872 <lwip_htons>
 800bb84:	4603      	mov	r3, r0
 800bb86:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb94:	4b54      	ldr	r3, [pc, #336]	; (800bce8 <udp_input+0x1b8>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	627b      	str	r3, [r7, #36]	; 0x24
 800bb9a:	e03b      	b.n	800bc14 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	8a5b      	ldrh	r3, [r3, #18]
 800bba0:	89fa      	ldrh	r2, [r7, #14]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d131      	bne.n	800bc0a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bba6:	7cfb      	ldrb	r3, [r7, #19]
 800bba8:	461a      	mov	r2, r3
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbae:	f7ff ff83 	bl	800bab8 <udp_input_local_match>
 800bbb2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d028      	beq.n	800bc0a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	7c1b      	ldrb	r3, [r3, #16]
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d104      	bne.n	800bbce <udp_input+0x9e>
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd0:	8a9b      	ldrh	r3, [r3, #20]
 800bbd2:	8a3a      	ldrh	r2, [r7, #16]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d118      	bne.n	800bc0a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbda:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d005      	beq.n	800bbec <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe2:	685a      	ldr	r2, [r3, #4]
 800bbe4:	4b3f      	ldr	r3, [pc, #252]	; (800bce4 <udp_input+0x1b4>)
 800bbe6:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d10e      	bne.n	800bc0a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d014      	beq.n	800bc1c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	6a3b      	ldr	r3, [r7, #32]
 800bbf8:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bbfa:	4b3b      	ldr	r3, [pc, #236]	; (800bce8 <udp_input+0x1b8>)
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bc02:	4a39      	ldr	r2, [pc, #228]	; (800bce8 <udp_input+0x1b8>)
 800bc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc06:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bc08:	e008      	b.n	800bc1c <udp_input+0xec>
      }
    }

    prev = pcb;
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	627b      	str	r3, [r7, #36]	; 0x24
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1c0      	bne.n	800bb9c <udp_input+0x6c>
 800bc1a:	e000      	b.n	800bc1e <udp_input+0xee>
        break;
 800bc1c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <udp_input+0xf8>
    pcb = uncon_pcb;
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d002      	beq.n	800bc34 <udp_input+0x104>
    for_us = 1;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	76fb      	strb	r3, [r7, #27]
 800bc32:	e00a      	b.n	800bc4a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	3304      	adds	r3, #4
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	4b2a      	ldr	r3, [pc, #168]	; (800bce4 <udp_input+0x1b4>)
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	bf0c      	ite	eq
 800bc42:	2301      	moveq	r3, #1
 800bc44:	2300      	movne	r3, #0
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bc4a:	7efb      	ldrb	r3, [r7, #27]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d042      	beq.n	800bcd6 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800bc50:	f06f 0107 	mvn.w	r1, #7
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7fa ff0d 	bl	8006a74 <pbuf_header>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00a      	beq.n	800bc76 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800bc60:	4b22      	ldr	r3, [pc, #136]	; (800bcec <udp_input+0x1bc>)
 800bc62:	f240 1255 	movw	r2, #341	; 0x155
 800bc66:	4922      	ldr	r1, [pc, #136]	; (800bcf0 <udp_input+0x1c0>)
 800bc68:	4822      	ldr	r0, [pc, #136]	; (800bcf4 <udp_input+0x1c4>)
 800bc6a:	f002 fd01 	bl	800e670 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7fa ff24 	bl	8006abc <pbuf_free>
      goto end;
 800bc74:	e032      	b.n	800bcdc <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d012      	beq.n	800bca2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00a      	beq.n	800bc9a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	699c      	ldr	r4, [r3, #24]
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	69d8      	ldr	r0, [r3, #28]
 800bc8c:	8a3b      	ldrh	r3, [r7, #16]
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	4b19      	ldr	r3, [pc, #100]	; (800bcf8 <udp_input+0x1c8>)
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bc98:	e021      	b.n	800bcde <udp_input+0x1ae>
        pbuf_free(p);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7fa ff0e 	bl	8006abc <pbuf_free>
        goto end;
 800bca0:	e01c      	b.n	800bcdc <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bca2:	7cfb      	ldrb	r3, [r7, #19]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d112      	bne.n	800bcce <udp_input+0x19e>
 800bca8:	4b0e      	ldr	r3, [pc, #56]	; (800bce4 <udp_input+0x1b4>)
 800bcaa:	695b      	ldr	r3, [r3, #20]
 800bcac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcb0:	2be0      	cmp	r3, #224	; 0xe0
 800bcb2:	d00c      	beq.n	800bcce <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bcb4:	4b0b      	ldr	r3, [pc, #44]	; (800bce4 <udp_input+0x1b4>)
 800bcb6:	899b      	ldrh	r3, [r3, #12]
 800bcb8:	3308      	adds	r3, #8
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	b21b      	sxth	r3, r3
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7fa fee9 	bl	8006a98 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bcc6:	2103      	movs	r1, #3
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f001 fa9f 	bl	800d20c <icmp_dest_unreach>
      pbuf_free(p);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7fa fef4 	bl	8006abc <pbuf_free>
  return;
 800bcd4:	e003      	b.n	800bcde <udp_input+0x1ae>
    pbuf_free(p);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f7fa fef0 	bl	8006abc <pbuf_free>
  return;
 800bcdc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bcde:	372c      	adds	r7, #44	; 0x2c
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd90      	pop	{r4, r7, pc}
 800bce4:	20004660 	.word	0x20004660
 800bce8:	20007ba8 	.word	0x20007ba8
 800bcec:	08010bcc 	.word	0x08010bcc
 800bcf0:	08010bfc 	.word	0x08010bfc
 800bcf4:	08010c10 	.word	0x08010c10
 800bcf8:	20004670 	.word	0x20004670

0800bcfc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d102      	bne.n	800bd12 <udp_send+0x16>
    return ERR_VAL;
 800bd0c:	f06f 0305 	mvn.w	r3, #5
 800bd10:	e008      	b.n	800bd24 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	1d1a      	adds	r2, r3, #4
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	8a9b      	ldrh	r3, [r3, #20]
 800bd1a:	6839      	ldr	r1, [r7, #0]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f805 	bl	800bd2c <udp_sendto>
 800bd22:	4603      	mov	r3, r0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b088      	sub	sp, #32
 800bd30:	af02      	add	r7, sp, #8
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
 800bd38:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d002      	beq.n	800bd4a <udp_sendto+0x1e>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d102      	bne.n	800bd50 <udp_sendto+0x24>
    return ERR_VAL;
 800bd4a:	f06f 0305 	mvn.w	r3, #5
 800bd4e:	e013      	b.n	800bd78 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800bd50:	6978      	ldr	r0, [r7, #20]
 800bd52:	f001 fae3 	bl	800d31c <ip4_route>
 800bd56:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800bd5e:	f06f 0303 	mvn.w	r3, #3
 800bd62:	e009      	b.n	800bd78 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800bd64:	887a      	ldrh	r2, [r7, #2]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	68b9      	ldr	r1, [r7, #8]
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 f805 	bl	800bd80 <udp_sendto_if>
 800bd76:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af02      	add	r7, sp, #8
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d002      	beq.n	800bd9a <udp_sendto_if+0x1a>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d102      	bne.n	800bda0 <udp_sendto_if+0x20>
    return ERR_VAL;
 800bd9a:	f06f 0305 	mvn.w	r3, #5
 800bd9e:	e028      	b.n	800bdf2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d009      	beq.n	800bdba <udp_sendto_if+0x3a>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d005      	beq.n	800bdba <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bdb6:	2be0      	cmp	r3, #224	; 0xe0
 800bdb8:	d103      	bne.n	800bdc2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	617b      	str	r3, [r7, #20]
 800bdc0:	e00b      	b.n	800bdda <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	6a3b      	ldr	r3, [r7, #32]
 800bdc8:	3304      	adds	r3, #4
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d002      	beq.n	800bdd6 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800bdd0:	f06f 0303 	mvn.w	r3, #3
 800bdd4:	e00d      	b.n	800bdf2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800bdda:	887a      	ldrh	r2, [r7, #2]
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	4613      	mov	r3, r2
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	68b9      	ldr	r1, [r7, #8]
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	f000 f806 	bl	800bdfc <udp_sendto_if_src>
 800bdf0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3718      	adds	r7, #24
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
	...

0800bdfc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08c      	sub	sp, #48	; 0x30
 800be00:	af04      	add	r7, sp, #16
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
 800be08:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d002      	beq.n	800be16 <udp_sendto_if_src+0x1a>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d102      	bne.n	800be1c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800be16:	f06f 0305 	mvn.w	r3, #5
 800be1a:	e07e      	b.n	800bf1a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	8a5b      	ldrh	r3, [r3, #18]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10f      	bne.n	800be44 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800be24:	68f9      	ldr	r1, [r7, #12]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	8a5b      	ldrh	r3, [r3, #18]
 800be2a:	461a      	mov	r2, r3
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f000 f87f 	bl	800bf30 <udp_bind>
 800be32:	4603      	mov	r3, r0
 800be34:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800be36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d002      	beq.n	800be44 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800be3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be42:	e06a      	b.n	800bf1a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800be44:	2108      	movs	r1, #8
 800be46:	68b8      	ldr	r0, [r7, #8]
 800be48:	f7fa fe14 	bl	8006a74 <pbuf_header>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d014      	beq.n	800be7c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800be52:	2200      	movs	r2, #0
 800be54:	2108      	movs	r1, #8
 800be56:	2001      	movs	r0, #1
 800be58:	f7fa fabe 	bl	80063d8 <pbuf_alloc>
 800be5c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d102      	bne.n	800be6a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800be64:	f04f 33ff 	mov.w	r3, #4294967295
 800be68:	e057      	b.n	800bf1a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	891b      	ldrh	r3, [r3, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d006      	beq.n	800be80 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800be72:	68b9      	ldr	r1, [r7, #8]
 800be74:	69f8      	ldr	r0, [r7, #28]
 800be76:	f7fa ff45 	bl	8006d04 <pbuf_chain>
 800be7a:	e001      	b.n	800be80 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	895b      	ldrh	r3, [r3, #10]
 800be84:	2b07      	cmp	r3, #7
 800be86:	d806      	bhi.n	800be96 <udp_sendto_if_src+0x9a>
 800be88:	4b26      	ldr	r3, [pc, #152]	; (800bf24 <udp_sendto_if_src+0x128>)
 800be8a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800be8e:	4926      	ldr	r1, [pc, #152]	; (800bf28 <udp_sendto_if_src+0x12c>)
 800be90:	4826      	ldr	r0, [pc, #152]	; (800bf2c <udp_sendto_if_src+0x130>)
 800be92:	f002 fbed 	bl	800e670 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	8a5b      	ldrh	r3, [r3, #18]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7f9 fce6 	bl	8005872 <lwip_htons>
 800bea6:	4603      	mov	r3, r0
 800bea8:	461a      	mov	r2, r3
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800beae:	887b      	ldrh	r3, [r7, #2]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7f9 fcde 	bl	8005872 <lwip_htons>
 800beb6:	4603      	mov	r3, r0
 800beb8:	461a      	mov	r2, r3
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	2200      	movs	r2, #0
 800bec2:	719a      	strb	r2, [r3, #6]
 800bec4:	2200      	movs	r2, #0
 800bec6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	891b      	ldrh	r3, [r3, #8]
 800becc:	4618      	mov	r0, r3
 800bece:	f7f9 fcd0 	bl	8005872 <lwip_htons>
 800bed2:	4603      	mov	r3, r0
 800bed4:	461a      	mov	r2, r3
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800beda:	2311      	movs	r3, #17
 800bedc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	7a9b      	ldrb	r3, [r3, #10]
 800bee2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	7a5b      	ldrb	r3, [r3, #9]
 800bee8:	7cb9      	ldrb	r1, [r7, #18]
 800beea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beec:	9202      	str	r2, [sp, #8]
 800beee:	7cfa      	ldrb	r2, [r7, #19]
 800bef0:	9201      	str	r2, [sp, #4]
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	460b      	mov	r3, r1
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800befa:	69f8      	ldr	r0, [r7, #28]
 800befc:	f001 fbe0 	bl	800d6c0 <ip4_output_if_src>
 800bf00:	4603      	mov	r3, r0
 800bf02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800bf04:	69fa      	ldr	r2, [r7, #28]
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d004      	beq.n	800bf16 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800bf0c:	69f8      	ldr	r0, [r7, #28]
 800bf0e:	f7fa fdd5 	bl	8006abc <pbuf_free>
    q = NULL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800bf16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3720      	adds	r7, #32
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	08010bcc 	.word	0x08010bcc
 800bf28:	08010c38 	.word	0x08010c38
 800bf2c:	08010c10 	.word	0x08010c10

0800bf30 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d101      	bne.n	800bf48 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800bf44:	4b30      	ldr	r3, [pc, #192]	; (800c008 <udp_bind+0xd8>)
 800bf46:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d002      	beq.n	800bf54 <udp_bind+0x24>
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d102      	bne.n	800bf5a <udp_bind+0x2a>
    return ERR_VAL;
 800bf54:	f06f 0305 	mvn.w	r3, #5
 800bf58:	e052      	b.n	800c000 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bf5e:	4b2b      	ldr	r3, [pc, #172]	; (800c00c <udp_bind+0xdc>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	617b      	str	r3, [r7, #20]
 800bf64:	e009      	b.n	800bf7a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d102      	bne.n	800bf74 <udp_bind+0x44>
      rebind = 1;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	74fb      	strb	r3, [r7, #19]
      break;
 800bf72:	e005      	b.n	800bf80 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	617b      	str	r3, [r7, #20]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d1f2      	bne.n	800bf66 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800bf80:	88fb      	ldrh	r3, [r7, #6]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d109      	bne.n	800bf9a <udp_bind+0x6a>
    port = udp_new_port();
 800bf86:	f7ff fd5f 	bl	800ba48 <udp_new_port>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800bf8e:	88fb      	ldrh	r3, [r7, #6]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d11e      	bne.n	800bfd2 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800bf94:	f06f 0307 	mvn.w	r3, #7
 800bf98:	e032      	b.n	800c000 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bf9a:	4b1c      	ldr	r3, [pc, #112]	; (800c00c <udp_bind+0xdc>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	617b      	str	r3, [r7, #20]
 800bfa0:	e014      	b.n	800bfcc <udp_bind+0x9c>
      if (pcb != ipcb) {
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d00d      	beq.n	800bfc6 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	8a5b      	ldrh	r3, [r3, #18]
 800bfae:	88fa      	ldrh	r2, [r7, #6]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d108      	bne.n	800bfc6 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d102      	bne.n	800bfc6 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800bfc0:	f06f 0307 	mvn.w	r3, #7
 800bfc4:	e01c      	b.n	800c000 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	617b      	str	r3, [r7, #20]
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d1e7      	bne.n	800bfa2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d002      	beq.n	800bfde <udp_bind+0xae>
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	e000      	b.n	800bfe0 <udp_bind+0xb0>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	88fa      	ldrh	r2, [r7, #6]
 800bfe8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800bfea:	7cfb      	ldrb	r3, [r7, #19]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d106      	bne.n	800bffe <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800bff0:	4b06      	ldr	r3, [pc, #24]	; (800c00c <udp_bind+0xdc>)
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800bff8:	4a04      	ldr	r2, [pc, #16]	; (800c00c <udp_bind+0xdc>)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3718      	adds	r7, #24
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	080113d8 	.word	0x080113d8
 800c00c:	20007ba8 	.word	0x20007ba8

0800c010 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	4613      	mov	r3, r2
 800c01c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <udp_connect+0x1a>
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d102      	bne.n	800c030 <udp_connect+0x20>
    return ERR_VAL;
 800c02a:	f06f 0305 	mvn.w	r3, #5
 800c02e:	e03e      	b.n	800c0ae <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	8a5b      	ldrh	r3, [r3, #18]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10f      	bne.n	800c058 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c038:	68f9      	ldr	r1, [r7, #12]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	8a5b      	ldrh	r3, [r3, #18]
 800c03e:	461a      	mov	r2, r3
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f7ff ff75 	bl	800bf30 <udp_bind>
 800c046:	4603      	mov	r3, r0
 800c048:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c04a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d002      	beq.n	800c058 <udp_connect+0x48>
      return err;
 800c052:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c056:	e02a      	b.n	800c0ae <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d002      	beq.n	800c064 <udp_connect+0x54>
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	e000      	b.n	800c066 <udp_connect+0x56>
 800c064:	2300      	movs	r3, #0
 800c066:	68fa      	ldr	r2, [r7, #12]
 800c068:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	88fa      	ldrh	r2, [r7, #6]
 800c06e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	7c1b      	ldrb	r3, [r3, #16]
 800c074:	f043 0304 	orr.w	r3, r3, #4
 800c078:	b2da      	uxtb	r2, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c07e:	4b0e      	ldr	r3, [pc, #56]	; (800c0b8 <udp_connect+0xa8>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	617b      	str	r3, [r7, #20]
 800c084:	e008      	b.n	800c098 <udp_connect+0x88>
    if (pcb == ipcb) {
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d101      	bne.n	800c092 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	e00d      	b.n	800c0ae <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	617b      	str	r3, [r7, #20]
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1f3      	bne.n	800c086 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c09e:	4b06      	ldr	r3, [pc, #24]	; (800c0b8 <udp_connect+0xa8>)
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c0a6:	4a04      	ldr	r2, [pc, #16]	; (800c0b8 <udp_connect+0xa8>)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	20007ba8 	.word	0x20007ba8

0800c0bc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	61da      	str	r2, [r3, #28]
}
 800c0d4:	bf00      	nop
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c0e8:	4b15      	ldr	r3, [pc, #84]	; (800c140 <udp_remove+0x60>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d105      	bne.n	800c0fe <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c0f2:	4b13      	ldr	r3, [pc, #76]	; (800c140 <udp_remove+0x60>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	4a11      	ldr	r2, [pc, #68]	; (800c140 <udp_remove+0x60>)
 800c0fa:	6013      	str	r3, [r2, #0]
 800c0fc:	e017      	b.n	800c12e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c0fe:	4b10      	ldr	r3, [pc, #64]	; (800c140 <udp_remove+0x60>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	60fb      	str	r3, [r7, #12]
 800c104:	e010      	b.n	800c128 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d009      	beq.n	800c122 <udp_remove+0x42>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	429a      	cmp	r2, r3
 800c116:	d104      	bne.n	800c122 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	68da      	ldr	r2, [r3, #12]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	60da      	str	r2, [r3, #12]
        break;
 800c120:	e005      	b.n	800c12e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	60fb      	str	r3, [r7, #12]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1eb      	bne.n	800c106 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c12e:	6879      	ldr	r1, [r7, #4]
 800c130:	2000      	movs	r0, #0
 800c132:	f7f9 ff99 	bl	8006068 <memp_free>
}
 800c136:	bf00      	nop
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	20007ba8 	.word	0x20007ba8

0800c144 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c14a:	2000      	movs	r0, #0
 800c14c:	f7f9 ff40 	bl	8005fd0 <memp_malloc>
 800c150:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d007      	beq.n	800c168 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c158:	2220      	movs	r2, #32
 800c15a:	2100      	movs	r1, #0
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f002 fa7f 	bl	800e660 <memset>
    pcb->ttl = UDP_TTL;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	22ff      	movs	r2, #255	; 0xff
 800c166:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c168:	687b      	ldr	r3, [r7, #4]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
	...

0800c174 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d01e      	beq.n	800c1c2 <udp_netif_ip_addr_changed+0x4e>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d01a      	beq.n	800c1c2 <udp_netif_ip_addr_changed+0x4e>
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d017      	beq.n	800c1c2 <udp_netif_ip_addr_changed+0x4e>
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d013      	beq.n	800c1c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c19a:	4b0d      	ldr	r3, [pc, #52]	; (800c1d0 <udp_netif_ip_addr_changed+0x5c>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	e00c      	b.n	800c1bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d103      	bne.n	800c1b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	60fb      	str	r3, [r7, #12]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1ef      	bne.n	800c1a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c1c2:	bf00      	nop
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	20007ba8 	.word	0x20007ba8

0800c1d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c1dc:	4915      	ldr	r1, [pc, #84]	; (800c234 <etharp_free_entry+0x60>)
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	005b      	lsls	r3, r3, #1
 800c1e4:	4413      	add	r3, r2
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	440b      	add	r3, r1
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d013      	beq.n	800c218 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c1f0:	4910      	ldr	r1, [pc, #64]	; (800c234 <etharp_free_entry+0x60>)
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	005b      	lsls	r3, r3, #1
 800c1f8:	4413      	add	r3, r2
 800c1fa:	00db      	lsls	r3, r3, #3
 800c1fc:	440b      	add	r3, r1
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4618      	mov	r0, r3
 800c202:	f7fa fc5b 	bl	8006abc <pbuf_free>
    arp_table[i].q = NULL;
 800c206:	490b      	ldr	r1, [pc, #44]	; (800c234 <etharp_free_entry+0x60>)
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	4613      	mov	r3, r2
 800c20c:	005b      	lsls	r3, r3, #1
 800c20e:	4413      	add	r3, r2
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	440b      	add	r3, r1
 800c214:	2200      	movs	r2, #0
 800c216:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c218:	4906      	ldr	r1, [pc, #24]	; (800c234 <etharp_free_entry+0x60>)
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	4613      	mov	r3, r2
 800c21e:	005b      	lsls	r3, r3, #1
 800c220:	4413      	add	r3, r2
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	440b      	add	r3, r1
 800c226:	3314      	adds	r3, #20
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c22c:	bf00      	nop
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	20000518 	.word	0x20000518

0800c238 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c23e:	2300      	movs	r3, #0
 800c240:	71fb      	strb	r3, [r7, #7]
 800c242:	e096      	b.n	800c372 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c244:	79fa      	ldrb	r2, [r7, #7]
 800c246:	494f      	ldr	r1, [pc, #316]	; (800c384 <etharp_tmr+0x14c>)
 800c248:	4613      	mov	r3, r2
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	4413      	add	r3, r2
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	440b      	add	r3, r1
 800c252:	3314      	adds	r3, #20
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800c258:	79bb      	ldrb	r3, [r7, #6]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	f000 8086 	beq.w	800c36c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800c260:	79fa      	ldrb	r2, [r7, #7]
 800c262:	4948      	ldr	r1, [pc, #288]	; (800c384 <etharp_tmr+0x14c>)
 800c264:	4613      	mov	r3, r2
 800c266:	005b      	lsls	r3, r3, #1
 800c268:	4413      	add	r3, r2
 800c26a:	00db      	lsls	r3, r3, #3
 800c26c:	440b      	add	r3, r1
 800c26e:	3312      	adds	r3, #18
 800c270:	881b      	ldrh	r3, [r3, #0]
 800c272:	3301      	adds	r3, #1
 800c274:	b298      	uxth	r0, r3
 800c276:	4943      	ldr	r1, [pc, #268]	; (800c384 <etharp_tmr+0x14c>)
 800c278:	4613      	mov	r3, r2
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	4413      	add	r3, r2
 800c27e:	00db      	lsls	r3, r3, #3
 800c280:	440b      	add	r3, r1
 800c282:	3312      	adds	r3, #18
 800c284:	4602      	mov	r2, r0
 800c286:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c288:	79fa      	ldrb	r2, [r7, #7]
 800c28a:	493e      	ldr	r1, [pc, #248]	; (800c384 <etharp_tmr+0x14c>)
 800c28c:	4613      	mov	r3, r2
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	4413      	add	r3, r2
 800c292:	00db      	lsls	r3, r3, #3
 800c294:	440b      	add	r3, r1
 800c296:	3312      	adds	r3, #18
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c29e:	d215      	bcs.n	800c2cc <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c2a0:	79fa      	ldrb	r2, [r7, #7]
 800c2a2:	4938      	ldr	r1, [pc, #224]	; (800c384 <etharp_tmr+0x14c>)
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	4413      	add	r3, r2
 800c2aa:	00db      	lsls	r3, r3, #3
 800c2ac:	440b      	add	r3, r1
 800c2ae:	3314      	adds	r3, #20
 800c2b0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d10f      	bne.n	800c2d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c2b6:	79fa      	ldrb	r2, [r7, #7]
 800c2b8:	4932      	ldr	r1, [pc, #200]	; (800c384 <etharp_tmr+0x14c>)
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	4413      	add	r3, r2
 800c2c0:	00db      	lsls	r3, r3, #3
 800c2c2:	440b      	add	r3, r1
 800c2c4:	3312      	adds	r3, #18
 800c2c6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c2c8:	2b04      	cmp	r3, #4
 800c2ca:	d904      	bls.n	800c2d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c2cc:	79fb      	ldrb	r3, [r7, #7]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7ff ff80 	bl	800c1d4 <etharp_free_entry>
 800c2d4:	e04a      	b.n	800c36c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c2d6:	79fa      	ldrb	r2, [r7, #7]
 800c2d8:	492a      	ldr	r1, [pc, #168]	; (800c384 <etharp_tmr+0x14c>)
 800c2da:	4613      	mov	r3, r2
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	4413      	add	r3, r2
 800c2e0:	00db      	lsls	r3, r3, #3
 800c2e2:	440b      	add	r3, r1
 800c2e4:	3314      	adds	r3, #20
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	2b03      	cmp	r3, #3
 800c2ea:	d10a      	bne.n	800c302 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c2ec:	79fa      	ldrb	r2, [r7, #7]
 800c2ee:	4925      	ldr	r1, [pc, #148]	; (800c384 <etharp_tmr+0x14c>)
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	4413      	add	r3, r2
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	440b      	add	r3, r1
 800c2fa:	3314      	adds	r3, #20
 800c2fc:	2204      	movs	r2, #4
 800c2fe:	701a      	strb	r2, [r3, #0]
 800c300:	e034      	b.n	800c36c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c302:	79fa      	ldrb	r2, [r7, #7]
 800c304:	491f      	ldr	r1, [pc, #124]	; (800c384 <etharp_tmr+0x14c>)
 800c306:	4613      	mov	r3, r2
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	4413      	add	r3, r2
 800c30c:	00db      	lsls	r3, r3, #3
 800c30e:	440b      	add	r3, r1
 800c310:	3314      	adds	r3, #20
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	2b04      	cmp	r3, #4
 800c316:	d10a      	bne.n	800c32e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c318:	79fa      	ldrb	r2, [r7, #7]
 800c31a:	491a      	ldr	r1, [pc, #104]	; (800c384 <etharp_tmr+0x14c>)
 800c31c:	4613      	mov	r3, r2
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	4413      	add	r3, r2
 800c322:	00db      	lsls	r3, r3, #3
 800c324:	440b      	add	r3, r1
 800c326:	3314      	adds	r3, #20
 800c328:	2202      	movs	r2, #2
 800c32a:	701a      	strb	r2, [r3, #0]
 800c32c:	e01e      	b.n	800c36c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c32e:	79fa      	ldrb	r2, [r7, #7]
 800c330:	4914      	ldr	r1, [pc, #80]	; (800c384 <etharp_tmr+0x14c>)
 800c332:	4613      	mov	r3, r2
 800c334:	005b      	lsls	r3, r3, #1
 800c336:	4413      	add	r3, r2
 800c338:	00db      	lsls	r3, r3, #3
 800c33a:	440b      	add	r3, r1
 800c33c:	3314      	adds	r3, #20
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d113      	bne.n	800c36c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c344:	79fa      	ldrb	r2, [r7, #7]
 800c346:	490f      	ldr	r1, [pc, #60]	; (800c384 <etharp_tmr+0x14c>)
 800c348:	4613      	mov	r3, r2
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	4413      	add	r3, r2
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	440b      	add	r3, r1
 800c352:	3308      	adds	r3, #8
 800c354:	6818      	ldr	r0, [r3, #0]
 800c356:	79fa      	ldrb	r2, [r7, #7]
 800c358:	4613      	mov	r3, r2
 800c35a:	005b      	lsls	r3, r3, #1
 800c35c:	4413      	add	r3, r2
 800c35e:	00db      	lsls	r3, r3, #3
 800c360:	4a08      	ldr	r2, [pc, #32]	; (800c384 <etharp_tmr+0x14c>)
 800c362:	4413      	add	r3, r2
 800c364:	3304      	adds	r3, #4
 800c366:	4619      	mov	r1, r3
 800c368:	f000 fe38 	bl	800cfdc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c36c:	79fb      	ldrb	r3, [r7, #7]
 800c36e:	3301      	adds	r3, #1
 800c370:	71fb      	strb	r3, [r7, #7]
 800c372:	79fb      	ldrb	r3, [r7, #7]
 800c374:	2b09      	cmp	r3, #9
 800c376:	f67f af65 	bls.w	800c244 <etharp_tmr+0xc>
      }
    }
  }
}
 800c37a:	bf00      	nop
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	20000518 	.word	0x20000518

0800c388 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b088      	sub	sp, #32
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	460b      	mov	r3, r1
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c396:	230a      	movs	r3, #10
 800c398:	77fb      	strb	r3, [r7, #31]
 800c39a:	230a      	movs	r3, #10
 800c39c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800c39e:	230a      	movs	r3, #10
 800c3a0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800c3a6:	230a      	movs	r3, #10
 800c3a8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	833b      	strh	r3, [r7, #24]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	82fb      	strh	r3, [r7, #22]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	773b      	strb	r3, [r7, #28]
 800c3ba:	e093      	b.n	800c4e4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800c3bc:	7f3a      	ldrb	r2, [r7, #28]
 800c3be:	4990      	ldr	r1, [pc, #576]	; (800c600 <etharp_find_entry+0x278>)
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	4413      	add	r3, r2
 800c3c6:	00db      	lsls	r3, r3, #3
 800c3c8:	440b      	add	r3, r1
 800c3ca:	3314      	adds	r3, #20
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c3d0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c3d4:	2b0a      	cmp	r3, #10
 800c3d6:	d105      	bne.n	800c3e4 <etharp_find_entry+0x5c>
 800c3d8:	7cfb      	ldrb	r3, [r7, #19]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d102      	bne.n	800c3e4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800c3de:	7f3b      	ldrb	r3, [r7, #28]
 800c3e0:	777b      	strb	r3, [r7, #29]
 800c3e2:	e07c      	b.n	800c4de <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c3e4:	7cfb      	ldrb	r3, [r7, #19]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d079      	beq.n	800c4de <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c3ea:	7cfb      	ldrb	r3, [r7, #19]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d009      	beq.n	800c404 <etharp_find_entry+0x7c>
 800c3f0:	7cfb      	ldrb	r3, [r7, #19]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d806      	bhi.n	800c404 <etharp_find_entry+0x7c>
 800c3f6:	4b83      	ldr	r3, [pc, #524]	; (800c604 <etharp_find_entry+0x27c>)
 800c3f8:	f44f 7293 	mov.w	r2, #294	; 0x126
 800c3fc:	4982      	ldr	r1, [pc, #520]	; (800c608 <etharp_find_entry+0x280>)
 800c3fe:	4883      	ldr	r0, [pc, #524]	; (800c60c <etharp_find_entry+0x284>)
 800c400:	f002 f936 	bl	800e670 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00f      	beq.n	800c42a <etharp_find_entry+0xa2>
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6819      	ldr	r1, [r3, #0]
 800c40e:	7f3a      	ldrb	r2, [r7, #28]
 800c410:	487b      	ldr	r0, [pc, #492]	; (800c600 <etharp_find_entry+0x278>)
 800c412:	4613      	mov	r3, r2
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	4413      	add	r3, r2
 800c418:	00db      	lsls	r3, r3, #3
 800c41a:	4403      	add	r3, r0
 800c41c:	3304      	adds	r3, #4
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4299      	cmp	r1, r3
 800c422:	d102      	bne.n	800c42a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c424:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c428:	e0e5      	b.n	800c5f6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c42a:	7cfb      	ldrb	r3, [r7, #19]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d13b      	bne.n	800c4a8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c430:	7f3a      	ldrb	r2, [r7, #28]
 800c432:	4973      	ldr	r1, [pc, #460]	; (800c600 <etharp_find_entry+0x278>)
 800c434:	4613      	mov	r3, r2
 800c436:	005b      	lsls	r3, r3, #1
 800c438:	4413      	add	r3, r2
 800c43a:	00db      	lsls	r3, r3, #3
 800c43c:	440b      	add	r3, r1
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d018      	beq.n	800c476 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800c444:	7f3a      	ldrb	r2, [r7, #28]
 800c446:	496e      	ldr	r1, [pc, #440]	; (800c600 <etharp_find_entry+0x278>)
 800c448:	4613      	mov	r3, r2
 800c44a:	005b      	lsls	r3, r3, #1
 800c44c:	4413      	add	r3, r2
 800c44e:	00db      	lsls	r3, r3, #3
 800c450:	440b      	add	r3, r1
 800c452:	3312      	adds	r3, #18
 800c454:	881b      	ldrh	r3, [r3, #0]
 800c456:	8b3a      	ldrh	r2, [r7, #24]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d840      	bhi.n	800c4de <etharp_find_entry+0x156>
            old_queue = i;
 800c45c:	7f3b      	ldrb	r3, [r7, #28]
 800c45e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800c460:	7f3a      	ldrb	r2, [r7, #28]
 800c462:	4967      	ldr	r1, [pc, #412]	; (800c600 <etharp_find_entry+0x278>)
 800c464:	4613      	mov	r3, r2
 800c466:	005b      	lsls	r3, r3, #1
 800c468:	4413      	add	r3, r2
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	440b      	add	r3, r1
 800c46e:	3312      	adds	r3, #18
 800c470:	881b      	ldrh	r3, [r3, #0]
 800c472:	833b      	strh	r3, [r7, #24]
 800c474:	e033      	b.n	800c4de <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c476:	7f3a      	ldrb	r2, [r7, #28]
 800c478:	4961      	ldr	r1, [pc, #388]	; (800c600 <etharp_find_entry+0x278>)
 800c47a:	4613      	mov	r3, r2
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	4413      	add	r3, r2
 800c480:	00db      	lsls	r3, r3, #3
 800c482:	440b      	add	r3, r1
 800c484:	3312      	adds	r3, #18
 800c486:	881b      	ldrh	r3, [r3, #0]
 800c488:	8afa      	ldrh	r2, [r7, #22]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d827      	bhi.n	800c4de <etharp_find_entry+0x156>
            old_pending = i;
 800c48e:	7f3b      	ldrb	r3, [r7, #28]
 800c490:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800c492:	7f3a      	ldrb	r2, [r7, #28]
 800c494:	495a      	ldr	r1, [pc, #360]	; (800c600 <etharp_find_entry+0x278>)
 800c496:	4613      	mov	r3, r2
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	4413      	add	r3, r2
 800c49c:	00db      	lsls	r3, r3, #3
 800c49e:	440b      	add	r3, r1
 800c4a0:	3312      	adds	r3, #18
 800c4a2:	881b      	ldrh	r3, [r3, #0]
 800c4a4:	82fb      	strh	r3, [r7, #22]
 800c4a6:	e01a      	b.n	800c4de <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c4a8:	7cfb      	ldrb	r3, [r7, #19]
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d917      	bls.n	800c4de <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c4ae:	7f3a      	ldrb	r2, [r7, #28]
 800c4b0:	4953      	ldr	r1, [pc, #332]	; (800c600 <etharp_find_entry+0x278>)
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	4413      	add	r3, r2
 800c4b8:	00db      	lsls	r3, r3, #3
 800c4ba:	440b      	add	r3, r1
 800c4bc:	3312      	adds	r3, #18
 800c4be:	881b      	ldrh	r3, [r3, #0]
 800c4c0:	8aba      	ldrh	r2, [r7, #20]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d80b      	bhi.n	800c4de <etharp_find_entry+0x156>
            old_stable = i;
 800c4c6:	7f3b      	ldrb	r3, [r7, #28]
 800c4c8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800c4ca:	7f3a      	ldrb	r2, [r7, #28]
 800c4cc:	494c      	ldr	r1, [pc, #304]	; (800c600 <etharp_find_entry+0x278>)
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	005b      	lsls	r3, r3, #1
 800c4d2:	4413      	add	r3, r2
 800c4d4:	00db      	lsls	r3, r3, #3
 800c4d6:	440b      	add	r3, r1
 800c4d8:	3312      	adds	r3, #18
 800c4da:	881b      	ldrh	r3, [r3, #0]
 800c4dc:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c4de:	7f3b      	ldrb	r3, [r7, #28]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	773b      	strb	r3, [r7, #28]
 800c4e4:	7f3b      	ldrb	r3, [r7, #28]
 800c4e6:	2b09      	cmp	r3, #9
 800c4e8:	f67f af68 	bls.w	800c3bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c4ec:	7afb      	ldrb	r3, [r7, #11]
 800c4ee:	f003 0302 	and.w	r3, r3, #2
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d108      	bne.n	800c508 <etharp_find_entry+0x180>
 800c4f6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c4fa:	2b0a      	cmp	r3, #10
 800c4fc:	d107      	bne.n	800c50e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c4fe:	7afb      	ldrb	r3, [r7, #11]
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	2b00      	cmp	r3, #0
 800c506:	d102      	bne.n	800c50e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800c508:	f04f 33ff 	mov.w	r3, #4294967295
 800c50c:	e073      	b.n	800c5f6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c50e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c512:	2b09      	cmp	r3, #9
 800c514:	dc02      	bgt.n	800c51c <etharp_find_entry+0x194>
    i = empty;
 800c516:	7f7b      	ldrb	r3, [r7, #29]
 800c518:	773b      	strb	r3, [r7, #28]
 800c51a:	e036      	b.n	800c58a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c51c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c520:	2b09      	cmp	r3, #9
 800c522:	dc13      	bgt.n	800c54c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800c524:	7fbb      	ldrb	r3, [r7, #30]
 800c526:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c528:	7f3a      	ldrb	r2, [r7, #28]
 800c52a:	4935      	ldr	r1, [pc, #212]	; (800c600 <etharp_find_entry+0x278>)
 800c52c:	4613      	mov	r3, r2
 800c52e:	005b      	lsls	r3, r3, #1
 800c530:	4413      	add	r3, r2
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	440b      	add	r3, r1
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d018      	beq.n	800c56e <etharp_find_entry+0x1e6>
 800c53c:	4b31      	ldr	r3, [pc, #196]	; (800c604 <etharp_find_entry+0x27c>)
 800c53e:	f240 126f 	movw	r2, #367	; 0x16f
 800c542:	4933      	ldr	r1, [pc, #204]	; (800c610 <etharp_find_entry+0x288>)
 800c544:	4831      	ldr	r0, [pc, #196]	; (800c60c <etharp_find_entry+0x284>)
 800c546:	f002 f893 	bl	800e670 <iprintf>
 800c54a:	e010      	b.n	800c56e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c54c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c550:	2b09      	cmp	r3, #9
 800c552:	dc02      	bgt.n	800c55a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800c554:	7ffb      	ldrb	r3, [r7, #31]
 800c556:	773b      	strb	r3, [r7, #28]
 800c558:	e009      	b.n	800c56e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c55a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c55e:	2b09      	cmp	r3, #9
 800c560:	dc02      	bgt.n	800c568 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c562:	7efb      	ldrb	r3, [r7, #27]
 800c564:	773b      	strb	r3, [r7, #28]
 800c566:	e002      	b.n	800c56e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800c568:	f04f 33ff 	mov.w	r3, #4294967295
 800c56c:	e043      	b.n	800c5f6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c56e:	7f3b      	ldrb	r3, [r7, #28]
 800c570:	2b09      	cmp	r3, #9
 800c572:	d906      	bls.n	800c582 <etharp_find_entry+0x1fa>
 800c574:	4b23      	ldr	r3, [pc, #140]	; (800c604 <etharp_find_entry+0x27c>)
 800c576:	f240 1281 	movw	r2, #385	; 0x181
 800c57a:	4926      	ldr	r1, [pc, #152]	; (800c614 <etharp_find_entry+0x28c>)
 800c57c:	4823      	ldr	r0, [pc, #140]	; (800c60c <etharp_find_entry+0x284>)
 800c57e:	f002 f877 	bl	800e670 <iprintf>
    etharp_free_entry(i);
 800c582:	7f3b      	ldrb	r3, [r7, #28]
 800c584:	4618      	mov	r0, r3
 800c586:	f7ff fe25 	bl	800c1d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c58a:	7f3b      	ldrb	r3, [r7, #28]
 800c58c:	2b09      	cmp	r3, #9
 800c58e:	d906      	bls.n	800c59e <etharp_find_entry+0x216>
 800c590:	4b1c      	ldr	r3, [pc, #112]	; (800c604 <etharp_find_entry+0x27c>)
 800c592:	f240 1285 	movw	r2, #389	; 0x185
 800c596:	491f      	ldr	r1, [pc, #124]	; (800c614 <etharp_find_entry+0x28c>)
 800c598:	481c      	ldr	r0, [pc, #112]	; (800c60c <etharp_find_entry+0x284>)
 800c59a:	f002 f869 	bl	800e670 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c59e:	7f3a      	ldrb	r2, [r7, #28]
 800c5a0:	4917      	ldr	r1, [pc, #92]	; (800c600 <etharp_find_entry+0x278>)
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	005b      	lsls	r3, r3, #1
 800c5a6:	4413      	add	r3, r2
 800c5a8:	00db      	lsls	r3, r3, #3
 800c5aa:	440b      	add	r3, r1
 800c5ac:	3314      	adds	r3, #20
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d006      	beq.n	800c5c2 <etharp_find_entry+0x23a>
 800c5b4:	4b13      	ldr	r3, [pc, #76]	; (800c604 <etharp_find_entry+0x27c>)
 800c5b6:	f240 1287 	movw	r2, #391	; 0x187
 800c5ba:	4917      	ldr	r1, [pc, #92]	; (800c618 <etharp_find_entry+0x290>)
 800c5bc:	4813      	ldr	r0, [pc, #76]	; (800c60c <etharp_find_entry+0x284>)
 800c5be:	f002 f857 	bl	800e670 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00a      	beq.n	800c5de <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c5c8:	7f3a      	ldrb	r2, [r7, #28]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6819      	ldr	r1, [r3, #0]
 800c5ce:	480c      	ldr	r0, [pc, #48]	; (800c600 <etharp_find_entry+0x278>)
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	005b      	lsls	r3, r3, #1
 800c5d4:	4413      	add	r3, r2
 800c5d6:	00db      	lsls	r3, r3, #3
 800c5d8:	4403      	add	r3, r0
 800c5da:	3304      	adds	r3, #4
 800c5dc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c5de:	7f3a      	ldrb	r2, [r7, #28]
 800c5e0:	4907      	ldr	r1, [pc, #28]	; (800c600 <etharp_find_entry+0x278>)
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	005b      	lsls	r3, r3, #1
 800c5e6:	4413      	add	r3, r2
 800c5e8:	00db      	lsls	r3, r3, #3
 800c5ea:	440b      	add	r3, r1
 800c5ec:	3312      	adds	r3, #18
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800c5f2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3720      	adds	r7, #32
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	20000518 	.word	0x20000518
 800c604:	08010c68 	.word	0x08010c68
 800c608:	08010ca0 	.word	0x08010ca0
 800c60c:	08010ce0 	.word	0x08010ce0
 800c610:	08010d08 	.word	0x08010d08
 800c614:	08010d20 	.word	0x08010d20
 800c618:	08010d34 	.word	0x08010d34

0800c61c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b088      	sub	sp, #32
 800c620:	af02      	add	r7, sp, #8
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
 800c628:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c630:	2b06      	cmp	r3, #6
 800c632:	d006      	beq.n	800c642 <etharp_update_arp_entry+0x26>
 800c634:	4b48      	ldr	r3, [pc, #288]	; (800c758 <etharp_update_arp_entry+0x13c>)
 800c636:	f240 12ab 	movw	r2, #427	; 0x1ab
 800c63a:	4948      	ldr	r1, [pc, #288]	; (800c75c <etharp_update_arp_entry+0x140>)
 800c63c:	4848      	ldr	r0, [pc, #288]	; (800c760 <etharp_update_arp_entry+0x144>)
 800c63e:	f002 f817 	bl	800e670 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d012      	beq.n	800c66e <etharp_update_arp_entry+0x52>
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00e      	beq.n	800c66e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68f9      	ldr	r1, [r7, #12]
 800c656:	4618      	mov	r0, r3
 800c658:	f001 f8da 	bl	800d810 <ip4_addr_isbroadcast_u32>
 800c65c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d105      	bne.n	800c66e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c66a:	2be0      	cmp	r3, #224	; 0xe0
 800c66c:	d102      	bne.n	800c674 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c66e:	f06f 030f 	mvn.w	r3, #15
 800c672:	e06c      	b.n	800c74e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c674:	78fb      	ldrb	r3, [r7, #3]
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	4619      	mov	r1, r3
 800c67a:	68b8      	ldr	r0, [r7, #8]
 800c67c:	f7ff fe84 	bl	800c388 <etharp_find_entry>
 800c680:	4603      	mov	r3, r0
 800c682:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	da02      	bge.n	800c692 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c68c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c690:	e05d      	b.n	800c74e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c692:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c696:	4933      	ldr	r1, [pc, #204]	; (800c764 <etharp_update_arp_entry+0x148>)
 800c698:	4613      	mov	r3, r2
 800c69a:	005b      	lsls	r3, r3, #1
 800c69c:	4413      	add	r3, r2
 800c69e:	00db      	lsls	r3, r3, #3
 800c6a0:	440b      	add	r3, r1
 800c6a2:	3314      	adds	r3, #20
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c6a8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c6ac:	492d      	ldr	r1, [pc, #180]	; (800c764 <etharp_update_arp_entry+0x148>)
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	4413      	add	r3, r2
 800c6b4:	00db      	lsls	r3, r3, #3
 800c6b6:	440b      	add	r3, r1
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800c6be:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	4413      	add	r3, r2
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	4a25      	ldr	r2, [pc, #148]	; (800c764 <etharp_update_arp_entry+0x148>)
 800c6ce:	4413      	add	r3, r2
 800c6d0:	3304      	adds	r3, #4
 800c6d2:	2206      	movs	r2, #6
 800c6d4:	6879      	ldr	r1, [r7, #4]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f001 ffb7 	bl	800e64a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c6dc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c6e0:	4920      	ldr	r1, [pc, #128]	; (800c764 <etharp_update_arp_entry+0x148>)
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	005b      	lsls	r3, r3, #1
 800c6e6:	4413      	add	r3, r2
 800c6e8:	00db      	lsls	r3, r3, #3
 800c6ea:	440b      	add	r3, r1
 800c6ec:	3312      	adds	r3, #18
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c6f2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c6f6:	491b      	ldr	r1, [pc, #108]	; (800c764 <etharp_update_arp_entry+0x148>)
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	005b      	lsls	r3, r3, #1
 800c6fc:	4413      	add	r3, r2
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	440b      	add	r3, r1
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d021      	beq.n	800c74c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c708:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c70c:	4915      	ldr	r1, [pc, #84]	; (800c764 <etharp_update_arp_entry+0x148>)
 800c70e:	4613      	mov	r3, r2
 800c710:	005b      	lsls	r3, r3, #1
 800c712:	4413      	add	r3, r2
 800c714:	00db      	lsls	r3, r3, #3
 800c716:	440b      	add	r3, r1
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c71c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c720:	4910      	ldr	r1, [pc, #64]	; (800c764 <etharp_update_arp_entry+0x148>)
 800c722:	4613      	mov	r3, r2
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	4413      	add	r3, r2
 800c728:	00db      	lsls	r3, r3, #3
 800c72a:	440b      	add	r3, r1
 800c72c:	2200      	movs	r2, #0
 800c72e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800c736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c73a:	9300      	str	r3, [sp, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6939      	ldr	r1, [r7, #16]
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f001 ff07 	bl	800e554 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c746:	6938      	ldr	r0, [r7, #16]
 800c748:	f7fa f9b8 	bl	8006abc <pbuf_free>
  }
  return ERR_OK;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3718      	adds	r7, #24
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	08010c68 	.word	0x08010c68
 800c75c:	08010d60 	.word	0x08010d60
 800c760:	08010ce0 	.word	0x08010ce0
 800c764:	20000518 	.word	0x20000518

0800c768 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c770:	2300      	movs	r3, #0
 800c772:	73fb      	strb	r3, [r7, #15]
 800c774:	e01f      	b.n	800c7b6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800c776:	7bfa      	ldrb	r2, [r7, #15]
 800c778:	4912      	ldr	r1, [pc, #72]	; (800c7c4 <etharp_cleanup_netif+0x5c>)
 800c77a:	4613      	mov	r3, r2
 800c77c:	005b      	lsls	r3, r3, #1
 800c77e:	4413      	add	r3, r2
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	440b      	add	r3, r1
 800c784:	3314      	adds	r3, #20
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c78a:	7bbb      	ldrb	r3, [r7, #14]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00f      	beq.n	800c7b0 <etharp_cleanup_netif+0x48>
 800c790:	7bfa      	ldrb	r2, [r7, #15]
 800c792:	490c      	ldr	r1, [pc, #48]	; (800c7c4 <etharp_cleanup_netif+0x5c>)
 800c794:	4613      	mov	r3, r2
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	4413      	add	r3, r2
 800c79a:	00db      	lsls	r3, r3, #3
 800c79c:	440b      	add	r3, r1
 800c79e:	3308      	adds	r3, #8
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d103      	bne.n	800c7b0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7ff fd12 	bl	800c1d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	73fb      	strb	r3, [r7, #15]
 800c7b6:	7bfb      	ldrb	r3, [r7, #15]
 800c7b8:	2b09      	cmp	r3, #9
 800c7ba:	d9dc      	bls.n	800c776 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c7bc:	bf00      	nop
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	20000518 	.word	0x20000518

0800c7c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c7c8:	b5b0      	push	{r4, r5, r7, lr}
 800c7ca:	b08a      	sub	sp, #40	; 0x28
 800c7cc:	af04      	add	r7, sp, #16
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d107      	bne.n	800c7e8 <etharp_input+0x20>
 800c7d8:	4b3d      	ldr	r3, [pc, #244]	; (800c8d0 <etharp_input+0x108>)
 800c7da:	f44f 7222 	mov.w	r2, #648	; 0x288
 800c7de:	493d      	ldr	r1, [pc, #244]	; (800c8d4 <etharp_input+0x10c>)
 800c7e0:	483d      	ldr	r0, [pc, #244]	; (800c8d8 <etharp_input+0x110>)
 800c7e2:	f001 ff45 	bl	800e670 <iprintf>
 800c7e6:	e06f      	b.n	800c8c8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	881b      	ldrh	r3, [r3, #0]
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7f8:	d10c      	bne.n	800c814 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c7fe:	2b06      	cmp	r3, #6
 800c800:	d108      	bne.n	800c814 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c806:	2b04      	cmp	r3, #4
 800c808:	d104      	bne.n	800c814 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	885b      	ldrh	r3, [r3, #2]
 800c80e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c810:	2b08      	cmp	r3, #8
 800c812:	d003      	beq.n	800c81c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7fa f951 	bl	8006abc <pbuf_free>
    return;
 800c81a:	e055      	b.n	800c8c8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	330e      	adds	r3, #14
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	3318      	adds	r3, #24
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	3304      	adds	r3, #4
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d102      	bne.n	800c83c <etharp_input+0x74>
    for_us = 0;
 800c836:	2300      	movs	r3, #0
 800c838:	75fb      	strb	r3, [r7, #23]
 800c83a:	e009      	b.n	800c850 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	3304      	adds	r3, #4
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	429a      	cmp	r2, r3
 800c846:	bf0c      	ite	eq
 800c848:	2301      	moveq	r3, #1
 800c84a:	2300      	movne	r3, #0
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	f103 0208 	add.w	r2, r3, #8
 800c856:	7dfb      	ldrb	r3, [r7, #23]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <etharp_input+0x98>
 800c85c:	2301      	movs	r3, #1
 800c85e:	e000      	b.n	800c862 <etharp_input+0x9a>
 800c860:	2302      	movs	r3, #2
 800c862:	f107 010c 	add.w	r1, r7, #12
 800c866:	6838      	ldr	r0, [r7, #0]
 800c868:	f7ff fed8 	bl	800c61c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	88db      	ldrh	r3, [r3, #6]
 800c870:	b29b      	uxth	r3, r3
 800c872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c876:	d003      	beq.n	800c880 <etharp_input+0xb8>
 800c878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c87c:	d01e      	beq.n	800c8bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800c87e:	e020      	b.n	800c8c2 <etharp_input+0xfa>
    if (for_us) {
 800c880:	7dfb      	ldrb	r3, [r7, #23]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d01c      	beq.n	800c8c0 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	f103 0525 	add.w	r5, r3, #37	; 0x25
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800c8a0:	2102      	movs	r1, #2
 800c8a2:	9103      	str	r1, [sp, #12]
 800c8a4:	f107 010c 	add.w	r1, r7, #12
 800c8a8:	9102      	str	r1, [sp, #8]
 800c8aa:	9201      	str	r2, [sp, #4]
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	462b      	mov	r3, r5
 800c8b0:	4622      	mov	r2, r4
 800c8b2:	4601      	mov	r1, r0
 800c8b4:	6838      	ldr	r0, [r7, #0]
 800c8b6:	f000 fae3 	bl	800ce80 <etharp_raw>
    break;
 800c8ba:	e001      	b.n	800c8c0 <etharp_input+0xf8>
    break;
 800c8bc:	bf00      	nop
 800c8be:	e000      	b.n	800c8c2 <etharp_input+0xfa>
    break;
 800c8c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f7fa f8fa 	bl	8006abc <pbuf_free>
}
 800c8c8:	3718      	adds	r7, #24
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bdb0      	pop	{r4, r5, r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	08010c68 	.word	0x08010c68
 800c8d4:	08010db8 	.word	0x08010db8
 800c8d8:	08010ce0 	.word	0x08010ce0

0800c8dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af02      	add	r7, sp, #8
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c8ea:	79fa      	ldrb	r2, [r7, #7]
 800c8ec:	4944      	ldr	r1, [pc, #272]	; (800ca00 <etharp_output_to_arp_index+0x124>)
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	4413      	add	r3, r2
 800c8f4:	00db      	lsls	r3, r3, #3
 800c8f6:	440b      	add	r3, r1
 800c8f8:	3314      	adds	r3, #20
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d806      	bhi.n	800c90e <etharp_output_to_arp_index+0x32>
 800c900:	4b40      	ldr	r3, [pc, #256]	; (800ca04 <etharp_output_to_arp_index+0x128>)
 800c902:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c906:	4940      	ldr	r1, [pc, #256]	; (800ca08 <etharp_output_to_arp_index+0x12c>)
 800c908:	4840      	ldr	r0, [pc, #256]	; (800ca0c <etharp_output_to_arp_index+0x130>)
 800c90a:	f001 feb1 	bl	800e670 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c90e:	79fa      	ldrb	r2, [r7, #7]
 800c910:	493b      	ldr	r1, [pc, #236]	; (800ca00 <etharp_output_to_arp_index+0x124>)
 800c912:	4613      	mov	r3, r2
 800c914:	005b      	lsls	r3, r3, #1
 800c916:	4413      	add	r3, r2
 800c918:	00db      	lsls	r3, r3, #3
 800c91a:	440b      	add	r3, r1
 800c91c:	3314      	adds	r3, #20
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	2b02      	cmp	r3, #2
 800c922:	d153      	bne.n	800c9cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c924:	79fa      	ldrb	r2, [r7, #7]
 800c926:	4936      	ldr	r1, [pc, #216]	; (800ca00 <etharp_output_to_arp_index+0x124>)
 800c928:	4613      	mov	r3, r2
 800c92a:	005b      	lsls	r3, r3, #1
 800c92c:	4413      	add	r3, r2
 800c92e:	00db      	lsls	r3, r3, #3
 800c930:	440b      	add	r3, r1
 800c932:	3312      	adds	r3, #18
 800c934:	881b      	ldrh	r3, [r3, #0]
 800c936:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c93a:	d919      	bls.n	800c970 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c93c:	79fa      	ldrb	r2, [r7, #7]
 800c93e:	4613      	mov	r3, r2
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	4413      	add	r3, r2
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	4a2e      	ldr	r2, [pc, #184]	; (800ca00 <etharp_output_to_arp_index+0x124>)
 800c948:	4413      	add	r3, r2
 800c94a:	3304      	adds	r3, #4
 800c94c:	4619      	mov	r1, r3
 800c94e:	68f8      	ldr	r0, [r7, #12]
 800c950:	f000 fb44 	bl	800cfdc <etharp_request>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d138      	bne.n	800c9cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c95a:	79fa      	ldrb	r2, [r7, #7]
 800c95c:	4928      	ldr	r1, [pc, #160]	; (800ca00 <etharp_output_to_arp_index+0x124>)
 800c95e:	4613      	mov	r3, r2
 800c960:	005b      	lsls	r3, r3, #1
 800c962:	4413      	add	r3, r2
 800c964:	00db      	lsls	r3, r3, #3
 800c966:	440b      	add	r3, r1
 800c968:	3314      	adds	r3, #20
 800c96a:	2203      	movs	r2, #3
 800c96c:	701a      	strb	r2, [r3, #0]
 800c96e:	e02d      	b.n	800c9cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c970:	79fa      	ldrb	r2, [r7, #7]
 800c972:	4923      	ldr	r1, [pc, #140]	; (800ca00 <etharp_output_to_arp_index+0x124>)
 800c974:	4613      	mov	r3, r2
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	4413      	add	r3, r2
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	440b      	add	r3, r1
 800c97e:	3312      	adds	r3, #18
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c986:	d321      	bcc.n	800c9cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c988:	79fa      	ldrb	r2, [r7, #7]
 800c98a:	4613      	mov	r3, r2
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	4413      	add	r3, r2
 800c990:	00db      	lsls	r3, r3, #3
 800c992:	4a1b      	ldr	r2, [pc, #108]	; (800ca00 <etharp_output_to_arp_index+0x124>)
 800c994:	4413      	add	r3, r2
 800c996:	1d19      	adds	r1, r3, #4
 800c998:	79fa      	ldrb	r2, [r7, #7]
 800c99a:	4613      	mov	r3, r2
 800c99c:	005b      	lsls	r3, r3, #1
 800c99e:	4413      	add	r3, r2
 800c9a0:	00db      	lsls	r3, r3, #3
 800c9a2:	3308      	adds	r3, #8
 800c9a4:	4a16      	ldr	r2, [pc, #88]	; (800ca00 <etharp_output_to_arp_index+0x124>)
 800c9a6:	4413      	add	r3, r2
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f000 faf3 	bl	800cf98 <etharp_request_dst>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d109      	bne.n	800c9cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c9b8:	79fa      	ldrb	r2, [r7, #7]
 800c9ba:	4911      	ldr	r1, [pc, #68]	; (800ca00 <etharp_output_to_arp_index+0x124>)
 800c9bc:	4613      	mov	r3, r2
 800c9be:	005b      	lsls	r3, r3, #1
 800c9c0:	4413      	add	r3, r2
 800c9c2:	00db      	lsls	r3, r3, #3
 800c9c4:	440b      	add	r3, r1
 800c9c6:	3314      	adds	r3, #20
 800c9c8:	2203      	movs	r2, #3
 800c9ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800c9d2:	79fa      	ldrb	r2, [r7, #7]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	005b      	lsls	r3, r3, #1
 800c9d8:	4413      	add	r3, r2
 800c9da:	00db      	lsls	r3, r3, #3
 800c9dc:	3308      	adds	r3, #8
 800c9de:	4a08      	ldr	r2, [pc, #32]	; (800ca00 <etharp_output_to_arp_index+0x124>)
 800c9e0:	4413      	add	r3, r2
 800c9e2:	1d1a      	adds	r2, r3, #4
 800c9e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	460a      	mov	r2, r1
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f001 fdaf 	bl	800e554 <ethernet_output>
 800c9f6:	4603      	mov	r3, r0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	20000518 	.word	0x20000518
 800ca04:	08010c68 	.word	0x08010c68
 800ca08:	08010dd8 	.word	0x08010dd8
 800ca0c:	08010ce0 	.word	0x08010ce0

0800ca10 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08a      	sub	sp, #40	; 0x28
 800ca14:	af02      	add	r7, sp, #8
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d106      	bne.n	800ca34 <etharp_output+0x24>
 800ca26:	4b69      	ldr	r3, [pc, #420]	; (800cbcc <etharp_output+0x1bc>)
 800ca28:	f240 321b 	movw	r2, #795	; 0x31b
 800ca2c:	4968      	ldr	r1, [pc, #416]	; (800cbd0 <etharp_output+0x1c0>)
 800ca2e:	4869      	ldr	r0, [pc, #420]	; (800cbd4 <etharp_output+0x1c4>)
 800ca30:	f001 fe1e 	bl	800e670 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d106      	bne.n	800ca48 <etharp_output+0x38>
 800ca3a:	4b64      	ldr	r3, [pc, #400]	; (800cbcc <etharp_output+0x1bc>)
 800ca3c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ca40:	4965      	ldr	r1, [pc, #404]	; (800cbd8 <etharp_output+0x1c8>)
 800ca42:	4864      	ldr	r0, [pc, #400]	; (800cbd4 <etharp_output+0x1c4>)
 800ca44:	f001 fe14 	bl	800e670 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d106      	bne.n	800ca5c <etharp_output+0x4c>
 800ca4e:	4b5f      	ldr	r3, [pc, #380]	; (800cbcc <etharp_output+0x1bc>)
 800ca50:	f240 321d 	movw	r2, #797	; 0x31d
 800ca54:	4961      	ldr	r1, [pc, #388]	; (800cbdc <etharp_output+0x1cc>)
 800ca56:	485f      	ldr	r0, [pc, #380]	; (800cbd4 <etharp_output+0x1c4>)
 800ca58:	f001 fe0a 	bl	800e670 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	68f9      	ldr	r1, [r7, #12]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f000 fed4 	bl	800d810 <ip4_addr_isbroadcast_u32>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d002      	beq.n	800ca74 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ca6e:	4b5c      	ldr	r3, [pc, #368]	; (800cbe0 <etharp_output+0x1d0>)
 800ca70:	61fb      	str	r3, [r7, #28]
 800ca72:	e09b      	b.n	800cbac <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca7c:	2be0      	cmp	r3, #224	; 0xe0
 800ca7e:	d118      	bne.n	800cab2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ca80:	2301      	movs	r3, #1
 800ca82:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ca84:	2300      	movs	r3, #0
 800ca86:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ca88:	235e      	movs	r3, #94	; 0x5e
 800ca8a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	3302      	adds	r3, #2
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	3303      	adds	r3, #3
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800caaa:	f107 0310 	add.w	r3, r7, #16
 800caae:	61fb      	str	r3, [r7, #28]
 800cab0:	e07c      	b.n	800cbac <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3304      	adds	r3, #4
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	405a      	eors	r2, r3
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	3308      	adds	r3, #8
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4013      	ands	r3, r2
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d012      	beq.n	800caf0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cad0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d00b      	beq.n	800caf0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	330c      	adds	r3, #12
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d003      	beq.n	800caea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	330c      	adds	r3, #12
 800cae6:	61bb      	str	r3, [r7, #24]
 800cae8:	e002      	b.n	800caf0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800caea:	f06f 0303 	mvn.w	r3, #3
 800caee:	e069      	b.n	800cbc4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800caf0:	4b3c      	ldr	r3, [pc, #240]	; (800cbe4 <etharp_output+0x1d4>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	4619      	mov	r1, r3
 800caf6:	4a3c      	ldr	r2, [pc, #240]	; (800cbe8 <etharp_output+0x1d8>)
 800caf8:	460b      	mov	r3, r1
 800cafa:	005b      	lsls	r3, r3, #1
 800cafc:	440b      	add	r3, r1
 800cafe:	00db      	lsls	r3, r3, #3
 800cb00:	4413      	add	r3, r2
 800cb02:	3314      	adds	r3, #20
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d917      	bls.n	800cb3a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	4b35      	ldr	r3, [pc, #212]	; (800cbe4 <etharp_output+0x1d4>)
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	4618      	mov	r0, r3
 800cb14:	4934      	ldr	r1, [pc, #208]	; (800cbe8 <etharp_output+0x1d8>)
 800cb16:	4603      	mov	r3, r0
 800cb18:	005b      	lsls	r3, r3, #1
 800cb1a:	4403      	add	r3, r0
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	440b      	add	r3, r1
 800cb20:	3304      	adds	r3, #4
 800cb22:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d108      	bne.n	800cb3a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cb28:	4b2e      	ldr	r3, [pc, #184]	; (800cbe4 <etharp_output+0x1d4>)
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	68b9      	ldr	r1, [r7, #8]
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f7ff fed3 	bl	800c8dc <etharp_output_to_arp_index>
 800cb36:	4603      	mov	r3, r0
 800cb38:	e044      	b.n	800cbc4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	75fb      	strb	r3, [r7, #23]
 800cb3e:	e02a      	b.n	800cb96 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cb40:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800cb44:	4928      	ldr	r1, [pc, #160]	; (800cbe8 <etharp_output+0x1d8>)
 800cb46:	4613      	mov	r3, r2
 800cb48:	005b      	lsls	r3, r3, #1
 800cb4a:	4413      	add	r3, r2
 800cb4c:	00db      	lsls	r3, r3, #3
 800cb4e:	440b      	add	r3, r1
 800cb50:	3314      	adds	r3, #20
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d918      	bls.n	800cb8a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	6819      	ldr	r1, [r3, #0]
 800cb5c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800cb60:	4821      	ldr	r0, [pc, #132]	; (800cbe8 <etharp_output+0x1d8>)
 800cb62:	4613      	mov	r3, r2
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	4413      	add	r3, r2
 800cb68:	00db      	lsls	r3, r3, #3
 800cb6a:	4403      	add	r3, r0
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cb70:	4299      	cmp	r1, r3
 800cb72:	d10a      	bne.n	800cb8a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800cb74:	7dfa      	ldrb	r2, [r7, #23]
 800cb76:	4b1b      	ldr	r3, [pc, #108]	; (800cbe4 <etharp_output+0x1d4>)
 800cb78:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	68b9      	ldr	r1, [r7, #8]
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f7ff feab 	bl	800c8dc <etharp_output_to_arp_index>
 800cb86:	4603      	mov	r3, r0
 800cb88:	e01c      	b.n	800cbc4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cb8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	3301      	adds	r3, #1
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	75fb      	strb	r3, [r7, #23]
 800cb96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb9a:	2b09      	cmp	r3, #9
 800cb9c:	ddd0      	ble.n	800cb40 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	69b9      	ldr	r1, [r7, #24]
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f000 f822 	bl	800cbec <etharp_query>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	e00b      	b.n	800cbc4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800cbb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	68b9      	ldr	r1, [r7, #8]
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f001 fcc9 	bl	800e554 <ethernet_output>
 800cbc2:	4603      	mov	r3, r0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3720      	adds	r7, #32
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	08010c68 	.word	0x08010c68
 800cbd0:	08010db8 	.word	0x08010db8
 800cbd4:	08010ce0 	.word	0x08010ce0
 800cbd8:	08010e08 	.word	0x08010e08
 800cbdc:	08010da8 	.word	0x08010da8
 800cbe0:	080113dc 	.word	0x080113dc
 800cbe4:	20000608 	.word	0x20000608
 800cbe8:	20000518 	.word	0x20000518

0800cbec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b08c      	sub	sp, #48	; 0x30
 800cbf0:	af02      	add	r7, sp, #8
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	3325      	adds	r3, #37	; 0x25
 800cbfc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cbfe:	23ff      	movs	r3, #255	; 0xff
 800cc00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cc04:	2300      	movs	r3, #0
 800cc06:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68f9      	ldr	r1, [r7, #12]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f000 fdfe 	bl	800d810 <ip4_addr_isbroadcast_u32>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10c      	bne.n	800cc34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc22:	2be0      	cmp	r3, #224	; 0xe0
 800cc24:	d006      	beq.n	800cc34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d003      	beq.n	800cc34 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d102      	bne.n	800cc3a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cc34:	f06f 030f 	mvn.w	r3, #15
 800cc38:	e10f      	b.n	800ce5a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	2101      	movs	r1, #1
 800cc3e:	68b8      	ldr	r0, [r7, #8]
 800cc40:	f7ff fba2 	bl	800c388 <etharp_find_entry>
 800cc44:	4603      	mov	r3, r0
 800cc46:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800cc48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	da02      	bge.n	800cc56 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800cc50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc54:	e101      	b.n	800ce5a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cc56:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cc5a:	4982      	ldr	r1, [pc, #520]	; (800ce64 <etharp_query+0x278>)
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	4413      	add	r3, r2
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	440b      	add	r3, r1
 800cc66:	3314      	adds	r3, #20
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d117      	bne.n	800cc9e <etharp_query+0xb2>
    is_new_entry = 1;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cc72:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cc76:	497b      	ldr	r1, [pc, #492]	; (800ce64 <etharp_query+0x278>)
 800cc78:	4613      	mov	r3, r2
 800cc7a:	005b      	lsls	r3, r3, #1
 800cc7c:	4413      	add	r3, r2
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	440b      	add	r3, r1
 800cc82:	3314      	adds	r3, #20
 800cc84:	2201      	movs	r2, #1
 800cc86:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cc88:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cc8c:	4975      	ldr	r1, [pc, #468]	; (800ce64 <etharp_query+0x278>)
 800cc8e:	4613      	mov	r3, r2
 800cc90:	005b      	lsls	r3, r3, #1
 800cc92:	4413      	add	r3, r2
 800cc94:	00db      	lsls	r3, r3, #3
 800cc96:	440b      	add	r3, r1
 800cc98:	3308      	adds	r3, #8
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cc9e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cca2:	4970      	ldr	r1, [pc, #448]	; (800ce64 <etharp_query+0x278>)
 800cca4:	4613      	mov	r3, r2
 800cca6:	005b      	lsls	r3, r3, #1
 800cca8:	4413      	add	r3, r2
 800ccaa:	00db      	lsls	r3, r3, #3
 800ccac:	440b      	add	r3, r1
 800ccae:	3314      	adds	r3, #20
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d012      	beq.n	800ccdc <etharp_query+0xf0>
 800ccb6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ccba:	496a      	ldr	r1, [pc, #424]	; (800ce64 <etharp_query+0x278>)
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	005b      	lsls	r3, r3, #1
 800ccc0:	4413      	add	r3, r2
 800ccc2:	00db      	lsls	r3, r3, #3
 800ccc4:	440b      	add	r3, r1
 800ccc6:	3314      	adds	r3, #20
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d806      	bhi.n	800ccdc <etharp_query+0xf0>
 800ccce:	4b66      	ldr	r3, [pc, #408]	; (800ce68 <etharp_query+0x27c>)
 800ccd0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ccd4:	4965      	ldr	r1, [pc, #404]	; (800ce6c <etharp_query+0x280>)
 800ccd6:	4866      	ldr	r0, [pc, #408]	; (800ce70 <etharp_query+0x284>)
 800ccd8:	f001 fcca 	bl	800e670 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ccdc:	6a3b      	ldr	r3, [r7, #32]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d102      	bne.n	800cce8 <etharp_query+0xfc>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10c      	bne.n	800cd02 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cce8:	68b9      	ldr	r1, [r7, #8]
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f000 f976 	bl	800cfdc <etharp_request>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d102      	bne.n	800cd02 <etharp_query+0x116>
      return result;
 800ccfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd00:	e0ab      	b.n	800ce5a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d106      	bne.n	800cd16 <etharp_query+0x12a>
 800cd08:	4b57      	ldr	r3, [pc, #348]	; (800ce68 <etharp_query+0x27c>)
 800cd0a:	f240 32db 	movw	r2, #987	; 0x3db
 800cd0e:	4959      	ldr	r1, [pc, #356]	; (800ce74 <etharp_query+0x288>)
 800cd10:	4857      	ldr	r0, [pc, #348]	; (800ce70 <etharp_query+0x284>)
 800cd12:	f001 fcad 	bl	800e670 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cd16:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cd1a:	4952      	ldr	r1, [pc, #328]	; (800ce64 <etharp_query+0x278>)
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	005b      	lsls	r3, r3, #1
 800cd20:	4413      	add	r3, r2
 800cd22:	00db      	lsls	r3, r3, #3
 800cd24:	440b      	add	r3, r1
 800cd26:	3314      	adds	r3, #20
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d919      	bls.n	800cd62 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800cd2e:	7cfa      	ldrb	r2, [r7, #19]
 800cd30:	4b51      	ldr	r3, [pc, #324]	; (800ce78 <etharp_query+0x28c>)
 800cd32:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cd34:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cd38:	4613      	mov	r3, r2
 800cd3a:	005b      	lsls	r3, r3, #1
 800cd3c:	4413      	add	r3, r2
 800cd3e:	00db      	lsls	r3, r3, #3
 800cd40:	3308      	adds	r3, #8
 800cd42:	4a48      	ldr	r2, [pc, #288]	; (800ce64 <etharp_query+0x278>)
 800cd44:	4413      	add	r3, r2
 800cd46:	1d1a      	adds	r2, r3, #4
 800cd48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	697a      	ldr	r2, [r7, #20]
 800cd52:	6879      	ldr	r1, [r7, #4]
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	f001 fbfd 	bl	800e554 <ethernet_output>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd60:	e079      	b.n	800ce56 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cd62:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cd66:	493f      	ldr	r1, [pc, #252]	; (800ce64 <etharp_query+0x278>)
 800cd68:	4613      	mov	r3, r2
 800cd6a:	005b      	lsls	r3, r3, #1
 800cd6c:	4413      	add	r3, r2
 800cd6e:	00db      	lsls	r3, r3, #3
 800cd70:	440b      	add	r3, r1
 800cd72:	3314      	adds	r3, #20
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d16d      	bne.n	800ce56 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cd82:	e01a      	b.n	800cdba <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	895a      	ldrh	r2, [r3, #10]
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	891b      	ldrh	r3, [r3, #8]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d10a      	bne.n	800cda6 <etharp_query+0x1ba>
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d006      	beq.n	800cda6 <etharp_query+0x1ba>
 800cd98:	4b33      	ldr	r3, [pc, #204]	; (800ce68 <etharp_query+0x27c>)
 800cd9a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800cd9e:	4937      	ldr	r1, [pc, #220]	; (800ce7c <etharp_query+0x290>)
 800cda0:	4833      	ldr	r0, [pc, #204]	; (800ce70 <etharp_query+0x284>)
 800cda2:	f001 fc65 	bl	800e670 <iprintf>
      if (p->type != PBUF_ROM) {
 800cda6:	69fb      	ldr	r3, [r7, #28]
 800cda8:	7b1b      	ldrb	r3, [r3, #12]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d002      	beq.n	800cdb4 <etharp_query+0x1c8>
        copy_needed = 1;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	61bb      	str	r3, [r7, #24]
        break;
 800cdb2:	e005      	b.n	800cdc0 <etharp_query+0x1d4>
      }
      p = p->next;
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d1e1      	bne.n	800cd84 <etharp_query+0x198>
    }
    if (copy_needed) {
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d017      	beq.n	800cdf6 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	891b      	ldrh	r3, [r3, #8]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	4619      	mov	r1, r3
 800cdce:	2002      	movs	r0, #2
 800cdd0:	f7f9 fb02 	bl	80063d8 <pbuf_alloc>
 800cdd4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d011      	beq.n	800ce00 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800cddc:	6879      	ldr	r1, [r7, #4]
 800cdde:	69f8      	ldr	r0, [r7, #28]
 800cde0:	f7f9 ffa0 	bl	8006d24 <pbuf_copy>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00a      	beq.n	800ce00 <etharp_query+0x214>
          pbuf_free(p);
 800cdea:	69f8      	ldr	r0, [r7, #28]
 800cdec:	f7f9 fe66 	bl	8006abc <pbuf_free>
          p = NULL;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	61fb      	str	r3, [r7, #28]
 800cdf4:	e004      	b.n	800ce00 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cdfa:	69f8      	ldr	r0, [r7, #28]
 800cdfc:	f7f9 ff0a 	bl	8006c14 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d024      	beq.n	800ce50 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ce06:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ce0a:	4916      	ldr	r1, [pc, #88]	; (800ce64 <etharp_query+0x278>)
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	4413      	add	r3, r2
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	440b      	add	r3, r1
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00b      	beq.n	800ce34 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800ce1c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ce20:	4910      	ldr	r1, [pc, #64]	; (800ce64 <etharp_query+0x278>)
 800ce22:	4613      	mov	r3, r2
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	4413      	add	r3, r2
 800ce28:	00db      	lsls	r3, r3, #3
 800ce2a:	440b      	add	r3, r1
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7f9 fe44 	bl	8006abc <pbuf_free>
      }
      arp_table[i].q = p;
 800ce34:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ce38:	490a      	ldr	r1, [pc, #40]	; (800ce64 <etharp_query+0x278>)
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	005b      	lsls	r3, r3, #1
 800ce3e:	4413      	add	r3, r2
 800ce40:	00db      	lsls	r3, r3, #3
 800ce42:	440b      	add	r3, r1
 800ce44:	69fa      	ldr	r2, [r7, #28]
 800ce46:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce4e:	e002      	b.n	800ce56 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ce50:	23ff      	movs	r3, #255	; 0xff
 800ce52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ce56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3728      	adds	r7, #40	; 0x28
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20000518 	.word	0x20000518
 800ce68:	08010c68 	.word	0x08010c68
 800ce6c:	08010e14 	.word	0x08010e14
 800ce70:	08010ce0 	.word	0x08010ce0
 800ce74:	08010e08 	.word	0x08010e08
 800ce78:	20000608 	.word	0x20000608
 800ce7c:	08010e3c 	.word	0x08010e3c

0800ce80 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b08a      	sub	sp, #40	; 0x28
 800ce84:	af02      	add	r7, sp, #8
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d106      	bne.n	800cea6 <etharp_raw+0x26>
 800ce98:	4b3a      	ldr	r3, [pc, #232]	; (800cf84 <etharp_raw+0x104>)
 800ce9a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800ce9e:	493a      	ldr	r1, [pc, #232]	; (800cf88 <etharp_raw+0x108>)
 800cea0:	483a      	ldr	r0, [pc, #232]	; (800cf8c <etharp_raw+0x10c>)
 800cea2:	f001 fbe5 	bl	800e670 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cea6:	2200      	movs	r2, #0
 800cea8:	211c      	movs	r1, #28
 800ceaa:	2002      	movs	r0, #2
 800ceac:	f7f9 fa94 	bl	80063d8 <pbuf_alloc>
 800ceb0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d102      	bne.n	800cebe <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ceb8:	f04f 33ff 	mov.w	r3, #4294967295
 800cebc:	e05d      	b.n	800cf7a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	895b      	ldrh	r3, [r3, #10]
 800cec2:	2b1b      	cmp	r3, #27
 800cec4:	d806      	bhi.n	800ced4 <etharp_raw+0x54>
 800cec6:	4b2f      	ldr	r3, [pc, #188]	; (800cf84 <etharp_raw+0x104>)
 800cec8:	f240 4264 	movw	r2, #1124	; 0x464
 800cecc:	4930      	ldr	r1, [pc, #192]	; (800cf90 <etharp_raw+0x110>)
 800cece:	482f      	ldr	r0, [pc, #188]	; (800cf8c <etharp_raw+0x10c>)
 800ced0:	f001 fbce 	bl	800e670 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ceda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cedc:	4618      	mov	r0, r3
 800cede:	f7f8 fcc8 	bl	8005872 <lwip_htons>
 800cee2:	4603      	mov	r3, r0
 800cee4:	461a      	mov	r2, r3
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cef0:	2b06      	cmp	r3, #6
 800cef2:	d006      	beq.n	800cf02 <etharp_raw+0x82>
 800cef4:	4b23      	ldr	r3, [pc, #140]	; (800cf84 <etharp_raw+0x104>)
 800cef6:	f240 426b 	movw	r2, #1131	; 0x46b
 800cefa:	4926      	ldr	r1, [pc, #152]	; (800cf94 <etharp_raw+0x114>)
 800cefc:	4823      	ldr	r0, [pc, #140]	; (800cf8c <etharp_raw+0x10c>)
 800cefe:	f001 fbb7 	bl	800e670 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	3308      	adds	r3, #8
 800cf06:	2206      	movs	r2, #6
 800cf08:	6839      	ldr	r1, [r7, #0]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f001 fb9d 	bl	800e64a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	3312      	adds	r3, #18
 800cf14:	2206      	movs	r2, #6
 800cf16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f001 fb96 	bl	800e64a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	330e      	adds	r3, #14
 800cf22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf24:	6812      	ldr	r2, [r2, #0]
 800cf26:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	3318      	adds	r3, #24
 800cf2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf2e:	6812      	ldr	r2, [r2, #0]
 800cf30:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	2200      	movs	r2, #0
 800cf36:	701a      	strb	r2, [r3, #0]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f042 0201 	orr.w	r2, r2, #1
 800cf3e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f042 0208 	orr.w	r2, r2, #8
 800cf48:	709a      	strb	r2, [r3, #2]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	2206      	movs	r2, #6
 800cf52:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	2204      	movs	r2, #4
 800cf58:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cf5a:	f640 0306 	movw	r3, #2054	; 0x806
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	69b9      	ldr	r1, [r7, #24]
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f001 faf4 	bl	800e554 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cf6c:	69b8      	ldr	r0, [r7, #24]
 800cf6e:	f7f9 fda5 	bl	8006abc <pbuf_free>
  p = NULL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cf76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3720      	adds	r7, #32
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	08010c68 	.word	0x08010c68
 800cf88:	08010db8 	.word	0x08010db8
 800cf8c:	08010ce0 	.word	0x08010ce0
 800cf90:	08010e58 	.word	0x08010e58
 800cf94:	08010e8c 	.word	0x08010e8c

0800cf98 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b088      	sub	sp, #32
 800cf9c:	af04      	add	r7, sp, #16
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	9203      	str	r2, [sp, #12]
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	9202      	str	r2, [sp, #8]
 800cfbc:	4a06      	ldr	r2, [pc, #24]	; (800cfd8 <etharp_request_dst+0x40>)
 800cfbe:	9201      	str	r2, [sp, #4]
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f7ff ff5a 	bl	800ce80 <etharp_raw>
 800cfcc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	080113e4 	.word	0x080113e4

0800cfdc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cfe6:	4a05      	ldr	r2, [pc, #20]	; (800cffc <etharp_request+0x20>)
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7ff ffd4 	bl	800cf98 <etharp_request_dst>
 800cff0:	4603      	mov	r3, r0
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	080113dc 	.word	0x080113dc

0800d000 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b08e      	sub	sp, #56	; 0x38
 800d004:	af04      	add	r7, sp, #16
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d00a:	4b7a      	ldr	r3, [pc, #488]	; (800d1f4 <icmp_input+0x1f4>)
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	b29b      	uxth	r3, r3
 800d016:	f003 030f 	and.w	r3, r3, #15
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d022:	2b13      	cmp	r3, #19
 800d024:	f240 80d1 	bls.w	800d1ca <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	895b      	ldrh	r3, [r3, #10]
 800d02c:	2b03      	cmp	r3, #3
 800d02e:	f240 80ce 	bls.w	800d1ce <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d03c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d040:	2b00      	cmp	r3, #0
 800d042:	f000 80bb 	beq.w	800d1bc <icmp_input+0x1bc>
 800d046:	2b08      	cmp	r3, #8
 800d048:	f040 80bb 	bne.w	800d1c2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800d04c:	4b6a      	ldr	r3, [pc, #424]	; (800d1f8 <icmp_input+0x1f8>)
 800d04e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d050:	4b68      	ldr	r3, [pc, #416]	; (800d1f4 <icmp_input+0x1f4>)
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d058:	2be0      	cmp	r3, #224	; 0xe0
 800d05a:	f000 80bf 	beq.w	800d1dc <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d05e:	4b65      	ldr	r3, [pc, #404]	; (800d1f4 <icmp_input+0x1f4>)
 800d060:	695a      	ldr	r2, [r3, #20]
 800d062:	4b64      	ldr	r3, [pc, #400]	; (800d1f4 <icmp_input+0x1f4>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4619      	mov	r1, r3
 800d068:	4610      	mov	r0, r2
 800d06a:	f000 fbd1 	bl	800d810 <ip4_addr_isbroadcast_u32>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	f040 80b5 	bne.w	800d1e0 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	891b      	ldrh	r3, [r3, #8]
 800d07a:	2b07      	cmp	r3, #7
 800d07c:	f240 80a9 	bls.w	800d1d2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800d080:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d082:	330e      	adds	r3, #14
 800d084:	b29b      	uxth	r3, r3
 800d086:	b21b      	sxth	r3, r3
 800d088:	4619      	mov	r1, r3
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7f9 fcf2 	bl	8006a74 <pbuf_header>
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	d046      	beq.n	800d124 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	891a      	ldrh	r2, [r3, #8]
 800d09a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d09c:	4413      	add	r3, r2
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	2002      	movs	r0, #2
 800d0a6:	f7f9 f997 	bl	80063d8 <pbuf_alloc>
 800d0aa:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f000 8098 	beq.w	800d1e4 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	895b      	ldrh	r3, [r3, #10]
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0bc:	3308      	adds	r3, #8
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d203      	bcs.n	800d0ca <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800d0c2:	69b8      	ldr	r0, [r7, #24]
 800d0c4:	f7f9 fcfa 	bl	8006abc <pbuf_free>
        goto icmperr;
 800d0c8:	e08d      	b.n	800d1e6 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d0d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f001 fab9 	bl	800e64a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800d0d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0da:	425b      	negs	r3, r3
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	b21b      	sxth	r3, r3
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	69b8      	ldr	r0, [r7, #24]
 800d0e4:	f7f9 fcc6 	bl	8006a74 <pbuf_header>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d009      	beq.n	800d102 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d0ee:	4b43      	ldr	r3, [pc, #268]	; (800d1fc <icmp_input+0x1fc>)
 800d0f0:	22af      	movs	r2, #175	; 0xaf
 800d0f2:	4943      	ldr	r1, [pc, #268]	; (800d200 <icmp_input+0x200>)
 800d0f4:	4843      	ldr	r0, [pc, #268]	; (800d204 <icmp_input+0x204>)
 800d0f6:	f001 fabb 	bl	800e670 <iprintf>
        pbuf_free(r);
 800d0fa:	69b8      	ldr	r0, [r7, #24]
 800d0fc:	f7f9 fcde 	bl	8006abc <pbuf_free>
        goto icmperr;
 800d100:	e071      	b.n	800d1e6 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800d102:	6879      	ldr	r1, [r7, #4]
 800d104:	69b8      	ldr	r0, [r7, #24]
 800d106:	f7f9 fe0d 	bl	8006d24 <pbuf_copy>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d003      	beq.n	800d118 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800d110:	69b8      	ldr	r0, [r7, #24]
 800d112:	f7f9 fcd3 	bl	8006abc <pbuf_free>
        goto icmperr;
 800d116:	e066      	b.n	800d1e6 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f7f9 fccf 	bl	8006abc <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	607b      	str	r3, [r7, #4]
 800d122:	e015      	b.n	800d150 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800d124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d126:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800d12a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800d12e:	33f2      	adds	r3, #242	; 0xf2
 800d130:	b29b      	uxth	r3, r3
 800d132:	b21b      	sxth	r3, r3
 800d134:	4619      	mov	r1, r3
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f7f9 fc9c 	bl	8006a74 <pbuf_header>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d006      	beq.n	800d150 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d142:	4b2e      	ldr	r3, [pc, #184]	; (800d1fc <icmp_input+0x1fc>)
 800d144:	22c0      	movs	r2, #192	; 0xc0
 800d146:	4930      	ldr	r1, [pc, #192]	; (800d208 <icmp_input+0x208>)
 800d148:	482e      	ldr	r0, [pc, #184]	; (800d204 <icmp_input+0x204>)
 800d14a:	f001 fa91 	bl	800e670 <iprintf>
        goto icmperr;
 800d14e:	e04a      	b.n	800d1e6 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800d156:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d15a:	4619      	mov	r1, r3
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7f9 fc89 	bl	8006a74 <pbuf_header>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d12b      	bne.n	800d1c0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d176:	4b1f      	ldr	r3, [pc, #124]	; (800d1f4 <icmp_input+0x1f4>)
 800d178:	691a      	ldr	r2, [r3, #16]
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	2200      	movs	r2, #0
 800d182:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	2200      	movs	r2, #0
 800d188:	709a      	strb	r2, [r3, #2]
 800d18a:	2200      	movs	r2, #0
 800d18c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	22ff      	movs	r2, #255	; 0xff
 800d192:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	2200      	movs	r2, #0
 800d198:	729a      	strb	r2, [r3, #10]
 800d19a:	2200      	movs	r2, #0
 800d19c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	9302      	str	r3, [sp, #8]
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	9301      	str	r3, [sp, #4]
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	23ff      	movs	r3, #255	; 0xff
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	69f9      	ldr	r1, [r7, #28]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 fa5b 	bl	800d66c <ip4_output_if>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800d1ba:	e001      	b.n	800d1c0 <icmp_input+0x1c0>
    break;
 800d1bc:	bf00      	nop
 800d1be:	e000      	b.n	800d1c2 <icmp_input+0x1c2>
    break;
 800d1c0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f7f9 fc7a 	bl	8006abc <pbuf_free>
  return;
 800d1c8:	e011      	b.n	800d1ee <icmp_input+0x1ee>
    goto lenerr;
 800d1ca:	bf00      	nop
 800d1cc:	e002      	b.n	800d1d4 <icmp_input+0x1d4>
    goto lenerr;
 800d1ce:	bf00      	nop
 800d1d0:	e000      	b.n	800d1d4 <icmp_input+0x1d4>
      goto lenerr;
 800d1d2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7f9 fc71 	bl	8006abc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d1da:	e008      	b.n	800d1ee <icmp_input+0x1ee>
      goto icmperr;
 800d1dc:	bf00      	nop
 800d1de:	e002      	b.n	800d1e6 <icmp_input+0x1e6>
      goto icmperr;
 800d1e0:	bf00      	nop
 800d1e2:	e000      	b.n	800d1e6 <icmp_input+0x1e6>
        goto icmperr;
 800d1e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7f9 fc68 	bl	8006abc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d1ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d1ee:	3728      	adds	r7, #40	; 0x28
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	20004660 	.word	0x20004660
 800d1f8:	20004674 	.word	0x20004674
 800d1fc:	08010ed0 	.word	0x08010ed0
 800d200:	08010f08 	.word	0x08010f08
 800d204:	08010f40 	.word	0x08010f40
 800d208:	08010f68 	.word	0x08010f68

0800d20c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	460b      	mov	r3, r1
 800d216:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d218:	78fb      	ldrb	r3, [r7, #3]
 800d21a:	461a      	mov	r2, r3
 800d21c:	2103      	movs	r1, #3
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 f814 	bl	800d24c <icmp_send_response>
}
 800d224:	bf00      	nop
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	460b      	mov	r3, r1
 800d236:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d238:	78fb      	ldrb	r3, [r7, #3]
 800d23a:	461a      	mov	r2, r3
 800d23c:	210b      	movs	r1, #11
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f804 	bl	800d24c <icmp_send_response>
}
 800d244:	bf00      	nop
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08c      	sub	sp, #48	; 0x30
 800d250:	af04      	add	r7, sp, #16
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	460b      	mov	r3, r1
 800d256:	70fb      	strb	r3, [r7, #3]
 800d258:	4613      	mov	r3, r2
 800d25a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d25c:	2200      	movs	r2, #0
 800d25e:	2124      	movs	r1, #36	; 0x24
 800d260:	2001      	movs	r0, #1
 800d262:	f7f9 f8b9 	bl	80063d8 <pbuf_alloc>
 800d266:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d04c      	beq.n	800d308 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	895b      	ldrh	r3, [r3, #10]
 800d272:	2b23      	cmp	r3, #35	; 0x23
 800d274:	d806      	bhi.n	800d284 <icmp_send_response+0x38>
 800d276:	4b26      	ldr	r3, [pc, #152]	; (800d310 <icmp_send_response+0xc4>)
 800d278:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800d27c:	4925      	ldr	r1, [pc, #148]	; (800d314 <icmp_send_response+0xc8>)
 800d27e:	4826      	ldr	r0, [pc, #152]	; (800d318 <icmp_send_response+0xcc>)
 800d280:	f001 f9f6 	bl	800e670 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	78fa      	ldrb	r2, [r7, #3]
 800d294:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	78ba      	ldrb	r2, [r7, #2]
 800d29a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	711a      	strb	r2, [r3, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	719a      	strb	r2, [r3, #6]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	f103 0008 	add.w	r0, r3, #8
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	221c      	movs	r2, #28
 800d2be:	4619      	mov	r1, r3
 800d2c0:	f001 f9c3 	bl	800e64a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d2ca:	f107 030c 	add.w	r3, r7, #12
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 f824 	bl	800d31c <ip4_route>
 800d2d4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d011      	beq.n	800d300 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	709a      	strb	r2, [r3, #2]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d2e6:	f107 020c 	add.w	r2, r7, #12
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	9302      	str	r3, [sp, #8]
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	9301      	str	r3, [sp, #4]
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	23ff      	movs	r3, #255	; 0xff
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	69f8      	ldr	r0, [r7, #28]
 800d2fc:	f000 f9b6 	bl	800d66c <ip4_output_if>
  }
  pbuf_free(q);
 800d300:	69f8      	ldr	r0, [r7, #28]
 800d302:	f7f9 fbdb 	bl	8006abc <pbuf_free>
 800d306:	e000      	b.n	800d30a <icmp_send_response+0xbe>
    return;
 800d308:	bf00      	nop
}
 800d30a:	3720      	adds	r7, #32
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	08010ed0 	.word	0x08010ed0
 800d314:	08010f9c 	.word	0x08010f9c
 800d318:	08010f40 	.word	0x08010f40

0800d31c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b085      	sub	sp, #20
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800d324:	4b30      	ldr	r3, [pc, #192]	; (800d3e8 <ip4_route+0xcc>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	60fb      	str	r3, [r7, #12]
 800d32a:	e036      	b.n	800d39a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d332:	f003 0301 	and.w	r3, r3, #1
 800d336:	b2db      	uxtb	r3, r3
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d02b      	beq.n	800d394 <ip4_route+0x78>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d342:	089b      	lsrs	r3, r3, #2
 800d344:	f003 0301 	and.w	r3, r3, #1
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d022      	beq.n	800d394 <ip4_route+0x78>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3304      	adds	r3, #4
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d01d      	beq.n	800d394 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	3304      	adds	r3, #4
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	405a      	eors	r2, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	3308      	adds	r3, #8
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4013      	ands	r3, r2
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	e033      	b.n	800d3dc <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d37a:	f003 0302 	and.w	r3, r3, #2
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d108      	bne.n	800d394 <ip4_route+0x78>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	330c      	adds	r3, #12
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d101      	bne.n	800d394 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	e023      	b.n	800d3dc <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	60fb      	str	r3, [r7, #12]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d1c5      	bne.n	800d32c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d3a0:	4b12      	ldr	r3, [pc, #72]	; (800d3ec <ip4_route+0xd0>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d015      	beq.n	800d3d4 <ip4_route+0xb8>
 800d3a8:	4b10      	ldr	r3, [pc, #64]	; (800d3ec <ip4_route+0xd0>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d3b0:	f003 0301 	and.w	r3, r3, #1
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00d      	beq.n	800d3d4 <ip4_route+0xb8>
 800d3b8:	4b0c      	ldr	r3, [pc, #48]	; (800d3ec <ip4_route+0xd0>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d3c0:	f003 0304 	and.w	r3, r3, #4
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d005      	beq.n	800d3d4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800d3c8:	4b08      	ldr	r3, [pc, #32]	; (800d3ec <ip4_route+0xd0>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d101      	bne.n	800d3d8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	e001      	b.n	800d3dc <ip4_route+0xc0>
  }

  return netif_default;
 800d3d8:	4b04      	ldr	r3, [pc, #16]	; (800d3ec <ip4_route+0xd0>)
 800d3da:	681b      	ldr	r3, [r3, #0]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3714      	adds	r7, #20
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	20007b80 	.word	0x20007b80
 800d3ec:	20007b84 	.word	0x20007b84

0800d3f0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	091b      	lsrs	r3, r3, #4
 800d406:	b2db      	uxtb	r3, r3
 800d408:	2b04      	cmp	r3, #4
 800d40a:	d004      	beq.n	800d416 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7f9 fb55 	bl	8006abc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d412:	2300      	movs	r3, #0
 800d414:	e122      	b.n	800d65c <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	f003 030f 	and.w	r3, r3, #15
 800d420:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800d422:	897b      	ldrh	r3, [r7, #10]
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	885b      	ldrh	r3, [r3, #2]
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	4618      	mov	r0, r3
 800d430:	f7f8 fa1f 	bl	8005872 <lwip_htons>
 800d434:	4603      	mov	r3, r0
 800d436:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	891b      	ldrh	r3, [r3, #8]
 800d43c:	893a      	ldrh	r2, [r7, #8]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d204      	bcs.n	800d44c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800d442:	893b      	ldrh	r3, [r7, #8]
 800d444:	4619      	mov	r1, r3
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7f9 f9c4 	bl	80067d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	895b      	ldrh	r3, [r3, #10]
 800d450:	897a      	ldrh	r2, [r7, #10]
 800d452:	429a      	cmp	r2, r3
 800d454:	d807      	bhi.n	800d466 <ip4_input+0x76>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	891b      	ldrh	r3, [r3, #8]
 800d45a:	893a      	ldrh	r2, [r7, #8]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d802      	bhi.n	800d466 <ip4_input+0x76>
 800d460:	897b      	ldrh	r3, [r7, #10]
 800d462:	2b13      	cmp	r3, #19
 800d464:	d804      	bhi.n	800d470 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7f9 fb28 	bl	8006abc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	e0f5      	b.n	800d65c <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	691b      	ldr	r3, [r3, #16]
 800d474:	4a7b      	ldr	r2, [pc, #492]	; (800d664 <ip4_input+0x274>)
 800d476:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	4a79      	ldr	r2, [pc, #484]	; (800d664 <ip4_input+0x274>)
 800d47e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d480:	4b78      	ldr	r3, [pc, #480]	; (800d664 <ip4_input+0x274>)
 800d482:	695b      	ldr	r3, [r3, #20]
 800d484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d488:	2be0      	cmp	r3, #224	; 0xe0
 800d48a:	d112      	bne.n	800d4b2 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d492:	f003 0301 	and.w	r3, r3, #1
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d007      	beq.n	800d4ac <ip4_input+0xbc>
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	3304      	adds	r3, #4
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d002      	beq.n	800d4ac <ip4_input+0xbc>
      netif = inp;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	613b      	str	r3, [r7, #16]
 800d4aa:	e041      	b.n	800d530 <ip4_input+0x140>
    } else {
      netif = NULL;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	613b      	str	r3, [r7, #16]
 800d4b0:	e03e      	b.n	800d530 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d014      	beq.n	800d4f4 <ip4_input+0x104>
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00f      	beq.n	800d4f4 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d4d4:	4b63      	ldr	r3, [pc, #396]	; (800d664 <ip4_input+0x274>)
 800d4d6:	695a      	ldr	r2, [r3, #20]
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	3304      	adds	r3, #4
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d026      	beq.n	800d530 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d4e2:	4b60      	ldr	r3, [pc, #384]	; (800d664 <ip4_input+0x274>)
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	6939      	ldr	r1, [r7, #16]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 f991 	bl	800d810 <ip4_addr_isbroadcast_u32>
 800d4ee:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d11d      	bne.n	800d530 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00d      	beq.n	800d516 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800d4fa:	4b5a      	ldr	r3, [pc, #360]	; (800d664 <ip4_input+0x274>)
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b7f      	cmp	r3, #127	; 0x7f
 800d502:	d102      	bne.n	800d50a <ip4_input+0x11a>
          netif = NULL;
 800d504:	2300      	movs	r3, #0
 800d506:	613b      	str	r3, [r7, #16]
          break;
 800d508:	e012      	b.n	800d530 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800d50a:	2300      	movs	r3, #0
 800d50c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800d50e:	4b56      	ldr	r3, [pc, #344]	; (800d668 <ip4_input+0x278>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	613b      	str	r3, [r7, #16]
 800d514:	e002      	b.n	800d51c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	429a      	cmp	r2, r3
 800d522:	d102      	bne.n	800d52a <ip4_input+0x13a>
        netif = netif->next;
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d1c4      	bne.n	800d4ba <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d530:	4b4c      	ldr	r3, [pc, #304]	; (800d664 <ip4_input+0x274>)
 800d532:	691b      	ldr	r3, [r3, #16]
 800d534:	6839      	ldr	r1, [r7, #0]
 800d536:	4618      	mov	r0, r3
 800d538:	f000 f96a 	bl	800d810 <ip4_addr_isbroadcast_u32>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d105      	bne.n	800d54e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d542:	4b48      	ldr	r3, [pc, #288]	; (800d664 <ip4_input+0x274>)
 800d544:	691b      	ldr	r3, [r3, #16]
 800d546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d54a:	2be0      	cmp	r3, #224	; 0xe0
 800d54c:	d104      	bne.n	800d558 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7f9 fab4 	bl	8006abc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d554:	2300      	movs	r3, #0
 800d556:	e081      	b.n	800d65c <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d104      	bne.n	800d568 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7f9 faac 	bl	8006abc <pbuf_free>
    return ERR_OK;
 800d564:	2300      	movs	r3, #0
 800d566:	e079      	b.n	800d65c <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	88db      	ldrh	r3, [r3, #6]
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	461a      	mov	r2, r3
 800d570:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d574:	4013      	ands	r3, r2
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00b      	beq.n	800d592 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 fc8e 	bl	800de9c <ip4_reass>
 800d580:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d101      	bne.n	800d58c <ip4_input+0x19c>
      return ERR_OK;
 800d588:	2300      	movs	r3, #0
 800d58a:	e067      	b.n	800d65c <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d592:	4a34      	ldr	r2, [pc, #208]	; (800d664 <ip4_input+0x274>)
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d598:	4a32      	ldr	r2, [pc, #200]	; (800d664 <ip4_input+0x274>)
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d59e:	4a31      	ldr	r2, [pc, #196]	; (800d664 <ip4_input+0x274>)
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	f003 030f 	and.w	r3, r3, #15
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	4b2b      	ldr	r3, [pc, #172]	; (800d664 <ip4_input+0x274>)
 800d5b6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800d5b8:	897b      	ldrh	r3, [r7, #10]
 800d5ba:	425b      	negs	r3, r3
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	b21b      	sxth	r3, r3
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7f9 fa56 	bl	8006a74 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	7a5b      	ldrb	r3, [r3, #9]
 800d5cc:	2b06      	cmp	r3, #6
 800d5ce:	d009      	beq.n	800d5e4 <ip4_input+0x1f4>
 800d5d0:	2b11      	cmp	r3, #17
 800d5d2:	d002      	beq.n	800d5da <ip4_input+0x1ea>
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d00a      	beq.n	800d5ee <ip4_input+0x1fe>
 800d5d8:	e00e      	b.n	800d5f8 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800d5da:	6839      	ldr	r1, [r7, #0]
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7fe faa7 	bl	800bb30 <udp_input>
      break;
 800d5e2:	e028      	b.n	800d636 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800d5e4:	6839      	ldr	r1, [r7, #0]
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f7fa ff42 	bl	8008470 <tcp_input>
      break;
 800d5ec:	e023      	b.n	800d636 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800d5ee:	6839      	ldr	r1, [r7, #0]
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f7ff fd05 	bl	800d000 <icmp_input>
      break;
 800d5f6:	e01e      	b.n	800d636 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d5f8:	4b1a      	ldr	r3, [pc, #104]	; (800d664 <ip4_input+0x274>)
 800d5fa:	695b      	ldr	r3, [r3, #20]
 800d5fc:	6939      	ldr	r1, [r7, #16]
 800d5fe:	4618      	mov	r0, r3
 800d600:	f000 f906 	bl	800d810 <ip4_addr_isbroadcast_u32>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d112      	bne.n	800d630 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d60a:	4b16      	ldr	r3, [pc, #88]	; (800d664 <ip4_input+0x274>)
 800d60c:	695b      	ldr	r3, [r3, #20]
 800d60e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d612:	2be0      	cmp	r3, #224	; 0xe0
 800d614:	d00c      	beq.n	800d630 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800d616:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d61a:	4619      	mov	r1, r3
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f7f9 fa3b 	bl	8006a98 <pbuf_header_force>
        p->payload = iphdr;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	697a      	ldr	r2, [r7, #20]
 800d626:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d628:	2102      	movs	r1, #2
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7ff fdee 	bl	800d20c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7f9 fa43 	bl	8006abc <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d636:	4b0b      	ldr	r3, [pc, #44]	; (800d664 <ip4_input+0x274>)
 800d638:	2200      	movs	r2, #0
 800d63a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d63c:	4b09      	ldr	r3, [pc, #36]	; (800d664 <ip4_input+0x274>)
 800d63e:	2200      	movs	r2, #0
 800d640:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d642:	4b08      	ldr	r3, [pc, #32]	; (800d664 <ip4_input+0x274>)
 800d644:	2200      	movs	r2, #0
 800d646:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d648:	4b06      	ldr	r3, [pc, #24]	; (800d664 <ip4_input+0x274>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d64e:	4b05      	ldr	r3, [pc, #20]	; (800d664 <ip4_input+0x274>)
 800d650:	2200      	movs	r2, #0
 800d652:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d654:	4b03      	ldr	r3, [pc, #12]	; (800d664 <ip4_input+0x274>)
 800d656:	2200      	movs	r2, #0
 800d658:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3718      	adds	r7, #24
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	20004660 	.word	0x20004660
 800d668:	20007b80 	.word	0x20007b80

0800d66c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08a      	sub	sp, #40	; 0x28
 800d670:	af04      	add	r7, sp, #16
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
 800d678:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d009      	beq.n	800d698 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d003      	beq.n	800d692 <ip4_output_if+0x26>
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d102      	bne.n	800d698 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d694:	3304      	adds	r3, #4
 800d696:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d698:	78fa      	ldrb	r2, [r7, #3]
 800d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69c:	9302      	str	r3, [sp, #8]
 800d69e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d6a2:	9301      	str	r3, [sp, #4]
 800d6a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6a8:	9300      	str	r3, [sp, #0]
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	6979      	ldr	r1, [r7, #20]
 800d6b0:	68f8      	ldr	r0, [r7, #12]
 800d6b2:	f000 f805 	bl	800d6c0 <ip4_output_if_src>
 800d6b6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3718      	adds	r7, #24
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b088      	sub	sp, #32
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
 800d6cc:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	89db      	ldrh	r3, [r3, #14]
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d006      	beq.n	800d6e4 <ip4_output_if_src+0x24>
 800d6d6:	4b48      	ldr	r3, [pc, #288]	; (800d7f8 <ip4_output_if_src+0x138>)
 800d6d8:	f240 3233 	movw	r2, #819	; 0x333
 800d6dc:	4947      	ldr	r1, [pc, #284]	; (800d7fc <ip4_output_if_src+0x13c>)
 800d6de:	4848      	ldr	r0, [pc, #288]	; (800d800 <ip4_output_if_src+0x140>)
 800d6e0:	f000 ffc6 	bl	800e670 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d060      	beq.n	800d7ac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d6ea:	2314      	movs	r3, #20
 800d6ec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800d6ee:	2114      	movs	r1, #20
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f7f9 f9bf 	bl	8006a74 <pbuf_header>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d002      	beq.n	800d702 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d6fc:	f06f 0301 	mvn.w	r3, #1
 800d700:	e075      	b.n	800d7ee <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	895b      	ldrh	r3, [r3, #10]
 800d70c:	2b13      	cmp	r3, #19
 800d70e:	d806      	bhi.n	800d71e <ip4_output_if_src+0x5e>
 800d710:	4b39      	ldr	r3, [pc, #228]	; (800d7f8 <ip4_output_if_src+0x138>)
 800d712:	f240 3261 	movw	r2, #865	; 0x361
 800d716:	493b      	ldr	r1, [pc, #236]	; (800d804 <ip4_output_if_src+0x144>)
 800d718:	4839      	ldr	r0, [pc, #228]	; (800d800 <ip4_output_if_src+0x140>)
 800d71a:	f000 ffa9 	bl	800e670 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	78fa      	ldrb	r2, [r7, #3]
 800d722:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d72a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681a      	ldr	r2, [r3, #0]
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d734:	8b7b      	ldrh	r3, [r7, #26]
 800d736:	089b      	lsrs	r3, r3, #2
 800d738:	b29b      	uxth	r3, r3
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d740:	b2da      	uxtb	r2, r3
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d74c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	891b      	ldrh	r3, [r3, #8]
 800d752:	4618      	mov	r0, r3
 800d754:	f7f8 f88d 	bl	8005872 <lwip_htons>
 800d758:	4603      	mov	r3, r0
 800d75a:	461a      	mov	r2, r3
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	2200      	movs	r2, #0
 800d764:	719a      	strb	r2, [r3, #6]
 800d766:	2200      	movs	r2, #0
 800d768:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d76a:	4b27      	ldr	r3, [pc, #156]	; (800d808 <ip4_output_if_src+0x148>)
 800d76c:	881b      	ldrh	r3, [r3, #0]
 800d76e:	4618      	mov	r0, r3
 800d770:	f7f8 f87f 	bl	8005872 <lwip_htons>
 800d774:	4603      	mov	r3, r0
 800d776:	461a      	mov	r2, r3
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d77c:	4b22      	ldr	r3, [pc, #136]	; (800d808 <ip4_output_if_src+0x148>)
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	3301      	adds	r3, #1
 800d782:	b29a      	uxth	r2, r3
 800d784:	4b20      	ldr	r3, [pc, #128]	; (800d808 <ip4_output_if_src+0x148>)
 800d786:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d104      	bne.n	800d798 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d78e:	4b1f      	ldr	r3, [pc, #124]	; (800d80c <ip4_output_if_src+0x14c>)
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	60da      	str	r2, [r3, #12]
 800d796:	e003      	b.n	800d7a0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	729a      	strb	r2, [r3, #10]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	72da      	strb	r2, [r3, #11]
 800d7aa:	e008      	b.n	800d7be <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d7b8:	f107 0314 	add.w	r3, r7, #20
 800d7bc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00c      	beq.n	800d7e0 <ip4_output_if_src+0x120>
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	891a      	ldrh	r2, [r3, #8]
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d906      	bls.n	800d7e0 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f000 fd0a 	bl	800e1f0 <ip4_frag>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	e006      	b.n	800d7ee <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e2:	695b      	ldr	r3, [r3, #20]
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	68f9      	ldr	r1, [r7, #12]
 800d7e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7ea:	4798      	blx	r3
 800d7ec:	4603      	mov	r3, r0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3720      	adds	r7, #32
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	08010fc8 	.word	0x08010fc8
 800d7fc:	08010ffc 	.word	0x08010ffc
 800d800:	08011008 	.word	0x08011008
 800d804:	08011030 	.word	0x08011030
 800d808:	2000060a 	.word	0x2000060a
 800d80c:	080113d8 	.word	0x080113d8

0800d810 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d824:	d002      	beq.n	800d82c <ip4_addr_isbroadcast_u32+0x1c>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d101      	bne.n	800d830 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d82c:	2301      	movs	r3, #1
 800d82e:	e02a      	b.n	800d886 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d836:	f003 0302 	and.w	r3, r3, #2
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d101      	bne.n	800d842 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d83e:	2300      	movs	r3, #0
 800d840:	e021      	b.n	800d886 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	3304      	adds	r3, #4
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d101      	bne.n	800d852 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d84e:	2300      	movs	r3, #0
 800d850:	e019      	b.n	800d886 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	3304      	adds	r3, #4
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	405a      	eors	r2, r3
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	3308      	adds	r3, #8
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4013      	ands	r3, r2
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10d      	bne.n	800d884 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	3308      	adds	r3, #8
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	43da      	mvns	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	3308      	adds	r3, #8
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d101      	bne.n	800d884 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d880:	2301      	movs	r3, #1
 800d882:	e000      	b.n	800d886 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d884:	2300      	movs	r3, #0
  }
}
 800d886:	4618      	mov	r0, r3
 800d888:	3714      	adds	r7, #20
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
	...

0800d894 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d89a:	2300      	movs	r3, #0
 800d89c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d89e:	4b12      	ldr	r3, [pc, #72]	; (800d8e8 <ip_reass_tmr+0x54>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d8a4:	e018      	b.n	800d8d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	7fdb      	ldrb	r3, [r3, #31]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00b      	beq.n	800d8c6 <ip_reass_tmr+0x32>
      r->timer--;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	7fdb      	ldrb	r3, [r3, #31]
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	e008      	b.n	800d8d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d8d0:	68b9      	ldr	r1, [r7, #8]
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 f80a 	bl	800d8ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1e3      	bne.n	800d8a6 <ip_reass_tmr+0x12>
     }
   }
}
 800d8de:	bf00      	nop
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	2000060c 	.word	0x2000060c

0800d8ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b088      	sub	sp, #32
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d8fa:	683a      	ldr	r2, [r7, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d105      	bne.n	800d90e <ip_reass_free_complete_datagram+0x22>
 800d902:	4b45      	ldr	r3, [pc, #276]	; (800da18 <ip_reass_free_complete_datagram+0x12c>)
 800d904:	22ab      	movs	r2, #171	; 0xab
 800d906:	4945      	ldr	r1, [pc, #276]	; (800da1c <ip_reass_free_complete_datagram+0x130>)
 800d908:	4845      	ldr	r0, [pc, #276]	; (800da20 <ip_reass_free_complete_datagram+0x134>)
 800d90a:	f000 feb1 	bl	800e670 <iprintf>
  if (prev != NULL) {
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00a      	beq.n	800d92a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d005      	beq.n	800d92a <ip_reass_free_complete_datagram+0x3e>
 800d91e:	4b3e      	ldr	r3, [pc, #248]	; (800da18 <ip_reass_free_complete_datagram+0x12c>)
 800d920:	22ad      	movs	r2, #173	; 0xad
 800d922:	4940      	ldr	r1, [pc, #256]	; (800da24 <ip_reass_free_complete_datagram+0x138>)
 800d924:	483e      	ldr	r0, [pc, #248]	; (800da20 <ip_reass_free_complete_datagram+0x134>)
 800d926:	f000 fea3 	bl	800e670 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	685b      	ldr	r3, [r3, #4]
 800d930:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	889b      	ldrh	r3, [r3, #4]
 800d936:	b29b      	uxth	r3, r3
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d12a      	bne.n	800d992 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	6858      	ldr	r0, [r3, #4]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	3308      	adds	r3, #8
 800d952:	2214      	movs	r2, #20
 800d954:	4619      	mov	r1, r3
 800d956:	f000 fe78 	bl	800e64a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d95a:	2101      	movs	r1, #1
 800d95c:	69b8      	ldr	r0, [r7, #24]
 800d95e:	f7ff fc65 	bl	800d22c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d962:	69b8      	ldr	r0, [r7, #24]
 800d964:	f7f9 f93e 	bl	8006be4 <pbuf_clen>
 800d968:	4603      	mov	r3, r0
 800d96a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d96c:	8bfa      	ldrh	r2, [r7, #30]
 800d96e:	8a7b      	ldrh	r3, [r7, #18]
 800d970:	4413      	add	r3, r2
 800d972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d976:	db05      	blt.n	800d984 <ip_reass_free_complete_datagram+0x98>
 800d978:	4b27      	ldr	r3, [pc, #156]	; (800da18 <ip_reass_free_complete_datagram+0x12c>)
 800d97a:	22bc      	movs	r2, #188	; 0xbc
 800d97c:	492a      	ldr	r1, [pc, #168]	; (800da28 <ip_reass_free_complete_datagram+0x13c>)
 800d97e:	4828      	ldr	r0, [pc, #160]	; (800da20 <ip_reass_free_complete_datagram+0x134>)
 800d980:	f000 fe76 	bl	800e670 <iprintf>
    pbufs_freed += clen;
 800d984:	8bfa      	ldrh	r2, [r7, #30]
 800d986:	8a7b      	ldrh	r3, [r7, #18]
 800d988:	4413      	add	r3, r2
 800d98a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d98c:	69b8      	ldr	r0, [r7, #24]
 800d98e:	f7f9 f895 	bl	8006abc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d998:	e01f      	b.n	800d9da <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d9aa:	68f8      	ldr	r0, [r7, #12]
 800d9ac:	f7f9 f91a 	bl	8006be4 <pbuf_clen>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d9b4:	8bfa      	ldrh	r2, [r7, #30]
 800d9b6:	8a7b      	ldrh	r3, [r7, #18]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9be:	db05      	blt.n	800d9cc <ip_reass_free_complete_datagram+0xe0>
 800d9c0:	4b15      	ldr	r3, [pc, #84]	; (800da18 <ip_reass_free_complete_datagram+0x12c>)
 800d9c2:	22cc      	movs	r2, #204	; 0xcc
 800d9c4:	4918      	ldr	r1, [pc, #96]	; (800da28 <ip_reass_free_complete_datagram+0x13c>)
 800d9c6:	4816      	ldr	r0, [pc, #88]	; (800da20 <ip_reass_free_complete_datagram+0x134>)
 800d9c8:	f000 fe52 	bl	800e670 <iprintf>
    pbufs_freed += clen;
 800d9cc:	8bfa      	ldrh	r2, [r7, #30]
 800d9ce:	8a7b      	ldrh	r3, [r7, #18]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f7f9 f871 	bl	8006abc <pbuf_free>
  while (p != NULL) {
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1dc      	bne.n	800d99a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d9e0:	6839      	ldr	r1, [r7, #0]
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 f8c2 	bl	800db6c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800d9e8:	4b10      	ldr	r3, [pc, #64]	; (800da2c <ip_reass_free_complete_datagram+0x140>)
 800d9ea:	881b      	ldrh	r3, [r3, #0]
 800d9ec:	8bfa      	ldrh	r2, [r7, #30]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d905      	bls.n	800d9fe <ip_reass_free_complete_datagram+0x112>
 800d9f2:	4b09      	ldr	r3, [pc, #36]	; (800da18 <ip_reass_free_complete_datagram+0x12c>)
 800d9f4:	22d2      	movs	r2, #210	; 0xd2
 800d9f6:	490e      	ldr	r1, [pc, #56]	; (800da30 <ip_reass_free_complete_datagram+0x144>)
 800d9f8:	4809      	ldr	r0, [pc, #36]	; (800da20 <ip_reass_free_complete_datagram+0x134>)
 800d9fa:	f000 fe39 	bl	800e670 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800d9fe:	4b0b      	ldr	r3, [pc, #44]	; (800da2c <ip_reass_free_complete_datagram+0x140>)
 800da00:	881a      	ldrh	r2, [r3, #0]
 800da02:	8bfb      	ldrh	r3, [r7, #30]
 800da04:	1ad3      	subs	r3, r2, r3
 800da06:	b29a      	uxth	r2, r3
 800da08:	4b08      	ldr	r3, [pc, #32]	; (800da2c <ip_reass_free_complete_datagram+0x140>)
 800da0a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800da0c:	8bfb      	ldrh	r3, [r7, #30]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3720      	adds	r7, #32
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	08011060 	.word	0x08011060
 800da1c:	0801109c 	.word	0x0801109c
 800da20:	080110a8 	.word	0x080110a8
 800da24:	080110d0 	.word	0x080110d0
 800da28:	080110e4 	.word	0x080110e4
 800da2c:	20000610 	.word	0x20000610
 800da30:	08011104 	.word	0x08011104

0800da34 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b08a      	sub	sp, #40	; 0x28
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800da3e:	2300      	movs	r3, #0
 800da40:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800da42:	2300      	movs	r3, #0
 800da44:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800da46:	2300      	movs	r3, #0
 800da48:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800da4a:	2300      	movs	r3, #0
 800da4c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800da52:	4b28      	ldr	r3, [pc, #160]	; (800daf4 <ip_reass_remove_oldest_datagram+0xc0>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800da58:	e030      	b.n	800dabc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800da5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5c:	695a      	ldr	r2, [r3, #20]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	429a      	cmp	r2, r3
 800da64:	d10c      	bne.n	800da80 <ip_reass_remove_oldest_datagram+0x4c>
 800da66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da68:	699a      	ldr	r2, [r3, #24]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	691b      	ldr	r3, [r3, #16]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d106      	bne.n	800da80 <ip_reass_remove_oldest_datagram+0x4c>
 800da72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da74:	899a      	ldrh	r2, [r3, #12]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	889b      	ldrh	r3, [r3, #4]
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d014      	beq.n	800daaa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	3301      	adds	r3, #1
 800da84:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800da86:	6a3b      	ldr	r3, [r7, #32]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d104      	bne.n	800da96 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800da8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	61bb      	str	r3, [r7, #24]
 800da94:	e009      	b.n	800daaa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da98:	7fda      	ldrb	r2, [r3, #31]
 800da9a:	6a3b      	ldr	r3, [r7, #32]
 800da9c:	7fdb      	ldrb	r3, [r3, #31]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d803      	bhi.n	800daaa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800daa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d001      	beq.n	800dab6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1cb      	bne.n	800da5a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dac2:	6a3b      	ldr	r3, [r7, #32]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d008      	beq.n	800dada <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dac8:	69b9      	ldr	r1, [r7, #24]
 800daca:	6a38      	ldr	r0, [r7, #32]
 800dacc:	f7ff ff0e 	bl	800d8ec <ip_reass_free_complete_datagram>
 800dad0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	4413      	add	r3, r2
 800dad8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dada:	697a      	ldr	r2, [r7, #20]
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	429a      	cmp	r2, r3
 800dae0:	da02      	bge.n	800dae8 <ip_reass_remove_oldest_datagram+0xb4>
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	dcac      	bgt.n	800da42 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dae8:	697b      	ldr	r3, [r7, #20]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3728      	adds	r7, #40	; 0x28
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	2000060c 	.word	0x2000060c

0800daf8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800db02:	2004      	movs	r0, #4
 800db04:	f7f8 fa64 	bl	8005fd0 <memp_malloc>
 800db08:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d110      	bne.n	800db32 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7ff ff8e 	bl	800da34 <ip_reass_remove_oldest_datagram>
 800db18:	4602      	mov	r2, r0
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	4293      	cmp	r3, r2
 800db1e:	dc03      	bgt.n	800db28 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800db20:	2004      	movs	r0, #4
 800db22:	f7f8 fa55 	bl	8005fd0 <memp_malloc>
 800db26:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d101      	bne.n	800db32 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800db2e:	2300      	movs	r3, #0
 800db30:	e016      	b.n	800db60 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800db32:	2220      	movs	r2, #32
 800db34:	2100      	movs	r1, #0
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f000 fd92 	bl	800e660 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2203      	movs	r2, #3
 800db40:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800db42:	4b09      	ldr	r3, [pc, #36]	; (800db68 <ip_reass_enqueue_new_datagram+0x70>)
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800db4a:	4a07      	ldr	r2, [pc, #28]	; (800db68 <ip_reass_enqueue_new_datagram+0x70>)
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	3308      	adds	r3, #8
 800db54:	2214      	movs	r2, #20
 800db56:	6879      	ldr	r1, [r7, #4]
 800db58:	4618      	mov	r0, r3
 800db5a:	f000 fd76 	bl	800e64a <memcpy>
  return ipr;
 800db5e:	68fb      	ldr	r3, [r7, #12]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	2000060c 	.word	0x2000060c

0800db6c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800db76:	4b10      	ldr	r3, [pc, #64]	; (800dbb8 <ip_reass_dequeue_datagram+0x4c>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d104      	bne.n	800db8a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a0c      	ldr	r2, [pc, #48]	; (800dbb8 <ip_reass_dequeue_datagram+0x4c>)
 800db86:	6013      	str	r3, [r2, #0]
 800db88:	e00d      	b.n	800dba6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d106      	bne.n	800db9e <ip_reass_dequeue_datagram+0x32>
 800db90:	4b0a      	ldr	r3, [pc, #40]	; (800dbbc <ip_reass_dequeue_datagram+0x50>)
 800db92:	f240 1245 	movw	r2, #325	; 0x145
 800db96:	490a      	ldr	r1, [pc, #40]	; (800dbc0 <ip_reass_dequeue_datagram+0x54>)
 800db98:	480a      	ldr	r0, [pc, #40]	; (800dbc4 <ip_reass_dequeue_datagram+0x58>)
 800db9a:	f000 fd69 	bl	800e670 <iprintf>
    prev->next = ipr->next;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dba6:	6879      	ldr	r1, [r7, #4]
 800dba8:	2004      	movs	r0, #4
 800dbaa:	f7f8 fa5d 	bl	8006068 <memp_free>
}
 800dbae:	bf00      	nop
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	2000060c 	.word	0x2000060c
 800dbbc:	08011060 	.word	0x08011060
 800dbc0:	08011120 	.word	0x08011120
 800dbc4:	080110a8 	.word	0x080110a8

0800dbc8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b08c      	sub	sp, #48	; 0x30
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	885b      	ldrh	r3, [r3, #2]
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7f7 fe42 	bl	8005872 <lwip_htons>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	f003 030f 	and.w	r3, r3, #15
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	1ad3      	subs	r3, r2, r3
 800dc04:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	88db      	ldrh	r3, [r3, #6]
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7f7 fe30 	bl	8005872 <lwip_htons>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	00db      	lsls	r3, r3, #3
 800dc1c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800dc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc26:	2200      	movs	r2, #0
 800dc28:	701a      	strb	r2, [r3, #0]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	705a      	strb	r2, [r3, #1]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	709a      	strb	r2, [r3, #2]
 800dc32:	2200      	movs	r2, #0
 800dc34:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc38:	8b3a      	ldrh	r2, [r7, #24]
 800dc3a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800dc3c:	8b3a      	ldrh	r2, [r7, #24]
 800dc3e:	8b7b      	ldrh	r3, [r7, #26]
 800dc40:	4413      	add	r3, r2
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc46:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc4e:	e061      	b.n	800dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800dc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc58:	889b      	ldrh	r3, [r3, #4]
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	889b      	ldrh	r3, [r3, #4]
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d232      	bcs.n	800dccc <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800dc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc6a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800dc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d01f      	beq.n	800dcb2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800dc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc74:	889b      	ldrh	r3, [r3, #4]
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	88db      	ldrh	r3, [r3, #6]
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	f0c0 80e3 	bcc.w	800de4a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800dc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc86:	88db      	ldrh	r3, [r3, #6]
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	889b      	ldrh	r3, [r3, #4]
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	429a      	cmp	r2, r3
 800dc92:	f200 80da 	bhi.w	800de4a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc98:	68ba      	ldr	r2, [r7, #8]
 800dc9a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800dc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9e:	88db      	ldrh	r3, [r3, #6]
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca4:	889b      	ldrh	r3, [r3, #4]
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d037      	beq.n	800dd1c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dcac:	2300      	movs	r3, #0
 800dcae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800dcb0:	e034      	b.n	800dd1c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800dcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb4:	88db      	ldrh	r3, [r3, #6]
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	889b      	ldrh	r3, [r3, #4]
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	f200 80c5 	bhi.w	800de4e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	68ba      	ldr	r2, [r7, #8]
 800dcc8:	605a      	str	r2, [r3, #4]
      break;
 800dcca:	e027      	b.n	800dd1c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800dccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcce:	889b      	ldrh	r3, [r3, #4]
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	889b      	ldrh	r3, [r3, #4]
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	f000 80ba 	beq.w	800de52 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800dcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce0:	889b      	ldrh	r3, [r3, #4]
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	88db      	ldrh	r3, [r3, #6]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	429a      	cmp	r2, r3
 800dcec:	f0c0 80b3 	bcc.w	800de56 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800dcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d009      	beq.n	800dd0a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800dcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf8:	88db      	ldrh	r3, [r3, #6]
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	889b      	ldrh	r3, [r3, #4]
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d001      	beq.n	800dd0a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dd06:	2300      	movs	r3, #0
 800dd08:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800dd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d19a      	bne.n	800dc50 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800dd1a:	e000      	b.n	800dd1e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800dd1c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d12d      	bne.n	800dd80 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800dd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d01c      	beq.n	800dd64 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800dd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2c:	88db      	ldrh	r3, [r3, #6]
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd32:	889b      	ldrh	r3, [r3, #4]
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d906      	bls.n	800dd48 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800dd3a:	4b51      	ldr	r3, [pc, #324]	; (800de80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dd3c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800dd40:	4950      	ldr	r1, [pc, #320]	; (800de84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dd42:	4851      	ldr	r0, [pc, #324]	; (800de88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dd44:	f000 fc94 	bl	800e670 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800dd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800dd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd50:	88db      	ldrh	r3, [r3, #6]
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd56:	889b      	ldrh	r3, [r3, #4]
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d010      	beq.n	800dd80 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	623b      	str	r3, [r7, #32]
 800dd62:	e00d      	b.n	800dd80 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d006      	beq.n	800dd7a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800dd6c:	4b44      	ldr	r3, [pc, #272]	; (800de80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dd6e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800dd72:	4946      	ldr	r1, [pc, #280]	; (800de8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dd74:	4844      	ldr	r0, [pc, #272]	; (800de88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dd76:	f000 fc7b 	bl	800e670 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	68ba      	ldr	r2, [r7, #8]
 800dd7e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d105      	bne.n	800dd92 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	7f9b      	ldrb	r3, [r3, #30]
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d059      	beq.n	800de46 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800dd92:	6a3b      	ldr	r3, [r7, #32]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d04f      	beq.n	800de38 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d006      	beq.n	800ddae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	889b      	ldrh	r3, [r3, #4]
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d002      	beq.n	800ddb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	623b      	str	r3, [r7, #32]
 800ddb2:	e041      	b.n	800de38 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ddb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ddb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ddbe:	e012      	b.n	800dde6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ddc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc8:	88db      	ldrh	r3, [r3, #6]
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddce:	889b      	ldrh	r3, [r3, #4]
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d002      	beq.n	800dddc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	623b      	str	r3, [r7, #32]
            break;
 800ddda:	e007      	b.n	800ddec <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800dddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddde:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800dde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1e9      	bne.n	800ddc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ddec:	6a3b      	ldr	r3, [r7, #32]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d022      	beq.n	800de38 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800ddfa:	4b21      	ldr	r3, [pc, #132]	; (800de80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800ddfc:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800de00:	4923      	ldr	r1, [pc, #140]	; (800de90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800de02:	4821      	ldr	r0, [pc, #132]	; (800de88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800de04:	f000 fc34 	bl	800e670 <iprintf>
          LWIP_ASSERT("sanity check",
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de10:	429a      	cmp	r2, r3
 800de12:	d106      	bne.n	800de22 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800de14:	4b1a      	ldr	r3, [pc, #104]	; (800de80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800de16:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800de1a:	491d      	ldr	r1, [pc, #116]	; (800de90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800de1c:	481a      	ldr	r0, [pc, #104]	; (800de88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800de1e:	f000 fc27 	bl	800e670 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800de22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d006      	beq.n	800de38 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800de2a:	4b15      	ldr	r3, [pc, #84]	; (800de80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800de2c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800de30:	4918      	ldr	r1, [pc, #96]	; (800de94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800de32:	4815      	ldr	r0, [pc, #84]	; (800de88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800de34:	f000 fc1c 	bl	800e670 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	bf14      	ite	ne
 800de3e:	2301      	movne	r3, #1
 800de40:	2300      	moveq	r3, #0
 800de42:	b2db      	uxtb	r3, r3
 800de44:	e018      	b.n	800de78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800de46:	2300      	movs	r3, #0
 800de48:	e016      	b.n	800de78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800de4a:	bf00      	nop
 800de4c:	e004      	b.n	800de58 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800de4e:	bf00      	nop
 800de50:	e002      	b.n	800de58 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800de52:	bf00      	nop
 800de54:	e000      	b.n	800de58 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800de56:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800de58:	68b8      	ldr	r0, [r7, #8]
 800de5a:	f7f8 fec3 	bl	8006be4 <pbuf_clen>
 800de5e:	4603      	mov	r3, r0
 800de60:	461a      	mov	r2, r3
 800de62:	4b0d      	ldr	r3, [pc, #52]	; (800de98 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	1a9b      	subs	r3, r3, r2
 800de68:	b29a      	uxth	r2, r3
 800de6a:	4b0b      	ldr	r3, [pc, #44]	; (800de98 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800de6c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800de6e:	68b8      	ldr	r0, [r7, #8]
 800de70:	f7f8 fe24 	bl	8006abc <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de74:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3730      	adds	r7, #48	; 0x30
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	08011060 	.word	0x08011060
 800de84:	0801113c 	.word	0x0801113c
 800de88:	080110a8 	.word	0x080110a8
 800de8c:	0801115c 	.word	0x0801115c
 800de90:	08011194 	.word	0x08011194
 800de94:	080111a4 	.word	0x080111a4
 800de98:	20000610 	.word	0x20000610

0800de9c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b08e      	sub	sp, #56	; 0x38
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800deaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	f003 030f 	and.w	r3, r3, #15
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	2b14      	cmp	r3, #20
 800deb6:	f040 8131 	bne.w	800e11c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800deba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debc:	88db      	ldrh	r3, [r3, #6]
 800debe:	b29b      	uxth	r3, r3
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7f7 fcd6 	bl	8005872 <lwip_htons>
 800dec6:	4603      	mov	r3, r0
 800dec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800decc:	b29b      	uxth	r3, r3
 800dece:	00db      	lsls	r3, r3, #3
 800ded0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ded2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded4:	885b      	ldrh	r3, [r3, #2]
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	4618      	mov	r0, r3
 800deda:	f7f7 fcca 	bl	8005872 <lwip_htons>
 800dede:	4603      	mov	r3, r0
 800dee0:	461a      	mov	r2, r3
 800dee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	f003 030f 	and.w	r3, r3, #15
 800deec:	b29b      	uxth	r3, r3
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	b29b      	uxth	r3, r3
 800def2:	1ad3      	subs	r3, r2, r3
 800def4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f7f8 fe74 	bl	8006be4 <pbuf_clen>
 800defc:	4603      	mov	r3, r0
 800defe:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800df00:	4b8d      	ldr	r3, [pc, #564]	; (800e138 <ip4_reass+0x29c>)
 800df02:	881b      	ldrh	r3, [r3, #0]
 800df04:	461a      	mov	r2, r3
 800df06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df08:	4413      	add	r3, r2
 800df0a:	2b0a      	cmp	r3, #10
 800df0c:	dd10      	ble.n	800df30 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800df0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df10:	4619      	mov	r1, r3
 800df12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df14:	f7ff fd8e 	bl	800da34 <ip_reass_remove_oldest_datagram>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f000 8100 	beq.w	800e120 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800df20:	4b85      	ldr	r3, [pc, #532]	; (800e138 <ip4_reass+0x29c>)
 800df22:	881b      	ldrh	r3, [r3, #0]
 800df24:	461a      	mov	r2, r3
 800df26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df28:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800df2a:	2b0a      	cmp	r3, #10
 800df2c:	f300 80f8 	bgt.w	800e120 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800df30:	4b82      	ldr	r3, [pc, #520]	; (800e13c <ip4_reass+0x2a0>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	633b      	str	r3, [r7, #48]	; 0x30
 800df36:	e015      	b.n	800df64 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800df38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3a:	695a      	ldr	r2, [r3, #20]
 800df3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	429a      	cmp	r2, r3
 800df42:	d10c      	bne.n	800df5e <ip4_reass+0xc2>
 800df44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df46:	699a      	ldr	r2, [r3, #24]
 800df48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d106      	bne.n	800df5e <ip4_reass+0xc2>
 800df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df52:	899a      	ldrh	r2, [r3, #12]
 800df54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df56:	889b      	ldrh	r3, [r3, #4]
 800df58:	b29b      	uxth	r3, r3
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d006      	beq.n	800df6c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800df5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	633b      	str	r3, [r7, #48]	; 0x30
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1e6      	bne.n	800df38 <ip4_reass+0x9c>
 800df6a:	e000      	b.n	800df6e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800df6c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800df6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df70:	2b00      	cmp	r3, #0
 800df72:	d109      	bne.n	800df88 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800df74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df76:	4619      	mov	r1, r3
 800df78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df7a:	f7ff fdbd 	bl	800daf8 <ip_reass_enqueue_new_datagram>
 800df7e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	2b00      	cmp	r3, #0
 800df84:	d11c      	bne.n	800dfc0 <ip4_reass+0x124>
      goto nullreturn;
 800df86:	e0ce      	b.n	800e126 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800df88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8a:	88db      	ldrh	r3, [r3, #6]
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	4618      	mov	r0, r3
 800df90:	f7f7 fc6f 	bl	8005872 <lwip_htons>
 800df94:	4603      	mov	r3, r0
 800df96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d110      	bne.n	800dfc0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	89db      	ldrh	r3, [r3, #14]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7f7 fc65 	bl	8005872 <lwip_htons>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d006      	beq.n	800dfc0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	3308      	adds	r3, #8
 800dfb6:	2214      	movs	r2, #20
 800dfb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f000 fb45 	bl	800e64a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc2:	88db      	ldrh	r3, [r3, #6]
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	f003 0320 	and.w	r3, r3, #32
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	bf0c      	ite	eq
 800dfce:	2301      	moveq	r3, #1
 800dfd0:	2300      	movne	r3, #0
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d00e      	beq.n	800dffa <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800dfdc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dfde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfe0:	4413      	add	r3, r2
 800dfe2:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dfe4:	8b7a      	ldrh	r2, [r7, #26]
 800dfe6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	f0c0 8099 	bcc.w	800e120 <ip4_reass+0x284>
 800dfee:	8b7b      	ldrh	r3, [r7, #26]
 800dff0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800dff4:	4293      	cmp	r3, r2
 800dff6:	f200 8093 	bhi.w	800e120 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800dffa:	69fa      	ldr	r2, [r7, #28]
 800dffc:	6879      	ldr	r1, [r7, #4]
 800dffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e000:	f7ff fde2 	bl	800dbc8 <ip_reass_chain_frag_into_datagram_and_validate>
 800e004:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e00c:	f000 808a 	beq.w	800e124 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e010:	4b49      	ldr	r3, [pc, #292]	; (800e138 <ip4_reass+0x29c>)
 800e012:	881a      	ldrh	r2, [r3, #0]
 800e014:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e016:	4413      	add	r3, r2
 800e018:	b29a      	uxth	r2, r3
 800e01a:	4b47      	ldr	r3, [pc, #284]	; (800e138 <ip4_reass+0x29c>)
 800e01c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d00d      	beq.n	800e040 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800e024:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e028:	4413      	add	r3, r2
 800e02a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02e:	8a7a      	ldrh	r2, [r7, #18]
 800e030:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e034:	7f9b      	ldrb	r3, [r3, #30]
 800e036:	f043 0301 	orr.w	r3, r3, #1
 800e03a:	b2da      	uxtb	r2, r3
 800e03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	2b01      	cmp	r3, #1
 800e044:	d168      	bne.n	800e118 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800e046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e048:	8b9b      	ldrh	r3, [r3, #28]
 800e04a:	3314      	adds	r3, #20
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e050:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800e052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800e05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e066:	3308      	adds	r3, #8
 800e068:	2214      	movs	r2, #20
 800e06a:	4619      	mov	r1, r3
 800e06c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e06e:	f000 faec 	bl	800e64a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800e072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e074:	8b9b      	ldrh	r3, [r3, #28]
 800e076:	4618      	mov	r0, r3
 800e078:	f7f7 fbfb 	bl	8005872 <lwip_htons>
 800e07c:	4603      	mov	r3, r0
 800e07e:	461a      	mov	r2, r3
 800e080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e082:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e086:	2200      	movs	r2, #0
 800e088:	719a      	strb	r2, [r3, #6]
 800e08a:	2200      	movs	r2, #0
 800e08c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e090:	2200      	movs	r2, #0
 800e092:	729a      	strb	r2, [r3, #10]
 800e094:	2200      	movs	r2, #0
 800e096:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e09e:	e00e      	b.n	800e0be <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800e0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800e0a6:	f06f 0113 	mvn.w	r1, #19
 800e0aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e0ac:	f7f8 fce2 	bl	8006a74 <pbuf_header>
      pbuf_cat(p, r);
 800e0b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7f8 fdd0 	bl	8006c58 <pbuf_cat>
      r = iprh->next_pbuf;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1ed      	bne.n	800e0a0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e0c4:	4b1d      	ldr	r3, [pc, #116]	; (800e13c <ip4_reass+0x2a0>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d102      	bne.n	800e0d4 <ip4_reass+0x238>
      ipr_prev = NULL;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0d2:	e010      	b.n	800e0f6 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e0d4:	4b19      	ldr	r3, [pc, #100]	; (800e13c <ip4_reass+0x2a0>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0da:	e007      	b.n	800e0ec <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800e0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d006      	beq.n	800e0f4 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1f4      	bne.n	800e0dc <ip4_reass+0x240>
 800e0f2:	e000      	b.n	800e0f6 <ip4_reass+0x25a>
          break;
 800e0f4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e0f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0fa:	f7ff fd37 	bl	800db6c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f7f8 fd70 	bl	8006be4 <pbuf_clen>
 800e104:	4603      	mov	r3, r0
 800e106:	461a      	mov	r2, r3
 800e108:	4b0b      	ldr	r3, [pc, #44]	; (800e138 <ip4_reass+0x29c>)
 800e10a:	881b      	ldrh	r3, [r3, #0]
 800e10c:	1a9b      	subs	r3, r3, r2
 800e10e:	b29a      	uxth	r2, r3
 800e110:	4b09      	ldr	r3, [pc, #36]	; (800e138 <ip4_reass+0x29c>)
 800e112:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	e00a      	b.n	800e12e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e118:	2300      	movs	r3, #0
 800e11a:	e008      	b.n	800e12e <ip4_reass+0x292>
    goto nullreturn;
 800e11c:	bf00      	nop
 800e11e:	e002      	b.n	800e126 <ip4_reass+0x28a>

nullreturn:
 800e120:	bf00      	nop
 800e122:	e000      	b.n	800e126 <ip4_reass+0x28a>
    goto nullreturn;
 800e124:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f7f8 fcc8 	bl	8006abc <pbuf_free>
  return NULL;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3738      	adds	r7, #56	; 0x38
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	20000610 	.word	0x20000610
 800e13c:	2000060c 	.word	0x2000060c

0800e140 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800e144:	2005      	movs	r0, #5
 800e146:	f7f7 ff43 	bl	8005fd0 <memp_malloc>
 800e14a:	4603      	mov	r3, r0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d106      	bne.n	800e16c <ip_frag_free_pbuf_custom_ref+0x1c>
 800e15e:	4b07      	ldr	r3, [pc, #28]	; (800e17c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e160:	f240 22ae 	movw	r2, #686	; 0x2ae
 800e164:	4906      	ldr	r1, [pc, #24]	; (800e180 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e166:	4807      	ldr	r0, [pc, #28]	; (800e184 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e168:	f000 fa82 	bl	800e670 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e16c:	6879      	ldr	r1, [r7, #4]
 800e16e:	2005      	movs	r0, #5
 800e170:	f7f7 ff7a 	bl	8006068 <memp_free>
}
 800e174:	bf00      	nop
 800e176:	3708      	adds	r7, #8
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	08011060 	.word	0x08011060
 800e180:	080111c8 	.word	0x080111c8
 800e184:	080110a8 	.word	0x080110a8

0800e188 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d106      	bne.n	800e1a8 <ipfrag_free_pbuf_custom+0x20>
 800e19a:	4b11      	ldr	r3, [pc, #68]	; (800e1e0 <ipfrag_free_pbuf_custom+0x58>)
 800e19c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800e1a0:	4910      	ldr	r1, [pc, #64]	; (800e1e4 <ipfrag_free_pbuf_custom+0x5c>)
 800e1a2:	4811      	ldr	r0, [pc, #68]	; (800e1e8 <ipfrag_free_pbuf_custom+0x60>)
 800e1a4:	f000 fa64 	bl	800e670 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d006      	beq.n	800e1be <ipfrag_free_pbuf_custom+0x36>
 800e1b0:	4b0b      	ldr	r3, [pc, #44]	; (800e1e0 <ipfrag_free_pbuf_custom+0x58>)
 800e1b2:	f240 22b9 	movw	r2, #697	; 0x2b9
 800e1b6:	490d      	ldr	r1, [pc, #52]	; (800e1ec <ipfrag_free_pbuf_custom+0x64>)
 800e1b8:	480b      	ldr	r0, [pc, #44]	; (800e1e8 <ipfrag_free_pbuf_custom+0x60>)
 800e1ba:	f000 fa59 	bl	800e670 <iprintf>
  if (pcr->original != NULL) {
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	695b      	ldr	r3, [r3, #20]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d004      	beq.n	800e1d0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	695b      	ldr	r3, [r3, #20]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7f8 fc76 	bl	8006abc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f7ff ffbd 	bl	800e150 <ip_frag_free_pbuf_custom_ref>
}
 800e1d6:	bf00      	nop
 800e1d8:	3710      	adds	r7, #16
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	08011060 	.word	0x08011060
 800e1e4:	080111d4 	.word	0x080111d4
 800e1e8:	080110a8 	.word	0x080110a8
 800e1ec:	080111e0 	.word	0x080111e0

0800e1f0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b092      	sub	sp, #72	; 0x48
 800e1f4:	af02      	add	r7, sp, #8
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e204:	3b14      	subs	r3, #20
 800e206:	2b00      	cmp	r3, #0
 800e208:	da00      	bge.n	800e20c <ip4_frag+0x1c>
 800e20a:	3307      	adds	r3, #7
 800e20c:	10db      	asrs	r3, r3, #3
 800e20e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e210:	2314      	movs	r3, #20
 800e212:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800e21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800e21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	f003 030f 	and.w	r3, r3, #15
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	2b14      	cmp	r3, #20
 800e22a:	d009      	beq.n	800e240 <ip4_frag+0x50>
 800e22c:	4b79      	ldr	r3, [pc, #484]	; (800e414 <ip4_frag+0x224>)
 800e22e:	f240 22e1 	movw	r2, #737	; 0x2e1
 800e232:	4979      	ldr	r1, [pc, #484]	; (800e418 <ip4_frag+0x228>)
 800e234:	4879      	ldr	r0, [pc, #484]	; (800e41c <ip4_frag+0x22c>)
 800e236:	f000 fa1b 	bl	800e670 <iprintf>
 800e23a:	f06f 0305 	mvn.w	r3, #5
 800e23e:	e0e5      	b.n	800e40c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e242:	88db      	ldrh	r3, [r3, #6]
 800e244:	b29b      	uxth	r3, r3
 800e246:	4618      	mov	r0, r3
 800e248:	f7f7 fb13 	bl	8005872 <lwip_htons>
 800e24c:	4603      	mov	r3, r0
 800e24e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800e250:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e252:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e256:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800e258:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e25a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d009      	beq.n	800e276 <ip4_frag+0x86>
 800e262:	4b6c      	ldr	r3, [pc, #432]	; (800e414 <ip4_frag+0x224>)
 800e264:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e268:	496d      	ldr	r1, [pc, #436]	; (800e420 <ip4_frag+0x230>)
 800e26a:	486c      	ldr	r0, [pc, #432]	; (800e41c <ip4_frag+0x22c>)
 800e26c:	f000 fa00 	bl	800e670 <iprintf>
 800e270:	f06f 0305 	mvn.w	r3, #5
 800e274:	e0ca      	b.n	800e40c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	891b      	ldrh	r3, [r3, #8]
 800e27a:	3b14      	subs	r3, #20
 800e27c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800e27e:	e0bc      	b.n	800e3fa <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800e280:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e282:	00da      	lsls	r2, r3, #3
 800e284:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e286:	4293      	cmp	r3, r2
 800e288:	bfa8      	it	ge
 800e28a:	4613      	movge	r3, r2
 800e28c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e28e:	2200      	movs	r2, #0
 800e290:	2114      	movs	r1, #20
 800e292:	2002      	movs	r0, #2
 800e294:	f7f8 f8a0 	bl	80063d8 <pbuf_alloc>
 800e298:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f000 80b2 	beq.w	800e406 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	895b      	ldrh	r3, [r3, #10]
 800e2a6:	2b13      	cmp	r3, #19
 800e2a8:	d806      	bhi.n	800e2b8 <ip4_frag+0xc8>
 800e2aa:	4b5a      	ldr	r3, [pc, #360]	; (800e414 <ip4_frag+0x224>)
 800e2ac:	f240 3209 	movw	r2, #777	; 0x309
 800e2b0:	495c      	ldr	r1, [pc, #368]	; (800e424 <ip4_frag+0x234>)
 800e2b2:	485a      	ldr	r0, [pc, #360]	; (800e41c <ip4_frag+0x22c>)
 800e2b4:	f000 f9dc 	bl	800e670 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e2b8:	6a3b      	ldr	r3, [r7, #32]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	2214      	movs	r2, #20
 800e2be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f000 f9c2 	bl	800e64a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e2c6:	6a3b      	ldr	r3, [r7, #32]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800e2cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e2ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800e2d0:	e04f      	b.n	800e372 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	895a      	ldrh	r2, [r3, #10]
 800e2d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e2dc:	8b7a      	ldrh	r2, [r7, #26]
 800e2de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	bf28      	it	cs
 800e2e4:	4613      	movcs	r3, r2
 800e2e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e2e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d105      	bne.n	800e2fa <ip4_frag+0x10a>
        poff = 0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	60fb      	str	r3, [r7, #12]
        continue;
 800e2f8:	e03b      	b.n	800e372 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e2fa:	f7ff ff21 	bl	800e140 <ip_frag_alloc_pbuf_custom_ref>
 800e2fe:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d103      	bne.n	800e30e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800e306:	6a38      	ldr	r0, [r7, #32]
 800e308:	f7f8 fbd8 	bl	8006abc <pbuf_free>
        goto memerr;
 800e30c:	e07c      	b.n	800e408 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e30e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e314:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e316:	4413      	add	r3, r2
 800e318:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800e31a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e31c:	9201      	str	r2, [sp, #4]
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	4603      	mov	r3, r0
 800e322:	2202      	movs	r2, #2
 800e324:	2004      	movs	r0, #4
 800e326:	f7f8 f9eb 	bl	8006700 <pbuf_alloced_custom>
 800e32a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d106      	bne.n	800e340 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e332:	6978      	ldr	r0, [r7, #20]
 800e334:	f7ff ff0c 	bl	800e150 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e338:	6a38      	ldr	r0, [r7, #32]
 800e33a:	f7f8 fbbf 	bl	8006abc <pbuf_free>
        goto memerr;
 800e33e:	e063      	b.n	800e408 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f7f8 fc67 	bl	8006c14 <pbuf_ref>
      pcr->original = p;
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	4a36      	ldr	r2, [pc, #216]	; (800e428 <ip4_frag+0x238>)
 800e350:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e352:	6939      	ldr	r1, [r7, #16]
 800e354:	6a38      	ldr	r0, [r7, #32]
 800e356:	f7f8 fc7f 	bl	8006c58 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800e35a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800e35c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e35e:	1ad3      	subs	r3, r2, r3
 800e360:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800e362:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e364:	2b00      	cmp	r3, #0
 800e366:	d004      	beq.n	800e372 <ip4_frag+0x182>
        poff = 0;
 800e368:	2300      	movs	r3, #0
 800e36a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e372:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e374:	2b00      	cmp	r3, #0
 800e376:	d1ac      	bne.n	800e2d2 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800e378:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e37a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e37c:	4413      	add	r3, r2
 800e37e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e380:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e386:	3b14      	subs	r3, #20
 800e388:	429a      	cmp	r2, r3
 800e38a:	bfd4      	ite	le
 800e38c:	2301      	movle	r3, #1
 800e38e:	2300      	movgt	r3, #0
 800e390:	b2db      	uxtb	r3, r3
 800e392:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e394:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e396:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e39a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d103      	bne.n	800e3aa <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800e3a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e3a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e3a8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e3aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7f7 fa60 	bl	8005872 <lwip_htons>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800e3ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3bc:	3314      	adds	r3, #20
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7f7 fa56 	bl	8005872 <lwip_htons>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3cc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	729a      	strb	r2, [r3, #10]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	695b      	ldr	r3, [r3, #20]
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	6a39      	ldr	r1, [r7, #32]
 800e3e0:	68b8      	ldr	r0, [r7, #8]
 800e3e2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e3e4:	6a38      	ldr	r0, [r7, #32]
 800e3e6:	f7f8 fb69 	bl	8006abc <pbuf_free>
    left -= fragsize;
 800e3ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e3ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3ee:	1ad3      	subs	r3, r2, r3
 800e3f0:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800e3f2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e3f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e3f6:	4413      	add	r3, r2
 800e3f8:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800e3fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f47f af3f 	bne.w	800e280 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e402:	2300      	movs	r3, #0
 800e404:	e002      	b.n	800e40c <ip4_frag+0x21c>
      goto memerr;
 800e406:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3740      	adds	r7, #64	; 0x40
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	08011060 	.word	0x08011060
 800e418:	080111ec 	.word	0x080111ec
 800e41c:	080110a8 	.word	0x080110a8
 800e420:	08011214 	.word	0x08011214
 800e424:	08011230 	.word	0x08011230
 800e428:	0800e189 	.word	0x0800e189

0800e42c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b086      	sub	sp, #24
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800e436:	230e      	movs	r3, #14
 800e438:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	895b      	ldrh	r3, [r3, #10]
 800e43e:	2b0e      	cmp	r3, #14
 800e440:	d977      	bls.n	800e532 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	7b1a      	ldrb	r2, [r3, #12]
 800e44c:	7b5b      	ldrb	r3, [r3, #13]
 800e44e:	021b      	lsls	r3, r3, #8
 800e450:	4313      	orrs	r3, r2
 800e452:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	f003 0301 	and.w	r3, r3, #1
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d023      	beq.n	800e4a8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d10f      	bne.n	800e488 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	785b      	ldrb	r3, [r3, #1]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d11b      	bne.n	800e4a8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e474:	2b5e      	cmp	r3, #94	; 0x5e
 800e476:	d117      	bne.n	800e4a8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	7b5b      	ldrb	r3, [r3, #13]
 800e47c:	f043 0310 	orr.w	r3, r3, #16
 800e480:	b2da      	uxtb	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	735a      	strb	r2, [r3, #13]
 800e486:	e00f      	b.n	800e4a8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	2206      	movs	r2, #6
 800e48c:	4930      	ldr	r1, [pc, #192]	; (800e550 <ethernet_input+0x124>)
 800e48e:	4618      	mov	r0, r3
 800e490:	f000 f8cc 	bl	800e62c <memcmp>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d106      	bne.n	800e4a8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	7b5b      	ldrb	r3, [r3, #13]
 800e49e:	f043 0308 	orr.w	r3, r3, #8
 800e4a2:	b2da      	uxtb	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e4a8:	89fb      	ldrh	r3, [r7, #14]
 800e4aa:	2b08      	cmp	r3, #8
 800e4ac:	d003      	beq.n	800e4b6 <ethernet_input+0x8a>
 800e4ae:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e4b2:	d01e      	beq.n	800e4f2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e4b4:	e044      	b.n	800e540 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e4bc:	f003 0308 	and.w	r3, r3, #8
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d038      	beq.n	800e536 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	895b      	ldrh	r3, [r3, #10]
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	db33      	blt.n	800e53a <ethernet_input+0x10e>
 800e4d2:	8afb      	ldrh	r3, [r7, #22]
 800e4d4:	425b      	negs	r3, r3
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	b21b      	sxth	r3, r3
 800e4da:	4619      	mov	r1, r3
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f7f8 fac9 	bl	8006a74 <pbuf_header>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d128      	bne.n	800e53a <ethernet_input+0x10e>
        ip4_input(p, netif);
 800e4e8:	6839      	ldr	r1, [r7, #0]
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7fe ff80 	bl	800d3f0 <ip4_input>
      break;
 800e4f0:	e01d      	b.n	800e52e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e4f8:	f003 0308 	and.w	r3, r3, #8
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d01e      	beq.n	800e53e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	895b      	ldrh	r3, [r3, #10]
 800e504:	461a      	mov	r2, r3
 800e506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	db15      	blt.n	800e53a <ethernet_input+0x10e>
 800e50e:	8afb      	ldrh	r3, [r7, #22]
 800e510:	425b      	negs	r3, r3
 800e512:	b29b      	uxth	r3, r3
 800e514:	b21b      	sxth	r3, r3
 800e516:	4619      	mov	r1, r3
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7f8 faab 	bl	8006a74 <pbuf_header>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d10a      	bne.n	800e53a <ethernet_input+0x10e>
        etharp_input(p, netif);
 800e524:	6839      	ldr	r1, [r7, #0]
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f7fe f94e 	bl	800c7c8 <etharp_input>
      break;
 800e52c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e52e:	2300      	movs	r3, #0
 800e530:	e00a      	b.n	800e548 <ethernet_input+0x11c>
    goto free_and_return;
 800e532:	bf00      	nop
 800e534:	e004      	b.n	800e540 <ethernet_input+0x114>
        goto free_and_return;
 800e536:	bf00      	nop
 800e538:	e002      	b.n	800e540 <ethernet_input+0x114>

free_and_return:
 800e53a:	bf00      	nop
 800e53c:	e000      	b.n	800e540 <ethernet_input+0x114>
        goto free_and_return;
 800e53e:	bf00      	nop
  pbuf_free(p);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7f8 fabb 	bl	8006abc <pbuf_free>
  return ERR_OK;
 800e546:	2300      	movs	r3, #0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3718      	adds	r7, #24
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	080113dc 	.word	0x080113dc

0800e554 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b086      	sub	sp, #24
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	607a      	str	r2, [r7, #4]
 800e560:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e562:	8c3b      	ldrh	r3, [r7, #32]
 800e564:	4618      	mov	r0, r3
 800e566:	f7f7 f984 	bl	8005872 <lwip_htons>
 800e56a:	4603      	mov	r3, r0
 800e56c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800e56e:	210e      	movs	r1, #14
 800e570:	68b8      	ldr	r0, [r7, #8]
 800e572:	f7f8 fa7f 	bl	8006a74 <pbuf_header>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d125      	bne.n	800e5c8 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	8afa      	ldrh	r2, [r7, #22]
 800e586:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	2206      	movs	r2, #6
 800e58c:	6839      	ldr	r1, [r7, #0]
 800e58e:	4618      	mov	r0, r3
 800e590:	f000 f85b 	bl	800e64a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	3306      	adds	r3, #6
 800e598:	2206      	movs	r2, #6
 800e59a:	6879      	ldr	r1, [r7, #4]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f000 f854 	bl	800e64a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5a8:	2b06      	cmp	r3, #6
 800e5aa:	d006      	beq.n	800e5ba <ethernet_output+0x66>
 800e5ac:	4b0a      	ldr	r3, [pc, #40]	; (800e5d8 <ethernet_output+0x84>)
 800e5ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e5b2:	490a      	ldr	r1, [pc, #40]	; (800e5dc <ethernet_output+0x88>)
 800e5b4:	480a      	ldr	r0, [pc, #40]	; (800e5e0 <ethernet_output+0x8c>)
 800e5b6:	f000 f85b 	bl	800e670 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	699b      	ldr	r3, [r3, #24]
 800e5be:	68b9      	ldr	r1, [r7, #8]
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	4798      	blx	r3
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	e002      	b.n	800e5ce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e5c8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e5ca:	f06f 0301 	mvn.w	r3, #1
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3718      	adds	r7, #24
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	08011250 	.word	0x08011250
 800e5dc:	08011288 	.word	0x08011288
 800e5e0:	080112bc 	.word	0x080112bc

0800e5e4 <__libc_init_array>:
 800e5e4:	b570      	push	{r4, r5, r6, lr}
 800e5e6:	4e0d      	ldr	r6, [pc, #52]	; (800e61c <__libc_init_array+0x38>)
 800e5e8:	4c0d      	ldr	r4, [pc, #52]	; (800e620 <__libc_init_array+0x3c>)
 800e5ea:	1ba4      	subs	r4, r4, r6
 800e5ec:	10a4      	asrs	r4, r4, #2
 800e5ee:	2500      	movs	r5, #0
 800e5f0:	42a5      	cmp	r5, r4
 800e5f2:	d109      	bne.n	800e608 <__libc_init_array+0x24>
 800e5f4:	4e0b      	ldr	r6, [pc, #44]	; (800e624 <__libc_init_array+0x40>)
 800e5f6:	4c0c      	ldr	r4, [pc, #48]	; (800e628 <__libc_init_array+0x44>)
 800e5f8:	f000 ffcc 	bl	800f594 <_init>
 800e5fc:	1ba4      	subs	r4, r4, r6
 800e5fe:	10a4      	asrs	r4, r4, #2
 800e600:	2500      	movs	r5, #0
 800e602:	42a5      	cmp	r5, r4
 800e604:	d105      	bne.n	800e612 <__libc_init_array+0x2e>
 800e606:	bd70      	pop	{r4, r5, r6, pc}
 800e608:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e60c:	4798      	blx	r3
 800e60e:	3501      	adds	r5, #1
 800e610:	e7ee      	b.n	800e5f0 <__libc_init_array+0xc>
 800e612:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e616:	4798      	blx	r3
 800e618:	3501      	adds	r5, #1
 800e61a:	e7f2      	b.n	800e602 <__libc_init_array+0x1e>
 800e61c:	0801148c 	.word	0x0801148c
 800e620:	0801148c 	.word	0x0801148c
 800e624:	0801148c 	.word	0x0801148c
 800e628:	08011490 	.word	0x08011490

0800e62c <memcmp>:
 800e62c:	b530      	push	{r4, r5, lr}
 800e62e:	2400      	movs	r4, #0
 800e630:	42a2      	cmp	r2, r4
 800e632:	d101      	bne.n	800e638 <memcmp+0xc>
 800e634:	2000      	movs	r0, #0
 800e636:	e007      	b.n	800e648 <memcmp+0x1c>
 800e638:	5d03      	ldrb	r3, [r0, r4]
 800e63a:	3401      	adds	r4, #1
 800e63c:	190d      	adds	r5, r1, r4
 800e63e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800e642:	42ab      	cmp	r3, r5
 800e644:	d0f4      	beq.n	800e630 <memcmp+0x4>
 800e646:	1b58      	subs	r0, r3, r5
 800e648:	bd30      	pop	{r4, r5, pc}

0800e64a <memcpy>:
 800e64a:	b510      	push	{r4, lr}
 800e64c:	1e43      	subs	r3, r0, #1
 800e64e:	440a      	add	r2, r1
 800e650:	4291      	cmp	r1, r2
 800e652:	d100      	bne.n	800e656 <memcpy+0xc>
 800e654:	bd10      	pop	{r4, pc}
 800e656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e65a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e65e:	e7f7      	b.n	800e650 <memcpy+0x6>

0800e660 <memset>:
 800e660:	4402      	add	r2, r0
 800e662:	4603      	mov	r3, r0
 800e664:	4293      	cmp	r3, r2
 800e666:	d100      	bne.n	800e66a <memset+0xa>
 800e668:	4770      	bx	lr
 800e66a:	f803 1b01 	strb.w	r1, [r3], #1
 800e66e:	e7f9      	b.n	800e664 <memset+0x4>

0800e670 <iprintf>:
 800e670:	b40f      	push	{r0, r1, r2, r3}
 800e672:	4b0a      	ldr	r3, [pc, #40]	; (800e69c <iprintf+0x2c>)
 800e674:	b513      	push	{r0, r1, r4, lr}
 800e676:	681c      	ldr	r4, [r3, #0]
 800e678:	b124      	cbz	r4, 800e684 <iprintf+0x14>
 800e67a:	69a3      	ldr	r3, [r4, #24]
 800e67c:	b913      	cbnz	r3, 800e684 <iprintf+0x14>
 800e67e:	4620      	mov	r0, r4
 800e680:	f000 fa36 	bl	800eaf0 <__sinit>
 800e684:	ab05      	add	r3, sp, #20
 800e686:	9a04      	ldr	r2, [sp, #16]
 800e688:	68a1      	ldr	r1, [r4, #8]
 800e68a:	9301      	str	r3, [sp, #4]
 800e68c:	4620      	mov	r0, r4
 800e68e:	f000 fbef 	bl	800ee70 <_vfiprintf_r>
 800e692:	b002      	add	sp, #8
 800e694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e698:	b004      	add	sp, #16
 800e69a:	4770      	bx	lr
 800e69c:	20000018 	.word	0x20000018

0800e6a0 <putchar>:
 800e6a0:	b538      	push	{r3, r4, r5, lr}
 800e6a2:	4b08      	ldr	r3, [pc, #32]	; (800e6c4 <putchar+0x24>)
 800e6a4:	681c      	ldr	r4, [r3, #0]
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	b124      	cbz	r4, 800e6b4 <putchar+0x14>
 800e6aa:	69a3      	ldr	r3, [r4, #24]
 800e6ac:	b913      	cbnz	r3, 800e6b4 <putchar+0x14>
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	f000 fa1e 	bl	800eaf0 <__sinit>
 800e6b4:	68a2      	ldr	r2, [r4, #8]
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6be:	f000 be75 	b.w	800f3ac <_putc_r>
 800e6c2:	bf00      	nop
 800e6c4:	20000018 	.word	0x20000018

0800e6c8 <_puts_r>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	460e      	mov	r6, r1
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	b118      	cbz	r0, 800e6d8 <_puts_r+0x10>
 800e6d0:	6983      	ldr	r3, [r0, #24]
 800e6d2:	b90b      	cbnz	r3, 800e6d8 <_puts_r+0x10>
 800e6d4:	f000 fa0c 	bl	800eaf0 <__sinit>
 800e6d8:	69ab      	ldr	r3, [r5, #24]
 800e6da:	68ac      	ldr	r4, [r5, #8]
 800e6dc:	b913      	cbnz	r3, 800e6e4 <_puts_r+0x1c>
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f000 fa06 	bl	800eaf0 <__sinit>
 800e6e4:	4b23      	ldr	r3, [pc, #140]	; (800e774 <_puts_r+0xac>)
 800e6e6:	429c      	cmp	r4, r3
 800e6e8:	d117      	bne.n	800e71a <_puts_r+0x52>
 800e6ea:	686c      	ldr	r4, [r5, #4]
 800e6ec:	89a3      	ldrh	r3, [r4, #12]
 800e6ee:	071b      	lsls	r3, r3, #28
 800e6f0:	d51d      	bpl.n	800e72e <_puts_r+0x66>
 800e6f2:	6923      	ldr	r3, [r4, #16]
 800e6f4:	b1db      	cbz	r3, 800e72e <_puts_r+0x66>
 800e6f6:	3e01      	subs	r6, #1
 800e6f8:	68a3      	ldr	r3, [r4, #8]
 800e6fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e6fe:	3b01      	subs	r3, #1
 800e700:	60a3      	str	r3, [r4, #8]
 800e702:	b9e9      	cbnz	r1, 800e740 <_puts_r+0x78>
 800e704:	2b00      	cmp	r3, #0
 800e706:	da2e      	bge.n	800e766 <_puts_r+0x9e>
 800e708:	4622      	mov	r2, r4
 800e70a:	210a      	movs	r1, #10
 800e70c:	4628      	mov	r0, r5
 800e70e:	f000 f83f 	bl	800e790 <__swbuf_r>
 800e712:	3001      	adds	r0, #1
 800e714:	d011      	beq.n	800e73a <_puts_r+0x72>
 800e716:	200a      	movs	r0, #10
 800e718:	e011      	b.n	800e73e <_puts_r+0x76>
 800e71a:	4b17      	ldr	r3, [pc, #92]	; (800e778 <_puts_r+0xb0>)
 800e71c:	429c      	cmp	r4, r3
 800e71e:	d101      	bne.n	800e724 <_puts_r+0x5c>
 800e720:	68ac      	ldr	r4, [r5, #8]
 800e722:	e7e3      	b.n	800e6ec <_puts_r+0x24>
 800e724:	4b15      	ldr	r3, [pc, #84]	; (800e77c <_puts_r+0xb4>)
 800e726:	429c      	cmp	r4, r3
 800e728:	bf08      	it	eq
 800e72a:	68ec      	ldreq	r4, [r5, #12]
 800e72c:	e7de      	b.n	800e6ec <_puts_r+0x24>
 800e72e:	4621      	mov	r1, r4
 800e730:	4628      	mov	r0, r5
 800e732:	f000 f87f 	bl	800e834 <__swsetup_r>
 800e736:	2800      	cmp	r0, #0
 800e738:	d0dd      	beq.n	800e6f6 <_puts_r+0x2e>
 800e73a:	f04f 30ff 	mov.w	r0, #4294967295
 800e73e:	bd70      	pop	{r4, r5, r6, pc}
 800e740:	2b00      	cmp	r3, #0
 800e742:	da04      	bge.n	800e74e <_puts_r+0x86>
 800e744:	69a2      	ldr	r2, [r4, #24]
 800e746:	429a      	cmp	r2, r3
 800e748:	dc06      	bgt.n	800e758 <_puts_r+0x90>
 800e74a:	290a      	cmp	r1, #10
 800e74c:	d004      	beq.n	800e758 <_puts_r+0x90>
 800e74e:	6823      	ldr	r3, [r4, #0]
 800e750:	1c5a      	adds	r2, r3, #1
 800e752:	6022      	str	r2, [r4, #0]
 800e754:	7019      	strb	r1, [r3, #0]
 800e756:	e7cf      	b.n	800e6f8 <_puts_r+0x30>
 800e758:	4622      	mov	r2, r4
 800e75a:	4628      	mov	r0, r5
 800e75c:	f000 f818 	bl	800e790 <__swbuf_r>
 800e760:	3001      	adds	r0, #1
 800e762:	d1c9      	bne.n	800e6f8 <_puts_r+0x30>
 800e764:	e7e9      	b.n	800e73a <_puts_r+0x72>
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	200a      	movs	r0, #10
 800e76a:	1c5a      	adds	r2, r3, #1
 800e76c:	6022      	str	r2, [r4, #0]
 800e76e:	7018      	strb	r0, [r3, #0]
 800e770:	e7e5      	b.n	800e73e <_puts_r+0x76>
 800e772:	bf00      	nop
 800e774:	08011410 	.word	0x08011410
 800e778:	08011430 	.word	0x08011430
 800e77c:	080113f0 	.word	0x080113f0

0800e780 <puts>:
 800e780:	4b02      	ldr	r3, [pc, #8]	; (800e78c <puts+0xc>)
 800e782:	4601      	mov	r1, r0
 800e784:	6818      	ldr	r0, [r3, #0]
 800e786:	f7ff bf9f 	b.w	800e6c8 <_puts_r>
 800e78a:	bf00      	nop
 800e78c:	20000018 	.word	0x20000018

0800e790 <__swbuf_r>:
 800e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e792:	460e      	mov	r6, r1
 800e794:	4614      	mov	r4, r2
 800e796:	4605      	mov	r5, r0
 800e798:	b118      	cbz	r0, 800e7a2 <__swbuf_r+0x12>
 800e79a:	6983      	ldr	r3, [r0, #24]
 800e79c:	b90b      	cbnz	r3, 800e7a2 <__swbuf_r+0x12>
 800e79e:	f000 f9a7 	bl	800eaf0 <__sinit>
 800e7a2:	4b21      	ldr	r3, [pc, #132]	; (800e828 <__swbuf_r+0x98>)
 800e7a4:	429c      	cmp	r4, r3
 800e7a6:	d12a      	bne.n	800e7fe <__swbuf_r+0x6e>
 800e7a8:	686c      	ldr	r4, [r5, #4]
 800e7aa:	69a3      	ldr	r3, [r4, #24]
 800e7ac:	60a3      	str	r3, [r4, #8]
 800e7ae:	89a3      	ldrh	r3, [r4, #12]
 800e7b0:	071a      	lsls	r2, r3, #28
 800e7b2:	d52e      	bpl.n	800e812 <__swbuf_r+0x82>
 800e7b4:	6923      	ldr	r3, [r4, #16]
 800e7b6:	b363      	cbz	r3, 800e812 <__swbuf_r+0x82>
 800e7b8:	6923      	ldr	r3, [r4, #16]
 800e7ba:	6820      	ldr	r0, [r4, #0]
 800e7bc:	1ac0      	subs	r0, r0, r3
 800e7be:	6963      	ldr	r3, [r4, #20]
 800e7c0:	b2f6      	uxtb	r6, r6
 800e7c2:	4283      	cmp	r3, r0
 800e7c4:	4637      	mov	r7, r6
 800e7c6:	dc04      	bgt.n	800e7d2 <__swbuf_r+0x42>
 800e7c8:	4621      	mov	r1, r4
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	f000 f926 	bl	800ea1c <_fflush_r>
 800e7d0:	bb28      	cbnz	r0, 800e81e <__swbuf_r+0x8e>
 800e7d2:	68a3      	ldr	r3, [r4, #8]
 800e7d4:	3b01      	subs	r3, #1
 800e7d6:	60a3      	str	r3, [r4, #8]
 800e7d8:	6823      	ldr	r3, [r4, #0]
 800e7da:	1c5a      	adds	r2, r3, #1
 800e7dc:	6022      	str	r2, [r4, #0]
 800e7de:	701e      	strb	r6, [r3, #0]
 800e7e0:	6963      	ldr	r3, [r4, #20]
 800e7e2:	3001      	adds	r0, #1
 800e7e4:	4283      	cmp	r3, r0
 800e7e6:	d004      	beq.n	800e7f2 <__swbuf_r+0x62>
 800e7e8:	89a3      	ldrh	r3, [r4, #12]
 800e7ea:	07db      	lsls	r3, r3, #31
 800e7ec:	d519      	bpl.n	800e822 <__swbuf_r+0x92>
 800e7ee:	2e0a      	cmp	r6, #10
 800e7f0:	d117      	bne.n	800e822 <__swbuf_r+0x92>
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	f000 f911 	bl	800ea1c <_fflush_r>
 800e7fa:	b190      	cbz	r0, 800e822 <__swbuf_r+0x92>
 800e7fc:	e00f      	b.n	800e81e <__swbuf_r+0x8e>
 800e7fe:	4b0b      	ldr	r3, [pc, #44]	; (800e82c <__swbuf_r+0x9c>)
 800e800:	429c      	cmp	r4, r3
 800e802:	d101      	bne.n	800e808 <__swbuf_r+0x78>
 800e804:	68ac      	ldr	r4, [r5, #8]
 800e806:	e7d0      	b.n	800e7aa <__swbuf_r+0x1a>
 800e808:	4b09      	ldr	r3, [pc, #36]	; (800e830 <__swbuf_r+0xa0>)
 800e80a:	429c      	cmp	r4, r3
 800e80c:	bf08      	it	eq
 800e80e:	68ec      	ldreq	r4, [r5, #12]
 800e810:	e7cb      	b.n	800e7aa <__swbuf_r+0x1a>
 800e812:	4621      	mov	r1, r4
 800e814:	4628      	mov	r0, r5
 800e816:	f000 f80d 	bl	800e834 <__swsetup_r>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d0cc      	beq.n	800e7b8 <__swbuf_r+0x28>
 800e81e:	f04f 37ff 	mov.w	r7, #4294967295
 800e822:	4638      	mov	r0, r7
 800e824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e826:	bf00      	nop
 800e828:	08011410 	.word	0x08011410
 800e82c:	08011430 	.word	0x08011430
 800e830:	080113f0 	.word	0x080113f0

0800e834 <__swsetup_r>:
 800e834:	4b32      	ldr	r3, [pc, #200]	; (800e900 <__swsetup_r+0xcc>)
 800e836:	b570      	push	{r4, r5, r6, lr}
 800e838:	681d      	ldr	r5, [r3, #0]
 800e83a:	4606      	mov	r6, r0
 800e83c:	460c      	mov	r4, r1
 800e83e:	b125      	cbz	r5, 800e84a <__swsetup_r+0x16>
 800e840:	69ab      	ldr	r3, [r5, #24]
 800e842:	b913      	cbnz	r3, 800e84a <__swsetup_r+0x16>
 800e844:	4628      	mov	r0, r5
 800e846:	f000 f953 	bl	800eaf0 <__sinit>
 800e84a:	4b2e      	ldr	r3, [pc, #184]	; (800e904 <__swsetup_r+0xd0>)
 800e84c:	429c      	cmp	r4, r3
 800e84e:	d10f      	bne.n	800e870 <__swsetup_r+0x3c>
 800e850:	686c      	ldr	r4, [r5, #4]
 800e852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e856:	b29a      	uxth	r2, r3
 800e858:	0715      	lsls	r5, r2, #28
 800e85a:	d42c      	bmi.n	800e8b6 <__swsetup_r+0x82>
 800e85c:	06d0      	lsls	r0, r2, #27
 800e85e:	d411      	bmi.n	800e884 <__swsetup_r+0x50>
 800e860:	2209      	movs	r2, #9
 800e862:	6032      	str	r2, [r6, #0]
 800e864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e868:	81a3      	strh	r3, [r4, #12]
 800e86a:	f04f 30ff 	mov.w	r0, #4294967295
 800e86e:	e03e      	b.n	800e8ee <__swsetup_r+0xba>
 800e870:	4b25      	ldr	r3, [pc, #148]	; (800e908 <__swsetup_r+0xd4>)
 800e872:	429c      	cmp	r4, r3
 800e874:	d101      	bne.n	800e87a <__swsetup_r+0x46>
 800e876:	68ac      	ldr	r4, [r5, #8]
 800e878:	e7eb      	b.n	800e852 <__swsetup_r+0x1e>
 800e87a:	4b24      	ldr	r3, [pc, #144]	; (800e90c <__swsetup_r+0xd8>)
 800e87c:	429c      	cmp	r4, r3
 800e87e:	bf08      	it	eq
 800e880:	68ec      	ldreq	r4, [r5, #12]
 800e882:	e7e6      	b.n	800e852 <__swsetup_r+0x1e>
 800e884:	0751      	lsls	r1, r2, #29
 800e886:	d512      	bpl.n	800e8ae <__swsetup_r+0x7a>
 800e888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e88a:	b141      	cbz	r1, 800e89e <__swsetup_r+0x6a>
 800e88c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e890:	4299      	cmp	r1, r3
 800e892:	d002      	beq.n	800e89a <__swsetup_r+0x66>
 800e894:	4630      	mov	r0, r6
 800e896:	f000 fa19 	bl	800eccc <_free_r>
 800e89a:	2300      	movs	r3, #0
 800e89c:	6363      	str	r3, [r4, #52]	; 0x34
 800e89e:	89a3      	ldrh	r3, [r4, #12]
 800e8a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8a4:	81a3      	strh	r3, [r4, #12]
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	6063      	str	r3, [r4, #4]
 800e8aa:	6923      	ldr	r3, [r4, #16]
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	89a3      	ldrh	r3, [r4, #12]
 800e8b0:	f043 0308 	orr.w	r3, r3, #8
 800e8b4:	81a3      	strh	r3, [r4, #12]
 800e8b6:	6923      	ldr	r3, [r4, #16]
 800e8b8:	b94b      	cbnz	r3, 800e8ce <__swsetup_r+0x9a>
 800e8ba:	89a3      	ldrh	r3, [r4, #12]
 800e8bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e8c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8c4:	d003      	beq.n	800e8ce <__swsetup_r+0x9a>
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f000 f9bf 	bl	800ec4c <__smakebuf_r>
 800e8ce:	89a2      	ldrh	r2, [r4, #12]
 800e8d0:	f012 0301 	ands.w	r3, r2, #1
 800e8d4:	d00c      	beq.n	800e8f0 <__swsetup_r+0xbc>
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	60a3      	str	r3, [r4, #8]
 800e8da:	6963      	ldr	r3, [r4, #20]
 800e8dc:	425b      	negs	r3, r3
 800e8de:	61a3      	str	r3, [r4, #24]
 800e8e0:	6923      	ldr	r3, [r4, #16]
 800e8e2:	b953      	cbnz	r3, 800e8fa <__swsetup_r+0xc6>
 800e8e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e8ec:	d1ba      	bne.n	800e864 <__swsetup_r+0x30>
 800e8ee:	bd70      	pop	{r4, r5, r6, pc}
 800e8f0:	0792      	lsls	r2, r2, #30
 800e8f2:	bf58      	it	pl
 800e8f4:	6963      	ldrpl	r3, [r4, #20]
 800e8f6:	60a3      	str	r3, [r4, #8]
 800e8f8:	e7f2      	b.n	800e8e0 <__swsetup_r+0xac>
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	e7f7      	b.n	800e8ee <__swsetup_r+0xba>
 800e8fe:	bf00      	nop
 800e900:	20000018 	.word	0x20000018
 800e904:	08011410 	.word	0x08011410
 800e908:	08011430 	.word	0x08011430
 800e90c:	080113f0 	.word	0x080113f0

0800e910 <__sflush_r>:
 800e910:	898a      	ldrh	r2, [r1, #12]
 800e912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e916:	4605      	mov	r5, r0
 800e918:	0710      	lsls	r0, r2, #28
 800e91a:	460c      	mov	r4, r1
 800e91c:	d458      	bmi.n	800e9d0 <__sflush_r+0xc0>
 800e91e:	684b      	ldr	r3, [r1, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	dc05      	bgt.n	800e930 <__sflush_r+0x20>
 800e924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e926:	2b00      	cmp	r3, #0
 800e928:	dc02      	bgt.n	800e930 <__sflush_r+0x20>
 800e92a:	2000      	movs	r0, #0
 800e92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e932:	2e00      	cmp	r6, #0
 800e934:	d0f9      	beq.n	800e92a <__sflush_r+0x1a>
 800e936:	2300      	movs	r3, #0
 800e938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e93c:	682f      	ldr	r7, [r5, #0]
 800e93e:	6a21      	ldr	r1, [r4, #32]
 800e940:	602b      	str	r3, [r5, #0]
 800e942:	d032      	beq.n	800e9aa <__sflush_r+0x9a>
 800e944:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e946:	89a3      	ldrh	r3, [r4, #12]
 800e948:	075a      	lsls	r2, r3, #29
 800e94a:	d505      	bpl.n	800e958 <__sflush_r+0x48>
 800e94c:	6863      	ldr	r3, [r4, #4]
 800e94e:	1ac0      	subs	r0, r0, r3
 800e950:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e952:	b10b      	cbz	r3, 800e958 <__sflush_r+0x48>
 800e954:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e956:	1ac0      	subs	r0, r0, r3
 800e958:	2300      	movs	r3, #0
 800e95a:	4602      	mov	r2, r0
 800e95c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e95e:	6a21      	ldr	r1, [r4, #32]
 800e960:	4628      	mov	r0, r5
 800e962:	47b0      	blx	r6
 800e964:	1c43      	adds	r3, r0, #1
 800e966:	89a3      	ldrh	r3, [r4, #12]
 800e968:	d106      	bne.n	800e978 <__sflush_r+0x68>
 800e96a:	6829      	ldr	r1, [r5, #0]
 800e96c:	291d      	cmp	r1, #29
 800e96e:	d848      	bhi.n	800ea02 <__sflush_r+0xf2>
 800e970:	4a29      	ldr	r2, [pc, #164]	; (800ea18 <__sflush_r+0x108>)
 800e972:	40ca      	lsrs	r2, r1
 800e974:	07d6      	lsls	r6, r2, #31
 800e976:	d544      	bpl.n	800ea02 <__sflush_r+0xf2>
 800e978:	2200      	movs	r2, #0
 800e97a:	6062      	str	r2, [r4, #4]
 800e97c:	04d9      	lsls	r1, r3, #19
 800e97e:	6922      	ldr	r2, [r4, #16]
 800e980:	6022      	str	r2, [r4, #0]
 800e982:	d504      	bpl.n	800e98e <__sflush_r+0x7e>
 800e984:	1c42      	adds	r2, r0, #1
 800e986:	d101      	bne.n	800e98c <__sflush_r+0x7c>
 800e988:	682b      	ldr	r3, [r5, #0]
 800e98a:	b903      	cbnz	r3, 800e98e <__sflush_r+0x7e>
 800e98c:	6560      	str	r0, [r4, #84]	; 0x54
 800e98e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e990:	602f      	str	r7, [r5, #0]
 800e992:	2900      	cmp	r1, #0
 800e994:	d0c9      	beq.n	800e92a <__sflush_r+0x1a>
 800e996:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e99a:	4299      	cmp	r1, r3
 800e99c:	d002      	beq.n	800e9a4 <__sflush_r+0x94>
 800e99e:	4628      	mov	r0, r5
 800e9a0:	f000 f994 	bl	800eccc <_free_r>
 800e9a4:	2000      	movs	r0, #0
 800e9a6:	6360      	str	r0, [r4, #52]	; 0x34
 800e9a8:	e7c0      	b.n	800e92c <__sflush_r+0x1c>
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	47b0      	blx	r6
 800e9b0:	1c41      	adds	r1, r0, #1
 800e9b2:	d1c8      	bne.n	800e946 <__sflush_r+0x36>
 800e9b4:	682b      	ldr	r3, [r5, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d0c5      	beq.n	800e946 <__sflush_r+0x36>
 800e9ba:	2b1d      	cmp	r3, #29
 800e9bc:	d001      	beq.n	800e9c2 <__sflush_r+0xb2>
 800e9be:	2b16      	cmp	r3, #22
 800e9c0:	d101      	bne.n	800e9c6 <__sflush_r+0xb6>
 800e9c2:	602f      	str	r7, [r5, #0]
 800e9c4:	e7b1      	b.n	800e92a <__sflush_r+0x1a>
 800e9c6:	89a3      	ldrh	r3, [r4, #12]
 800e9c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9cc:	81a3      	strh	r3, [r4, #12]
 800e9ce:	e7ad      	b.n	800e92c <__sflush_r+0x1c>
 800e9d0:	690f      	ldr	r7, [r1, #16]
 800e9d2:	2f00      	cmp	r7, #0
 800e9d4:	d0a9      	beq.n	800e92a <__sflush_r+0x1a>
 800e9d6:	0793      	lsls	r3, r2, #30
 800e9d8:	680e      	ldr	r6, [r1, #0]
 800e9da:	bf08      	it	eq
 800e9dc:	694b      	ldreq	r3, [r1, #20]
 800e9de:	600f      	str	r7, [r1, #0]
 800e9e0:	bf18      	it	ne
 800e9e2:	2300      	movne	r3, #0
 800e9e4:	eba6 0807 	sub.w	r8, r6, r7
 800e9e8:	608b      	str	r3, [r1, #8]
 800e9ea:	f1b8 0f00 	cmp.w	r8, #0
 800e9ee:	dd9c      	ble.n	800e92a <__sflush_r+0x1a>
 800e9f0:	4643      	mov	r3, r8
 800e9f2:	463a      	mov	r2, r7
 800e9f4:	6a21      	ldr	r1, [r4, #32]
 800e9f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	47b0      	blx	r6
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	dc06      	bgt.n	800ea0e <__sflush_r+0xfe>
 800ea00:	89a3      	ldrh	r3, [r4, #12]
 800ea02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea06:	81a3      	strh	r3, [r4, #12]
 800ea08:	f04f 30ff 	mov.w	r0, #4294967295
 800ea0c:	e78e      	b.n	800e92c <__sflush_r+0x1c>
 800ea0e:	4407      	add	r7, r0
 800ea10:	eba8 0800 	sub.w	r8, r8, r0
 800ea14:	e7e9      	b.n	800e9ea <__sflush_r+0xda>
 800ea16:	bf00      	nop
 800ea18:	20400001 	.word	0x20400001

0800ea1c <_fflush_r>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	690b      	ldr	r3, [r1, #16]
 800ea20:	4605      	mov	r5, r0
 800ea22:	460c      	mov	r4, r1
 800ea24:	b1db      	cbz	r3, 800ea5e <_fflush_r+0x42>
 800ea26:	b118      	cbz	r0, 800ea30 <_fflush_r+0x14>
 800ea28:	6983      	ldr	r3, [r0, #24]
 800ea2a:	b90b      	cbnz	r3, 800ea30 <_fflush_r+0x14>
 800ea2c:	f000 f860 	bl	800eaf0 <__sinit>
 800ea30:	4b0c      	ldr	r3, [pc, #48]	; (800ea64 <_fflush_r+0x48>)
 800ea32:	429c      	cmp	r4, r3
 800ea34:	d109      	bne.n	800ea4a <_fflush_r+0x2e>
 800ea36:	686c      	ldr	r4, [r5, #4]
 800ea38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea3c:	b17b      	cbz	r3, 800ea5e <_fflush_r+0x42>
 800ea3e:	4621      	mov	r1, r4
 800ea40:	4628      	mov	r0, r5
 800ea42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea46:	f7ff bf63 	b.w	800e910 <__sflush_r>
 800ea4a:	4b07      	ldr	r3, [pc, #28]	; (800ea68 <_fflush_r+0x4c>)
 800ea4c:	429c      	cmp	r4, r3
 800ea4e:	d101      	bne.n	800ea54 <_fflush_r+0x38>
 800ea50:	68ac      	ldr	r4, [r5, #8]
 800ea52:	e7f1      	b.n	800ea38 <_fflush_r+0x1c>
 800ea54:	4b05      	ldr	r3, [pc, #20]	; (800ea6c <_fflush_r+0x50>)
 800ea56:	429c      	cmp	r4, r3
 800ea58:	bf08      	it	eq
 800ea5a:	68ec      	ldreq	r4, [r5, #12]
 800ea5c:	e7ec      	b.n	800ea38 <_fflush_r+0x1c>
 800ea5e:	2000      	movs	r0, #0
 800ea60:	bd38      	pop	{r3, r4, r5, pc}
 800ea62:	bf00      	nop
 800ea64:	08011410 	.word	0x08011410
 800ea68:	08011430 	.word	0x08011430
 800ea6c:	080113f0 	.word	0x080113f0

0800ea70 <std>:
 800ea70:	2300      	movs	r3, #0
 800ea72:	b510      	push	{r4, lr}
 800ea74:	4604      	mov	r4, r0
 800ea76:	e9c0 3300 	strd	r3, r3, [r0]
 800ea7a:	6083      	str	r3, [r0, #8]
 800ea7c:	8181      	strh	r1, [r0, #12]
 800ea7e:	6643      	str	r3, [r0, #100]	; 0x64
 800ea80:	81c2      	strh	r2, [r0, #14]
 800ea82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea86:	6183      	str	r3, [r0, #24]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	2208      	movs	r2, #8
 800ea8c:	305c      	adds	r0, #92	; 0x5c
 800ea8e:	f7ff fde7 	bl	800e660 <memset>
 800ea92:	4b05      	ldr	r3, [pc, #20]	; (800eaa8 <std+0x38>)
 800ea94:	6263      	str	r3, [r4, #36]	; 0x24
 800ea96:	4b05      	ldr	r3, [pc, #20]	; (800eaac <std+0x3c>)
 800ea98:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea9a:	4b05      	ldr	r3, [pc, #20]	; (800eab0 <std+0x40>)
 800ea9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea9e:	4b05      	ldr	r3, [pc, #20]	; (800eab4 <std+0x44>)
 800eaa0:	6224      	str	r4, [r4, #32]
 800eaa2:	6323      	str	r3, [r4, #48]	; 0x30
 800eaa4:	bd10      	pop	{r4, pc}
 800eaa6:	bf00      	nop
 800eaa8:	0800f439 	.word	0x0800f439
 800eaac:	0800f45b 	.word	0x0800f45b
 800eab0:	0800f493 	.word	0x0800f493
 800eab4:	0800f4b7 	.word	0x0800f4b7

0800eab8 <_cleanup_r>:
 800eab8:	4901      	ldr	r1, [pc, #4]	; (800eac0 <_cleanup_r+0x8>)
 800eaba:	f000 b885 	b.w	800ebc8 <_fwalk_reent>
 800eabe:	bf00      	nop
 800eac0:	0800ea1d 	.word	0x0800ea1d

0800eac4 <__sfmoreglue>:
 800eac4:	b570      	push	{r4, r5, r6, lr}
 800eac6:	1e4a      	subs	r2, r1, #1
 800eac8:	2568      	movs	r5, #104	; 0x68
 800eaca:	4355      	muls	r5, r2
 800eacc:	460e      	mov	r6, r1
 800eace:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ead2:	f000 f949 	bl	800ed68 <_malloc_r>
 800ead6:	4604      	mov	r4, r0
 800ead8:	b140      	cbz	r0, 800eaec <__sfmoreglue+0x28>
 800eada:	2100      	movs	r1, #0
 800eadc:	e9c0 1600 	strd	r1, r6, [r0]
 800eae0:	300c      	adds	r0, #12
 800eae2:	60a0      	str	r0, [r4, #8]
 800eae4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eae8:	f7ff fdba 	bl	800e660 <memset>
 800eaec:	4620      	mov	r0, r4
 800eaee:	bd70      	pop	{r4, r5, r6, pc}

0800eaf0 <__sinit>:
 800eaf0:	6983      	ldr	r3, [r0, #24]
 800eaf2:	b510      	push	{r4, lr}
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	bb33      	cbnz	r3, 800eb46 <__sinit+0x56>
 800eaf8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800eafc:	6503      	str	r3, [r0, #80]	; 0x50
 800eafe:	4b12      	ldr	r3, [pc, #72]	; (800eb48 <__sinit+0x58>)
 800eb00:	4a12      	ldr	r2, [pc, #72]	; (800eb4c <__sinit+0x5c>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	6282      	str	r2, [r0, #40]	; 0x28
 800eb06:	4298      	cmp	r0, r3
 800eb08:	bf04      	itt	eq
 800eb0a:	2301      	moveq	r3, #1
 800eb0c:	6183      	streq	r3, [r0, #24]
 800eb0e:	f000 f81f 	bl	800eb50 <__sfp>
 800eb12:	6060      	str	r0, [r4, #4]
 800eb14:	4620      	mov	r0, r4
 800eb16:	f000 f81b 	bl	800eb50 <__sfp>
 800eb1a:	60a0      	str	r0, [r4, #8]
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f000 f817 	bl	800eb50 <__sfp>
 800eb22:	2200      	movs	r2, #0
 800eb24:	60e0      	str	r0, [r4, #12]
 800eb26:	2104      	movs	r1, #4
 800eb28:	6860      	ldr	r0, [r4, #4]
 800eb2a:	f7ff ffa1 	bl	800ea70 <std>
 800eb2e:	2201      	movs	r2, #1
 800eb30:	2109      	movs	r1, #9
 800eb32:	68a0      	ldr	r0, [r4, #8]
 800eb34:	f7ff ff9c 	bl	800ea70 <std>
 800eb38:	2202      	movs	r2, #2
 800eb3a:	2112      	movs	r1, #18
 800eb3c:	68e0      	ldr	r0, [r4, #12]
 800eb3e:	f7ff ff97 	bl	800ea70 <std>
 800eb42:	2301      	movs	r3, #1
 800eb44:	61a3      	str	r3, [r4, #24]
 800eb46:	bd10      	pop	{r4, pc}
 800eb48:	080113ec 	.word	0x080113ec
 800eb4c:	0800eab9 	.word	0x0800eab9

0800eb50 <__sfp>:
 800eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb52:	4b1b      	ldr	r3, [pc, #108]	; (800ebc0 <__sfp+0x70>)
 800eb54:	681e      	ldr	r6, [r3, #0]
 800eb56:	69b3      	ldr	r3, [r6, #24]
 800eb58:	4607      	mov	r7, r0
 800eb5a:	b913      	cbnz	r3, 800eb62 <__sfp+0x12>
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	f7ff ffc7 	bl	800eaf0 <__sinit>
 800eb62:	3648      	adds	r6, #72	; 0x48
 800eb64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eb68:	3b01      	subs	r3, #1
 800eb6a:	d503      	bpl.n	800eb74 <__sfp+0x24>
 800eb6c:	6833      	ldr	r3, [r6, #0]
 800eb6e:	b133      	cbz	r3, 800eb7e <__sfp+0x2e>
 800eb70:	6836      	ldr	r6, [r6, #0]
 800eb72:	e7f7      	b.n	800eb64 <__sfp+0x14>
 800eb74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb78:	b16d      	cbz	r5, 800eb96 <__sfp+0x46>
 800eb7a:	3468      	adds	r4, #104	; 0x68
 800eb7c:	e7f4      	b.n	800eb68 <__sfp+0x18>
 800eb7e:	2104      	movs	r1, #4
 800eb80:	4638      	mov	r0, r7
 800eb82:	f7ff ff9f 	bl	800eac4 <__sfmoreglue>
 800eb86:	6030      	str	r0, [r6, #0]
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d1f1      	bne.n	800eb70 <__sfp+0x20>
 800eb8c:	230c      	movs	r3, #12
 800eb8e:	603b      	str	r3, [r7, #0]
 800eb90:	4604      	mov	r4, r0
 800eb92:	4620      	mov	r0, r4
 800eb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb96:	4b0b      	ldr	r3, [pc, #44]	; (800ebc4 <__sfp+0x74>)
 800eb98:	6665      	str	r5, [r4, #100]	; 0x64
 800eb9a:	e9c4 5500 	strd	r5, r5, [r4]
 800eb9e:	60a5      	str	r5, [r4, #8]
 800eba0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800eba4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800eba8:	2208      	movs	r2, #8
 800ebaa:	4629      	mov	r1, r5
 800ebac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ebb0:	f7ff fd56 	bl	800e660 <memset>
 800ebb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ebb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ebbc:	e7e9      	b.n	800eb92 <__sfp+0x42>
 800ebbe:	bf00      	nop
 800ebc0:	080113ec 	.word	0x080113ec
 800ebc4:	ffff0001 	.word	0xffff0001

0800ebc8 <_fwalk_reent>:
 800ebc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebcc:	4680      	mov	r8, r0
 800ebce:	4689      	mov	r9, r1
 800ebd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ebd4:	2600      	movs	r6, #0
 800ebd6:	b914      	cbnz	r4, 800ebde <_fwalk_reent+0x16>
 800ebd8:	4630      	mov	r0, r6
 800ebda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebde:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ebe2:	3f01      	subs	r7, #1
 800ebe4:	d501      	bpl.n	800ebea <_fwalk_reent+0x22>
 800ebe6:	6824      	ldr	r4, [r4, #0]
 800ebe8:	e7f5      	b.n	800ebd6 <_fwalk_reent+0xe>
 800ebea:	89ab      	ldrh	r3, [r5, #12]
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d907      	bls.n	800ec00 <_fwalk_reent+0x38>
 800ebf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	d003      	beq.n	800ec00 <_fwalk_reent+0x38>
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	4640      	mov	r0, r8
 800ebfc:	47c8      	blx	r9
 800ebfe:	4306      	orrs	r6, r0
 800ec00:	3568      	adds	r5, #104	; 0x68
 800ec02:	e7ee      	b.n	800ebe2 <_fwalk_reent+0x1a>

0800ec04 <__swhatbuf_r>:
 800ec04:	b570      	push	{r4, r5, r6, lr}
 800ec06:	460e      	mov	r6, r1
 800ec08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec0c:	2900      	cmp	r1, #0
 800ec0e:	b096      	sub	sp, #88	; 0x58
 800ec10:	4614      	mov	r4, r2
 800ec12:	461d      	mov	r5, r3
 800ec14:	da07      	bge.n	800ec26 <__swhatbuf_r+0x22>
 800ec16:	2300      	movs	r3, #0
 800ec18:	602b      	str	r3, [r5, #0]
 800ec1a:	89b3      	ldrh	r3, [r6, #12]
 800ec1c:	061a      	lsls	r2, r3, #24
 800ec1e:	d410      	bmi.n	800ec42 <__swhatbuf_r+0x3e>
 800ec20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec24:	e00e      	b.n	800ec44 <__swhatbuf_r+0x40>
 800ec26:	466a      	mov	r2, sp
 800ec28:	f000 fc6c 	bl	800f504 <_fstat_r>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	dbf2      	blt.n	800ec16 <__swhatbuf_r+0x12>
 800ec30:	9a01      	ldr	r2, [sp, #4]
 800ec32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ec36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ec3a:	425a      	negs	r2, r3
 800ec3c:	415a      	adcs	r2, r3
 800ec3e:	602a      	str	r2, [r5, #0]
 800ec40:	e7ee      	b.n	800ec20 <__swhatbuf_r+0x1c>
 800ec42:	2340      	movs	r3, #64	; 0x40
 800ec44:	2000      	movs	r0, #0
 800ec46:	6023      	str	r3, [r4, #0]
 800ec48:	b016      	add	sp, #88	; 0x58
 800ec4a:	bd70      	pop	{r4, r5, r6, pc}

0800ec4c <__smakebuf_r>:
 800ec4c:	898b      	ldrh	r3, [r1, #12]
 800ec4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec50:	079d      	lsls	r5, r3, #30
 800ec52:	4606      	mov	r6, r0
 800ec54:	460c      	mov	r4, r1
 800ec56:	d507      	bpl.n	800ec68 <__smakebuf_r+0x1c>
 800ec58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec5c:	6023      	str	r3, [r4, #0]
 800ec5e:	6123      	str	r3, [r4, #16]
 800ec60:	2301      	movs	r3, #1
 800ec62:	6163      	str	r3, [r4, #20]
 800ec64:	b002      	add	sp, #8
 800ec66:	bd70      	pop	{r4, r5, r6, pc}
 800ec68:	ab01      	add	r3, sp, #4
 800ec6a:	466a      	mov	r2, sp
 800ec6c:	f7ff ffca 	bl	800ec04 <__swhatbuf_r>
 800ec70:	9900      	ldr	r1, [sp, #0]
 800ec72:	4605      	mov	r5, r0
 800ec74:	4630      	mov	r0, r6
 800ec76:	f000 f877 	bl	800ed68 <_malloc_r>
 800ec7a:	b948      	cbnz	r0, 800ec90 <__smakebuf_r+0x44>
 800ec7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec80:	059a      	lsls	r2, r3, #22
 800ec82:	d4ef      	bmi.n	800ec64 <__smakebuf_r+0x18>
 800ec84:	f023 0303 	bic.w	r3, r3, #3
 800ec88:	f043 0302 	orr.w	r3, r3, #2
 800ec8c:	81a3      	strh	r3, [r4, #12]
 800ec8e:	e7e3      	b.n	800ec58 <__smakebuf_r+0xc>
 800ec90:	4b0d      	ldr	r3, [pc, #52]	; (800ecc8 <__smakebuf_r+0x7c>)
 800ec92:	62b3      	str	r3, [r6, #40]	; 0x28
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	6020      	str	r0, [r4, #0]
 800ec98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec9c:	81a3      	strh	r3, [r4, #12]
 800ec9e:	9b00      	ldr	r3, [sp, #0]
 800eca0:	6163      	str	r3, [r4, #20]
 800eca2:	9b01      	ldr	r3, [sp, #4]
 800eca4:	6120      	str	r0, [r4, #16]
 800eca6:	b15b      	cbz	r3, 800ecc0 <__smakebuf_r+0x74>
 800eca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecac:	4630      	mov	r0, r6
 800ecae:	f000 fc3b 	bl	800f528 <_isatty_r>
 800ecb2:	b128      	cbz	r0, 800ecc0 <__smakebuf_r+0x74>
 800ecb4:	89a3      	ldrh	r3, [r4, #12]
 800ecb6:	f023 0303 	bic.w	r3, r3, #3
 800ecba:	f043 0301 	orr.w	r3, r3, #1
 800ecbe:	81a3      	strh	r3, [r4, #12]
 800ecc0:	89a3      	ldrh	r3, [r4, #12]
 800ecc2:	431d      	orrs	r5, r3
 800ecc4:	81a5      	strh	r5, [r4, #12]
 800ecc6:	e7cd      	b.n	800ec64 <__smakebuf_r+0x18>
 800ecc8:	0800eab9 	.word	0x0800eab9

0800eccc <_free_r>:
 800eccc:	b538      	push	{r3, r4, r5, lr}
 800ecce:	4605      	mov	r5, r0
 800ecd0:	2900      	cmp	r1, #0
 800ecd2:	d045      	beq.n	800ed60 <_free_r+0x94>
 800ecd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecd8:	1f0c      	subs	r4, r1, #4
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	bfb8      	it	lt
 800ecde:	18e4      	addlt	r4, r4, r3
 800ece0:	f000 fc44 	bl	800f56c <__malloc_lock>
 800ece4:	4a1f      	ldr	r2, [pc, #124]	; (800ed64 <_free_r+0x98>)
 800ece6:	6813      	ldr	r3, [r2, #0]
 800ece8:	4610      	mov	r0, r2
 800ecea:	b933      	cbnz	r3, 800ecfa <_free_r+0x2e>
 800ecec:	6063      	str	r3, [r4, #4]
 800ecee:	6014      	str	r4, [r2, #0]
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecf6:	f000 bc3a 	b.w	800f56e <__malloc_unlock>
 800ecfa:	42a3      	cmp	r3, r4
 800ecfc:	d90c      	bls.n	800ed18 <_free_r+0x4c>
 800ecfe:	6821      	ldr	r1, [r4, #0]
 800ed00:	1862      	adds	r2, r4, r1
 800ed02:	4293      	cmp	r3, r2
 800ed04:	bf04      	itt	eq
 800ed06:	681a      	ldreq	r2, [r3, #0]
 800ed08:	685b      	ldreq	r3, [r3, #4]
 800ed0a:	6063      	str	r3, [r4, #4]
 800ed0c:	bf04      	itt	eq
 800ed0e:	1852      	addeq	r2, r2, r1
 800ed10:	6022      	streq	r2, [r4, #0]
 800ed12:	6004      	str	r4, [r0, #0]
 800ed14:	e7ec      	b.n	800ecf0 <_free_r+0x24>
 800ed16:	4613      	mov	r3, r2
 800ed18:	685a      	ldr	r2, [r3, #4]
 800ed1a:	b10a      	cbz	r2, 800ed20 <_free_r+0x54>
 800ed1c:	42a2      	cmp	r2, r4
 800ed1e:	d9fa      	bls.n	800ed16 <_free_r+0x4a>
 800ed20:	6819      	ldr	r1, [r3, #0]
 800ed22:	1858      	adds	r0, r3, r1
 800ed24:	42a0      	cmp	r0, r4
 800ed26:	d10b      	bne.n	800ed40 <_free_r+0x74>
 800ed28:	6820      	ldr	r0, [r4, #0]
 800ed2a:	4401      	add	r1, r0
 800ed2c:	1858      	adds	r0, r3, r1
 800ed2e:	4282      	cmp	r2, r0
 800ed30:	6019      	str	r1, [r3, #0]
 800ed32:	d1dd      	bne.n	800ecf0 <_free_r+0x24>
 800ed34:	6810      	ldr	r0, [r2, #0]
 800ed36:	6852      	ldr	r2, [r2, #4]
 800ed38:	605a      	str	r2, [r3, #4]
 800ed3a:	4401      	add	r1, r0
 800ed3c:	6019      	str	r1, [r3, #0]
 800ed3e:	e7d7      	b.n	800ecf0 <_free_r+0x24>
 800ed40:	d902      	bls.n	800ed48 <_free_r+0x7c>
 800ed42:	230c      	movs	r3, #12
 800ed44:	602b      	str	r3, [r5, #0]
 800ed46:	e7d3      	b.n	800ecf0 <_free_r+0x24>
 800ed48:	6820      	ldr	r0, [r4, #0]
 800ed4a:	1821      	adds	r1, r4, r0
 800ed4c:	428a      	cmp	r2, r1
 800ed4e:	bf04      	itt	eq
 800ed50:	6811      	ldreq	r1, [r2, #0]
 800ed52:	6852      	ldreq	r2, [r2, #4]
 800ed54:	6062      	str	r2, [r4, #4]
 800ed56:	bf04      	itt	eq
 800ed58:	1809      	addeq	r1, r1, r0
 800ed5a:	6021      	streq	r1, [r4, #0]
 800ed5c:	605c      	str	r4, [r3, #4]
 800ed5e:	e7c7      	b.n	800ecf0 <_free_r+0x24>
 800ed60:	bd38      	pop	{r3, r4, r5, pc}
 800ed62:	bf00      	nop
 800ed64:	20000614 	.word	0x20000614

0800ed68 <_malloc_r>:
 800ed68:	b570      	push	{r4, r5, r6, lr}
 800ed6a:	1ccd      	adds	r5, r1, #3
 800ed6c:	f025 0503 	bic.w	r5, r5, #3
 800ed70:	3508      	adds	r5, #8
 800ed72:	2d0c      	cmp	r5, #12
 800ed74:	bf38      	it	cc
 800ed76:	250c      	movcc	r5, #12
 800ed78:	2d00      	cmp	r5, #0
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	db01      	blt.n	800ed82 <_malloc_r+0x1a>
 800ed7e:	42a9      	cmp	r1, r5
 800ed80:	d903      	bls.n	800ed8a <_malloc_r+0x22>
 800ed82:	230c      	movs	r3, #12
 800ed84:	6033      	str	r3, [r6, #0]
 800ed86:	2000      	movs	r0, #0
 800ed88:	bd70      	pop	{r4, r5, r6, pc}
 800ed8a:	f000 fbef 	bl	800f56c <__malloc_lock>
 800ed8e:	4a21      	ldr	r2, [pc, #132]	; (800ee14 <_malloc_r+0xac>)
 800ed90:	6814      	ldr	r4, [r2, #0]
 800ed92:	4621      	mov	r1, r4
 800ed94:	b991      	cbnz	r1, 800edbc <_malloc_r+0x54>
 800ed96:	4c20      	ldr	r4, [pc, #128]	; (800ee18 <_malloc_r+0xb0>)
 800ed98:	6823      	ldr	r3, [r4, #0]
 800ed9a:	b91b      	cbnz	r3, 800eda4 <_malloc_r+0x3c>
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	f000 fb3b 	bl	800f418 <_sbrk_r>
 800eda2:	6020      	str	r0, [r4, #0]
 800eda4:	4629      	mov	r1, r5
 800eda6:	4630      	mov	r0, r6
 800eda8:	f000 fb36 	bl	800f418 <_sbrk_r>
 800edac:	1c43      	adds	r3, r0, #1
 800edae:	d124      	bne.n	800edfa <_malloc_r+0x92>
 800edb0:	230c      	movs	r3, #12
 800edb2:	6033      	str	r3, [r6, #0]
 800edb4:	4630      	mov	r0, r6
 800edb6:	f000 fbda 	bl	800f56e <__malloc_unlock>
 800edba:	e7e4      	b.n	800ed86 <_malloc_r+0x1e>
 800edbc:	680b      	ldr	r3, [r1, #0]
 800edbe:	1b5b      	subs	r3, r3, r5
 800edc0:	d418      	bmi.n	800edf4 <_malloc_r+0x8c>
 800edc2:	2b0b      	cmp	r3, #11
 800edc4:	d90f      	bls.n	800ede6 <_malloc_r+0x7e>
 800edc6:	600b      	str	r3, [r1, #0]
 800edc8:	50cd      	str	r5, [r1, r3]
 800edca:	18cc      	adds	r4, r1, r3
 800edcc:	4630      	mov	r0, r6
 800edce:	f000 fbce 	bl	800f56e <__malloc_unlock>
 800edd2:	f104 000b 	add.w	r0, r4, #11
 800edd6:	1d23      	adds	r3, r4, #4
 800edd8:	f020 0007 	bic.w	r0, r0, #7
 800eddc:	1ac3      	subs	r3, r0, r3
 800edde:	d0d3      	beq.n	800ed88 <_malloc_r+0x20>
 800ede0:	425a      	negs	r2, r3
 800ede2:	50e2      	str	r2, [r4, r3]
 800ede4:	e7d0      	b.n	800ed88 <_malloc_r+0x20>
 800ede6:	428c      	cmp	r4, r1
 800ede8:	684b      	ldr	r3, [r1, #4]
 800edea:	bf16      	itet	ne
 800edec:	6063      	strne	r3, [r4, #4]
 800edee:	6013      	streq	r3, [r2, #0]
 800edf0:	460c      	movne	r4, r1
 800edf2:	e7eb      	b.n	800edcc <_malloc_r+0x64>
 800edf4:	460c      	mov	r4, r1
 800edf6:	6849      	ldr	r1, [r1, #4]
 800edf8:	e7cc      	b.n	800ed94 <_malloc_r+0x2c>
 800edfa:	1cc4      	adds	r4, r0, #3
 800edfc:	f024 0403 	bic.w	r4, r4, #3
 800ee00:	42a0      	cmp	r0, r4
 800ee02:	d005      	beq.n	800ee10 <_malloc_r+0xa8>
 800ee04:	1a21      	subs	r1, r4, r0
 800ee06:	4630      	mov	r0, r6
 800ee08:	f000 fb06 	bl	800f418 <_sbrk_r>
 800ee0c:	3001      	adds	r0, #1
 800ee0e:	d0cf      	beq.n	800edb0 <_malloc_r+0x48>
 800ee10:	6025      	str	r5, [r4, #0]
 800ee12:	e7db      	b.n	800edcc <_malloc_r+0x64>
 800ee14:	20000614 	.word	0x20000614
 800ee18:	20000618 	.word	0x20000618

0800ee1c <__sfputc_r>:
 800ee1c:	6893      	ldr	r3, [r2, #8]
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	b410      	push	{r4}
 800ee24:	6093      	str	r3, [r2, #8]
 800ee26:	da08      	bge.n	800ee3a <__sfputc_r+0x1e>
 800ee28:	6994      	ldr	r4, [r2, #24]
 800ee2a:	42a3      	cmp	r3, r4
 800ee2c:	db01      	blt.n	800ee32 <__sfputc_r+0x16>
 800ee2e:	290a      	cmp	r1, #10
 800ee30:	d103      	bne.n	800ee3a <__sfputc_r+0x1e>
 800ee32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee36:	f7ff bcab 	b.w	800e790 <__swbuf_r>
 800ee3a:	6813      	ldr	r3, [r2, #0]
 800ee3c:	1c58      	adds	r0, r3, #1
 800ee3e:	6010      	str	r0, [r2, #0]
 800ee40:	7019      	strb	r1, [r3, #0]
 800ee42:	4608      	mov	r0, r1
 800ee44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee48:	4770      	bx	lr

0800ee4a <__sfputs_r>:
 800ee4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee4c:	4606      	mov	r6, r0
 800ee4e:	460f      	mov	r7, r1
 800ee50:	4614      	mov	r4, r2
 800ee52:	18d5      	adds	r5, r2, r3
 800ee54:	42ac      	cmp	r4, r5
 800ee56:	d101      	bne.n	800ee5c <__sfputs_r+0x12>
 800ee58:	2000      	movs	r0, #0
 800ee5a:	e007      	b.n	800ee6c <__sfputs_r+0x22>
 800ee5c:	463a      	mov	r2, r7
 800ee5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee62:	4630      	mov	r0, r6
 800ee64:	f7ff ffda 	bl	800ee1c <__sfputc_r>
 800ee68:	1c43      	adds	r3, r0, #1
 800ee6a:	d1f3      	bne.n	800ee54 <__sfputs_r+0xa>
 800ee6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee70 <_vfiprintf_r>:
 800ee70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee74:	460c      	mov	r4, r1
 800ee76:	b09d      	sub	sp, #116	; 0x74
 800ee78:	4617      	mov	r7, r2
 800ee7a:	461d      	mov	r5, r3
 800ee7c:	4606      	mov	r6, r0
 800ee7e:	b118      	cbz	r0, 800ee88 <_vfiprintf_r+0x18>
 800ee80:	6983      	ldr	r3, [r0, #24]
 800ee82:	b90b      	cbnz	r3, 800ee88 <_vfiprintf_r+0x18>
 800ee84:	f7ff fe34 	bl	800eaf0 <__sinit>
 800ee88:	4b7c      	ldr	r3, [pc, #496]	; (800f07c <_vfiprintf_r+0x20c>)
 800ee8a:	429c      	cmp	r4, r3
 800ee8c:	d158      	bne.n	800ef40 <_vfiprintf_r+0xd0>
 800ee8e:	6874      	ldr	r4, [r6, #4]
 800ee90:	89a3      	ldrh	r3, [r4, #12]
 800ee92:	0718      	lsls	r0, r3, #28
 800ee94:	d55e      	bpl.n	800ef54 <_vfiprintf_r+0xe4>
 800ee96:	6923      	ldr	r3, [r4, #16]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d05b      	beq.n	800ef54 <_vfiprintf_r+0xe4>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	9309      	str	r3, [sp, #36]	; 0x24
 800eea0:	2320      	movs	r3, #32
 800eea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eea6:	2330      	movs	r3, #48	; 0x30
 800eea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eeac:	9503      	str	r5, [sp, #12]
 800eeae:	f04f 0b01 	mov.w	fp, #1
 800eeb2:	46b8      	mov	r8, r7
 800eeb4:	4645      	mov	r5, r8
 800eeb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eeba:	b10b      	cbz	r3, 800eec0 <_vfiprintf_r+0x50>
 800eebc:	2b25      	cmp	r3, #37	; 0x25
 800eebe:	d154      	bne.n	800ef6a <_vfiprintf_r+0xfa>
 800eec0:	ebb8 0a07 	subs.w	sl, r8, r7
 800eec4:	d00b      	beq.n	800eede <_vfiprintf_r+0x6e>
 800eec6:	4653      	mov	r3, sl
 800eec8:	463a      	mov	r2, r7
 800eeca:	4621      	mov	r1, r4
 800eecc:	4630      	mov	r0, r6
 800eece:	f7ff ffbc 	bl	800ee4a <__sfputs_r>
 800eed2:	3001      	adds	r0, #1
 800eed4:	f000 80c2 	beq.w	800f05c <_vfiprintf_r+0x1ec>
 800eed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeda:	4453      	add	r3, sl
 800eedc:	9309      	str	r3, [sp, #36]	; 0x24
 800eede:	f898 3000 	ldrb.w	r3, [r8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	f000 80ba 	beq.w	800f05c <_vfiprintf_r+0x1ec>
 800eee8:	2300      	movs	r3, #0
 800eeea:	f04f 32ff 	mov.w	r2, #4294967295
 800eeee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eef2:	9304      	str	r3, [sp, #16]
 800eef4:	9307      	str	r3, [sp, #28]
 800eef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eefa:	931a      	str	r3, [sp, #104]	; 0x68
 800eefc:	46a8      	mov	r8, r5
 800eefe:	2205      	movs	r2, #5
 800ef00:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ef04:	485e      	ldr	r0, [pc, #376]	; (800f080 <_vfiprintf_r+0x210>)
 800ef06:	f7f1 f98b 	bl	8000220 <memchr>
 800ef0a:	9b04      	ldr	r3, [sp, #16]
 800ef0c:	bb78      	cbnz	r0, 800ef6e <_vfiprintf_r+0xfe>
 800ef0e:	06d9      	lsls	r1, r3, #27
 800ef10:	bf44      	itt	mi
 800ef12:	2220      	movmi	r2, #32
 800ef14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ef18:	071a      	lsls	r2, r3, #28
 800ef1a:	bf44      	itt	mi
 800ef1c:	222b      	movmi	r2, #43	; 0x2b
 800ef1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ef22:	782a      	ldrb	r2, [r5, #0]
 800ef24:	2a2a      	cmp	r2, #42	; 0x2a
 800ef26:	d02a      	beq.n	800ef7e <_vfiprintf_r+0x10e>
 800ef28:	9a07      	ldr	r2, [sp, #28]
 800ef2a:	46a8      	mov	r8, r5
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	250a      	movs	r5, #10
 800ef30:	4641      	mov	r1, r8
 800ef32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef36:	3b30      	subs	r3, #48	; 0x30
 800ef38:	2b09      	cmp	r3, #9
 800ef3a:	d969      	bls.n	800f010 <_vfiprintf_r+0x1a0>
 800ef3c:	b360      	cbz	r0, 800ef98 <_vfiprintf_r+0x128>
 800ef3e:	e024      	b.n	800ef8a <_vfiprintf_r+0x11a>
 800ef40:	4b50      	ldr	r3, [pc, #320]	; (800f084 <_vfiprintf_r+0x214>)
 800ef42:	429c      	cmp	r4, r3
 800ef44:	d101      	bne.n	800ef4a <_vfiprintf_r+0xda>
 800ef46:	68b4      	ldr	r4, [r6, #8]
 800ef48:	e7a2      	b.n	800ee90 <_vfiprintf_r+0x20>
 800ef4a:	4b4f      	ldr	r3, [pc, #316]	; (800f088 <_vfiprintf_r+0x218>)
 800ef4c:	429c      	cmp	r4, r3
 800ef4e:	bf08      	it	eq
 800ef50:	68f4      	ldreq	r4, [r6, #12]
 800ef52:	e79d      	b.n	800ee90 <_vfiprintf_r+0x20>
 800ef54:	4621      	mov	r1, r4
 800ef56:	4630      	mov	r0, r6
 800ef58:	f7ff fc6c 	bl	800e834 <__swsetup_r>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d09d      	beq.n	800ee9c <_vfiprintf_r+0x2c>
 800ef60:	f04f 30ff 	mov.w	r0, #4294967295
 800ef64:	b01d      	add	sp, #116	; 0x74
 800ef66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6a:	46a8      	mov	r8, r5
 800ef6c:	e7a2      	b.n	800eeb4 <_vfiprintf_r+0x44>
 800ef6e:	4a44      	ldr	r2, [pc, #272]	; (800f080 <_vfiprintf_r+0x210>)
 800ef70:	1a80      	subs	r0, r0, r2
 800ef72:	fa0b f000 	lsl.w	r0, fp, r0
 800ef76:	4318      	orrs	r0, r3
 800ef78:	9004      	str	r0, [sp, #16]
 800ef7a:	4645      	mov	r5, r8
 800ef7c:	e7be      	b.n	800eefc <_vfiprintf_r+0x8c>
 800ef7e:	9a03      	ldr	r2, [sp, #12]
 800ef80:	1d11      	adds	r1, r2, #4
 800ef82:	6812      	ldr	r2, [r2, #0]
 800ef84:	9103      	str	r1, [sp, #12]
 800ef86:	2a00      	cmp	r2, #0
 800ef88:	db01      	blt.n	800ef8e <_vfiprintf_r+0x11e>
 800ef8a:	9207      	str	r2, [sp, #28]
 800ef8c:	e004      	b.n	800ef98 <_vfiprintf_r+0x128>
 800ef8e:	4252      	negs	r2, r2
 800ef90:	f043 0302 	orr.w	r3, r3, #2
 800ef94:	9207      	str	r2, [sp, #28]
 800ef96:	9304      	str	r3, [sp, #16]
 800ef98:	f898 3000 	ldrb.w	r3, [r8]
 800ef9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ef9e:	d10e      	bne.n	800efbe <_vfiprintf_r+0x14e>
 800efa0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800efa4:	2b2a      	cmp	r3, #42	; 0x2a
 800efa6:	d138      	bne.n	800f01a <_vfiprintf_r+0x1aa>
 800efa8:	9b03      	ldr	r3, [sp, #12]
 800efaa:	1d1a      	adds	r2, r3, #4
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	9203      	str	r2, [sp, #12]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	bfb8      	it	lt
 800efb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800efb8:	f108 0802 	add.w	r8, r8, #2
 800efbc:	9305      	str	r3, [sp, #20]
 800efbe:	4d33      	ldr	r5, [pc, #204]	; (800f08c <_vfiprintf_r+0x21c>)
 800efc0:	f898 1000 	ldrb.w	r1, [r8]
 800efc4:	2203      	movs	r2, #3
 800efc6:	4628      	mov	r0, r5
 800efc8:	f7f1 f92a 	bl	8000220 <memchr>
 800efcc:	b140      	cbz	r0, 800efe0 <_vfiprintf_r+0x170>
 800efce:	2340      	movs	r3, #64	; 0x40
 800efd0:	1b40      	subs	r0, r0, r5
 800efd2:	fa03 f000 	lsl.w	r0, r3, r0
 800efd6:	9b04      	ldr	r3, [sp, #16]
 800efd8:	4303      	orrs	r3, r0
 800efda:	f108 0801 	add.w	r8, r8, #1
 800efde:	9304      	str	r3, [sp, #16]
 800efe0:	f898 1000 	ldrb.w	r1, [r8]
 800efe4:	482a      	ldr	r0, [pc, #168]	; (800f090 <_vfiprintf_r+0x220>)
 800efe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efea:	2206      	movs	r2, #6
 800efec:	f108 0701 	add.w	r7, r8, #1
 800eff0:	f7f1 f916 	bl	8000220 <memchr>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d037      	beq.n	800f068 <_vfiprintf_r+0x1f8>
 800eff8:	4b26      	ldr	r3, [pc, #152]	; (800f094 <_vfiprintf_r+0x224>)
 800effa:	bb1b      	cbnz	r3, 800f044 <_vfiprintf_r+0x1d4>
 800effc:	9b03      	ldr	r3, [sp, #12]
 800effe:	3307      	adds	r3, #7
 800f000:	f023 0307 	bic.w	r3, r3, #7
 800f004:	3308      	adds	r3, #8
 800f006:	9303      	str	r3, [sp, #12]
 800f008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f00a:	444b      	add	r3, r9
 800f00c:	9309      	str	r3, [sp, #36]	; 0x24
 800f00e:	e750      	b.n	800eeb2 <_vfiprintf_r+0x42>
 800f010:	fb05 3202 	mla	r2, r5, r2, r3
 800f014:	2001      	movs	r0, #1
 800f016:	4688      	mov	r8, r1
 800f018:	e78a      	b.n	800ef30 <_vfiprintf_r+0xc0>
 800f01a:	2300      	movs	r3, #0
 800f01c:	f108 0801 	add.w	r8, r8, #1
 800f020:	9305      	str	r3, [sp, #20]
 800f022:	4619      	mov	r1, r3
 800f024:	250a      	movs	r5, #10
 800f026:	4640      	mov	r0, r8
 800f028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f02c:	3a30      	subs	r2, #48	; 0x30
 800f02e:	2a09      	cmp	r2, #9
 800f030:	d903      	bls.n	800f03a <_vfiprintf_r+0x1ca>
 800f032:	2b00      	cmp	r3, #0
 800f034:	d0c3      	beq.n	800efbe <_vfiprintf_r+0x14e>
 800f036:	9105      	str	r1, [sp, #20]
 800f038:	e7c1      	b.n	800efbe <_vfiprintf_r+0x14e>
 800f03a:	fb05 2101 	mla	r1, r5, r1, r2
 800f03e:	2301      	movs	r3, #1
 800f040:	4680      	mov	r8, r0
 800f042:	e7f0      	b.n	800f026 <_vfiprintf_r+0x1b6>
 800f044:	ab03      	add	r3, sp, #12
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	4622      	mov	r2, r4
 800f04a:	4b13      	ldr	r3, [pc, #76]	; (800f098 <_vfiprintf_r+0x228>)
 800f04c:	a904      	add	r1, sp, #16
 800f04e:	4630      	mov	r0, r6
 800f050:	f3af 8000 	nop.w
 800f054:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f058:	4681      	mov	r9, r0
 800f05a:	d1d5      	bne.n	800f008 <_vfiprintf_r+0x198>
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	065b      	lsls	r3, r3, #25
 800f060:	f53f af7e 	bmi.w	800ef60 <_vfiprintf_r+0xf0>
 800f064:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f066:	e77d      	b.n	800ef64 <_vfiprintf_r+0xf4>
 800f068:	ab03      	add	r3, sp, #12
 800f06a:	9300      	str	r3, [sp, #0]
 800f06c:	4622      	mov	r2, r4
 800f06e:	4b0a      	ldr	r3, [pc, #40]	; (800f098 <_vfiprintf_r+0x228>)
 800f070:	a904      	add	r1, sp, #16
 800f072:	4630      	mov	r0, r6
 800f074:	f000 f888 	bl	800f188 <_printf_i>
 800f078:	e7ec      	b.n	800f054 <_vfiprintf_r+0x1e4>
 800f07a:	bf00      	nop
 800f07c:	08011410 	.word	0x08011410
 800f080:	08011450 	.word	0x08011450
 800f084:	08011430 	.word	0x08011430
 800f088:	080113f0 	.word	0x080113f0
 800f08c:	08011456 	.word	0x08011456
 800f090:	0801145a 	.word	0x0801145a
 800f094:	00000000 	.word	0x00000000
 800f098:	0800ee4b 	.word	0x0800ee4b

0800f09c <_printf_common>:
 800f09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a0:	4691      	mov	r9, r2
 800f0a2:	461f      	mov	r7, r3
 800f0a4:	688a      	ldr	r2, [r1, #8]
 800f0a6:	690b      	ldr	r3, [r1, #16]
 800f0a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	bfb8      	it	lt
 800f0b0:	4613      	movlt	r3, r2
 800f0b2:	f8c9 3000 	str.w	r3, [r9]
 800f0b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f0ba:	4606      	mov	r6, r0
 800f0bc:	460c      	mov	r4, r1
 800f0be:	b112      	cbz	r2, 800f0c6 <_printf_common+0x2a>
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	f8c9 3000 	str.w	r3, [r9]
 800f0c6:	6823      	ldr	r3, [r4, #0]
 800f0c8:	0699      	lsls	r1, r3, #26
 800f0ca:	bf42      	ittt	mi
 800f0cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f0d0:	3302      	addmi	r3, #2
 800f0d2:	f8c9 3000 	strmi.w	r3, [r9]
 800f0d6:	6825      	ldr	r5, [r4, #0]
 800f0d8:	f015 0506 	ands.w	r5, r5, #6
 800f0dc:	d107      	bne.n	800f0ee <_printf_common+0x52>
 800f0de:	f104 0a19 	add.w	sl, r4, #25
 800f0e2:	68e3      	ldr	r3, [r4, #12]
 800f0e4:	f8d9 2000 	ldr.w	r2, [r9]
 800f0e8:	1a9b      	subs	r3, r3, r2
 800f0ea:	42ab      	cmp	r3, r5
 800f0ec:	dc28      	bgt.n	800f140 <_printf_common+0xa4>
 800f0ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f0f2:	6822      	ldr	r2, [r4, #0]
 800f0f4:	3300      	adds	r3, #0
 800f0f6:	bf18      	it	ne
 800f0f8:	2301      	movne	r3, #1
 800f0fa:	0692      	lsls	r2, r2, #26
 800f0fc:	d42d      	bmi.n	800f15a <_printf_common+0xbe>
 800f0fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f102:	4639      	mov	r1, r7
 800f104:	4630      	mov	r0, r6
 800f106:	47c0      	blx	r8
 800f108:	3001      	adds	r0, #1
 800f10a:	d020      	beq.n	800f14e <_printf_common+0xb2>
 800f10c:	6823      	ldr	r3, [r4, #0]
 800f10e:	68e5      	ldr	r5, [r4, #12]
 800f110:	f8d9 2000 	ldr.w	r2, [r9]
 800f114:	f003 0306 	and.w	r3, r3, #6
 800f118:	2b04      	cmp	r3, #4
 800f11a:	bf08      	it	eq
 800f11c:	1aad      	subeq	r5, r5, r2
 800f11e:	68a3      	ldr	r3, [r4, #8]
 800f120:	6922      	ldr	r2, [r4, #16]
 800f122:	bf0c      	ite	eq
 800f124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f128:	2500      	movne	r5, #0
 800f12a:	4293      	cmp	r3, r2
 800f12c:	bfc4      	itt	gt
 800f12e:	1a9b      	subgt	r3, r3, r2
 800f130:	18ed      	addgt	r5, r5, r3
 800f132:	f04f 0900 	mov.w	r9, #0
 800f136:	341a      	adds	r4, #26
 800f138:	454d      	cmp	r5, r9
 800f13a:	d11a      	bne.n	800f172 <_printf_common+0xd6>
 800f13c:	2000      	movs	r0, #0
 800f13e:	e008      	b.n	800f152 <_printf_common+0xb6>
 800f140:	2301      	movs	r3, #1
 800f142:	4652      	mov	r2, sl
 800f144:	4639      	mov	r1, r7
 800f146:	4630      	mov	r0, r6
 800f148:	47c0      	blx	r8
 800f14a:	3001      	adds	r0, #1
 800f14c:	d103      	bne.n	800f156 <_printf_common+0xba>
 800f14e:	f04f 30ff 	mov.w	r0, #4294967295
 800f152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f156:	3501      	adds	r5, #1
 800f158:	e7c3      	b.n	800f0e2 <_printf_common+0x46>
 800f15a:	18e1      	adds	r1, r4, r3
 800f15c:	1c5a      	adds	r2, r3, #1
 800f15e:	2030      	movs	r0, #48	; 0x30
 800f160:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f164:	4422      	add	r2, r4
 800f166:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f16a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f16e:	3302      	adds	r3, #2
 800f170:	e7c5      	b.n	800f0fe <_printf_common+0x62>
 800f172:	2301      	movs	r3, #1
 800f174:	4622      	mov	r2, r4
 800f176:	4639      	mov	r1, r7
 800f178:	4630      	mov	r0, r6
 800f17a:	47c0      	blx	r8
 800f17c:	3001      	adds	r0, #1
 800f17e:	d0e6      	beq.n	800f14e <_printf_common+0xb2>
 800f180:	f109 0901 	add.w	r9, r9, #1
 800f184:	e7d8      	b.n	800f138 <_printf_common+0x9c>
	...

0800f188 <_printf_i>:
 800f188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f18c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f190:	460c      	mov	r4, r1
 800f192:	7e09      	ldrb	r1, [r1, #24]
 800f194:	b085      	sub	sp, #20
 800f196:	296e      	cmp	r1, #110	; 0x6e
 800f198:	4617      	mov	r7, r2
 800f19a:	4606      	mov	r6, r0
 800f19c:	4698      	mov	r8, r3
 800f19e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1a0:	f000 80b3 	beq.w	800f30a <_printf_i+0x182>
 800f1a4:	d822      	bhi.n	800f1ec <_printf_i+0x64>
 800f1a6:	2963      	cmp	r1, #99	; 0x63
 800f1a8:	d036      	beq.n	800f218 <_printf_i+0x90>
 800f1aa:	d80a      	bhi.n	800f1c2 <_printf_i+0x3a>
 800f1ac:	2900      	cmp	r1, #0
 800f1ae:	f000 80b9 	beq.w	800f324 <_printf_i+0x19c>
 800f1b2:	2958      	cmp	r1, #88	; 0x58
 800f1b4:	f000 8083 	beq.w	800f2be <_printf_i+0x136>
 800f1b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f1c0:	e032      	b.n	800f228 <_printf_i+0xa0>
 800f1c2:	2964      	cmp	r1, #100	; 0x64
 800f1c4:	d001      	beq.n	800f1ca <_printf_i+0x42>
 800f1c6:	2969      	cmp	r1, #105	; 0x69
 800f1c8:	d1f6      	bne.n	800f1b8 <_printf_i+0x30>
 800f1ca:	6820      	ldr	r0, [r4, #0]
 800f1cc:	6813      	ldr	r3, [r2, #0]
 800f1ce:	0605      	lsls	r5, r0, #24
 800f1d0:	f103 0104 	add.w	r1, r3, #4
 800f1d4:	d52a      	bpl.n	800f22c <_printf_i+0xa4>
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	6011      	str	r1, [r2, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	da03      	bge.n	800f1e6 <_printf_i+0x5e>
 800f1de:	222d      	movs	r2, #45	; 0x2d
 800f1e0:	425b      	negs	r3, r3
 800f1e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f1e6:	486f      	ldr	r0, [pc, #444]	; (800f3a4 <_printf_i+0x21c>)
 800f1e8:	220a      	movs	r2, #10
 800f1ea:	e039      	b.n	800f260 <_printf_i+0xd8>
 800f1ec:	2973      	cmp	r1, #115	; 0x73
 800f1ee:	f000 809d 	beq.w	800f32c <_printf_i+0x1a4>
 800f1f2:	d808      	bhi.n	800f206 <_printf_i+0x7e>
 800f1f4:	296f      	cmp	r1, #111	; 0x6f
 800f1f6:	d020      	beq.n	800f23a <_printf_i+0xb2>
 800f1f8:	2970      	cmp	r1, #112	; 0x70
 800f1fa:	d1dd      	bne.n	800f1b8 <_printf_i+0x30>
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	f043 0320 	orr.w	r3, r3, #32
 800f202:	6023      	str	r3, [r4, #0]
 800f204:	e003      	b.n	800f20e <_printf_i+0x86>
 800f206:	2975      	cmp	r1, #117	; 0x75
 800f208:	d017      	beq.n	800f23a <_printf_i+0xb2>
 800f20a:	2978      	cmp	r1, #120	; 0x78
 800f20c:	d1d4      	bne.n	800f1b8 <_printf_i+0x30>
 800f20e:	2378      	movs	r3, #120	; 0x78
 800f210:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f214:	4864      	ldr	r0, [pc, #400]	; (800f3a8 <_printf_i+0x220>)
 800f216:	e055      	b.n	800f2c4 <_printf_i+0x13c>
 800f218:	6813      	ldr	r3, [r2, #0]
 800f21a:	1d19      	adds	r1, r3, #4
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	6011      	str	r1, [r2, #0]
 800f220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f228:	2301      	movs	r3, #1
 800f22a:	e08c      	b.n	800f346 <_printf_i+0x1be>
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	6011      	str	r1, [r2, #0]
 800f230:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f234:	bf18      	it	ne
 800f236:	b21b      	sxthne	r3, r3
 800f238:	e7cf      	b.n	800f1da <_printf_i+0x52>
 800f23a:	6813      	ldr	r3, [r2, #0]
 800f23c:	6825      	ldr	r5, [r4, #0]
 800f23e:	1d18      	adds	r0, r3, #4
 800f240:	6010      	str	r0, [r2, #0]
 800f242:	0628      	lsls	r0, r5, #24
 800f244:	d501      	bpl.n	800f24a <_printf_i+0xc2>
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	e002      	b.n	800f250 <_printf_i+0xc8>
 800f24a:	0668      	lsls	r0, r5, #25
 800f24c:	d5fb      	bpl.n	800f246 <_printf_i+0xbe>
 800f24e:	881b      	ldrh	r3, [r3, #0]
 800f250:	4854      	ldr	r0, [pc, #336]	; (800f3a4 <_printf_i+0x21c>)
 800f252:	296f      	cmp	r1, #111	; 0x6f
 800f254:	bf14      	ite	ne
 800f256:	220a      	movne	r2, #10
 800f258:	2208      	moveq	r2, #8
 800f25a:	2100      	movs	r1, #0
 800f25c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f260:	6865      	ldr	r5, [r4, #4]
 800f262:	60a5      	str	r5, [r4, #8]
 800f264:	2d00      	cmp	r5, #0
 800f266:	f2c0 8095 	blt.w	800f394 <_printf_i+0x20c>
 800f26a:	6821      	ldr	r1, [r4, #0]
 800f26c:	f021 0104 	bic.w	r1, r1, #4
 800f270:	6021      	str	r1, [r4, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d13d      	bne.n	800f2f2 <_printf_i+0x16a>
 800f276:	2d00      	cmp	r5, #0
 800f278:	f040 808e 	bne.w	800f398 <_printf_i+0x210>
 800f27c:	4665      	mov	r5, ip
 800f27e:	2a08      	cmp	r2, #8
 800f280:	d10b      	bne.n	800f29a <_printf_i+0x112>
 800f282:	6823      	ldr	r3, [r4, #0]
 800f284:	07db      	lsls	r3, r3, #31
 800f286:	d508      	bpl.n	800f29a <_printf_i+0x112>
 800f288:	6923      	ldr	r3, [r4, #16]
 800f28a:	6862      	ldr	r2, [r4, #4]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	bfde      	ittt	le
 800f290:	2330      	movle	r3, #48	; 0x30
 800f292:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f296:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f29a:	ebac 0305 	sub.w	r3, ip, r5
 800f29e:	6123      	str	r3, [r4, #16]
 800f2a0:	f8cd 8000 	str.w	r8, [sp]
 800f2a4:	463b      	mov	r3, r7
 800f2a6:	aa03      	add	r2, sp, #12
 800f2a8:	4621      	mov	r1, r4
 800f2aa:	4630      	mov	r0, r6
 800f2ac:	f7ff fef6 	bl	800f09c <_printf_common>
 800f2b0:	3001      	adds	r0, #1
 800f2b2:	d14d      	bne.n	800f350 <_printf_i+0x1c8>
 800f2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b8:	b005      	add	sp, #20
 800f2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2be:	4839      	ldr	r0, [pc, #228]	; (800f3a4 <_printf_i+0x21c>)
 800f2c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f2c4:	6813      	ldr	r3, [r2, #0]
 800f2c6:	6821      	ldr	r1, [r4, #0]
 800f2c8:	1d1d      	adds	r5, r3, #4
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	6015      	str	r5, [r2, #0]
 800f2ce:	060a      	lsls	r2, r1, #24
 800f2d0:	d50b      	bpl.n	800f2ea <_printf_i+0x162>
 800f2d2:	07ca      	lsls	r2, r1, #31
 800f2d4:	bf44      	itt	mi
 800f2d6:	f041 0120 	orrmi.w	r1, r1, #32
 800f2da:	6021      	strmi	r1, [r4, #0]
 800f2dc:	b91b      	cbnz	r3, 800f2e6 <_printf_i+0x15e>
 800f2de:	6822      	ldr	r2, [r4, #0]
 800f2e0:	f022 0220 	bic.w	r2, r2, #32
 800f2e4:	6022      	str	r2, [r4, #0]
 800f2e6:	2210      	movs	r2, #16
 800f2e8:	e7b7      	b.n	800f25a <_printf_i+0xd2>
 800f2ea:	064d      	lsls	r5, r1, #25
 800f2ec:	bf48      	it	mi
 800f2ee:	b29b      	uxthmi	r3, r3
 800f2f0:	e7ef      	b.n	800f2d2 <_printf_i+0x14a>
 800f2f2:	4665      	mov	r5, ip
 800f2f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f2f8:	fb02 3311 	mls	r3, r2, r1, r3
 800f2fc:	5cc3      	ldrb	r3, [r0, r3]
 800f2fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f302:	460b      	mov	r3, r1
 800f304:	2900      	cmp	r1, #0
 800f306:	d1f5      	bne.n	800f2f4 <_printf_i+0x16c>
 800f308:	e7b9      	b.n	800f27e <_printf_i+0xf6>
 800f30a:	6813      	ldr	r3, [r2, #0]
 800f30c:	6825      	ldr	r5, [r4, #0]
 800f30e:	6961      	ldr	r1, [r4, #20]
 800f310:	1d18      	adds	r0, r3, #4
 800f312:	6010      	str	r0, [r2, #0]
 800f314:	0628      	lsls	r0, r5, #24
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	d501      	bpl.n	800f31e <_printf_i+0x196>
 800f31a:	6019      	str	r1, [r3, #0]
 800f31c:	e002      	b.n	800f324 <_printf_i+0x19c>
 800f31e:	066a      	lsls	r2, r5, #25
 800f320:	d5fb      	bpl.n	800f31a <_printf_i+0x192>
 800f322:	8019      	strh	r1, [r3, #0]
 800f324:	2300      	movs	r3, #0
 800f326:	6123      	str	r3, [r4, #16]
 800f328:	4665      	mov	r5, ip
 800f32a:	e7b9      	b.n	800f2a0 <_printf_i+0x118>
 800f32c:	6813      	ldr	r3, [r2, #0]
 800f32e:	1d19      	adds	r1, r3, #4
 800f330:	6011      	str	r1, [r2, #0]
 800f332:	681d      	ldr	r5, [r3, #0]
 800f334:	6862      	ldr	r2, [r4, #4]
 800f336:	2100      	movs	r1, #0
 800f338:	4628      	mov	r0, r5
 800f33a:	f7f0 ff71 	bl	8000220 <memchr>
 800f33e:	b108      	cbz	r0, 800f344 <_printf_i+0x1bc>
 800f340:	1b40      	subs	r0, r0, r5
 800f342:	6060      	str	r0, [r4, #4]
 800f344:	6863      	ldr	r3, [r4, #4]
 800f346:	6123      	str	r3, [r4, #16]
 800f348:	2300      	movs	r3, #0
 800f34a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f34e:	e7a7      	b.n	800f2a0 <_printf_i+0x118>
 800f350:	6923      	ldr	r3, [r4, #16]
 800f352:	462a      	mov	r2, r5
 800f354:	4639      	mov	r1, r7
 800f356:	4630      	mov	r0, r6
 800f358:	47c0      	blx	r8
 800f35a:	3001      	adds	r0, #1
 800f35c:	d0aa      	beq.n	800f2b4 <_printf_i+0x12c>
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	079b      	lsls	r3, r3, #30
 800f362:	d413      	bmi.n	800f38c <_printf_i+0x204>
 800f364:	68e0      	ldr	r0, [r4, #12]
 800f366:	9b03      	ldr	r3, [sp, #12]
 800f368:	4298      	cmp	r0, r3
 800f36a:	bfb8      	it	lt
 800f36c:	4618      	movlt	r0, r3
 800f36e:	e7a3      	b.n	800f2b8 <_printf_i+0x130>
 800f370:	2301      	movs	r3, #1
 800f372:	464a      	mov	r2, r9
 800f374:	4639      	mov	r1, r7
 800f376:	4630      	mov	r0, r6
 800f378:	47c0      	blx	r8
 800f37a:	3001      	adds	r0, #1
 800f37c:	d09a      	beq.n	800f2b4 <_printf_i+0x12c>
 800f37e:	3501      	adds	r5, #1
 800f380:	68e3      	ldr	r3, [r4, #12]
 800f382:	9a03      	ldr	r2, [sp, #12]
 800f384:	1a9b      	subs	r3, r3, r2
 800f386:	42ab      	cmp	r3, r5
 800f388:	dcf2      	bgt.n	800f370 <_printf_i+0x1e8>
 800f38a:	e7eb      	b.n	800f364 <_printf_i+0x1dc>
 800f38c:	2500      	movs	r5, #0
 800f38e:	f104 0919 	add.w	r9, r4, #25
 800f392:	e7f5      	b.n	800f380 <_printf_i+0x1f8>
 800f394:	2b00      	cmp	r3, #0
 800f396:	d1ac      	bne.n	800f2f2 <_printf_i+0x16a>
 800f398:	7803      	ldrb	r3, [r0, #0]
 800f39a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f39e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3a2:	e76c      	b.n	800f27e <_printf_i+0xf6>
 800f3a4:	08011461 	.word	0x08011461
 800f3a8:	08011472 	.word	0x08011472

0800f3ac <_putc_r>:
 800f3ac:	b570      	push	{r4, r5, r6, lr}
 800f3ae:	460d      	mov	r5, r1
 800f3b0:	4614      	mov	r4, r2
 800f3b2:	4606      	mov	r6, r0
 800f3b4:	b118      	cbz	r0, 800f3be <_putc_r+0x12>
 800f3b6:	6983      	ldr	r3, [r0, #24]
 800f3b8:	b90b      	cbnz	r3, 800f3be <_putc_r+0x12>
 800f3ba:	f7ff fb99 	bl	800eaf0 <__sinit>
 800f3be:	4b13      	ldr	r3, [pc, #76]	; (800f40c <_putc_r+0x60>)
 800f3c0:	429c      	cmp	r4, r3
 800f3c2:	d112      	bne.n	800f3ea <_putc_r+0x3e>
 800f3c4:	6874      	ldr	r4, [r6, #4]
 800f3c6:	68a3      	ldr	r3, [r4, #8]
 800f3c8:	3b01      	subs	r3, #1
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	60a3      	str	r3, [r4, #8]
 800f3ce:	da16      	bge.n	800f3fe <_putc_r+0x52>
 800f3d0:	69a2      	ldr	r2, [r4, #24]
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	db02      	blt.n	800f3dc <_putc_r+0x30>
 800f3d6:	b2eb      	uxtb	r3, r5
 800f3d8:	2b0a      	cmp	r3, #10
 800f3da:	d110      	bne.n	800f3fe <_putc_r+0x52>
 800f3dc:	4622      	mov	r2, r4
 800f3de:	4629      	mov	r1, r5
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3e6:	f7ff b9d3 	b.w	800e790 <__swbuf_r>
 800f3ea:	4b09      	ldr	r3, [pc, #36]	; (800f410 <_putc_r+0x64>)
 800f3ec:	429c      	cmp	r4, r3
 800f3ee:	d101      	bne.n	800f3f4 <_putc_r+0x48>
 800f3f0:	68b4      	ldr	r4, [r6, #8]
 800f3f2:	e7e8      	b.n	800f3c6 <_putc_r+0x1a>
 800f3f4:	4b07      	ldr	r3, [pc, #28]	; (800f414 <_putc_r+0x68>)
 800f3f6:	429c      	cmp	r4, r3
 800f3f8:	bf08      	it	eq
 800f3fa:	68f4      	ldreq	r4, [r6, #12]
 800f3fc:	e7e3      	b.n	800f3c6 <_putc_r+0x1a>
 800f3fe:	6823      	ldr	r3, [r4, #0]
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	6022      	str	r2, [r4, #0]
 800f404:	701d      	strb	r5, [r3, #0]
 800f406:	b2e8      	uxtb	r0, r5
 800f408:	bd70      	pop	{r4, r5, r6, pc}
 800f40a:	bf00      	nop
 800f40c:	08011410 	.word	0x08011410
 800f410:	08011430 	.word	0x08011430
 800f414:	080113f0 	.word	0x080113f0

0800f418 <_sbrk_r>:
 800f418:	b538      	push	{r3, r4, r5, lr}
 800f41a:	4c06      	ldr	r4, [pc, #24]	; (800f434 <_sbrk_r+0x1c>)
 800f41c:	2300      	movs	r3, #0
 800f41e:	4605      	mov	r5, r0
 800f420:	4608      	mov	r0, r1
 800f422:	6023      	str	r3, [r4, #0]
 800f424:	f7f1 fda4 	bl	8000f70 <_sbrk>
 800f428:	1c43      	adds	r3, r0, #1
 800f42a:	d102      	bne.n	800f432 <_sbrk_r+0x1a>
 800f42c:	6823      	ldr	r3, [r4, #0]
 800f42e:	b103      	cbz	r3, 800f432 <_sbrk_r+0x1a>
 800f430:	602b      	str	r3, [r5, #0]
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	20007bac 	.word	0x20007bac

0800f438 <__sread>:
 800f438:	b510      	push	{r4, lr}
 800f43a:	460c      	mov	r4, r1
 800f43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f440:	f000 f896 	bl	800f570 <_read_r>
 800f444:	2800      	cmp	r0, #0
 800f446:	bfab      	itete	ge
 800f448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f44a:	89a3      	ldrhlt	r3, [r4, #12]
 800f44c:	181b      	addge	r3, r3, r0
 800f44e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f452:	bfac      	ite	ge
 800f454:	6563      	strge	r3, [r4, #84]	; 0x54
 800f456:	81a3      	strhlt	r3, [r4, #12]
 800f458:	bd10      	pop	{r4, pc}

0800f45a <__swrite>:
 800f45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f45e:	461f      	mov	r7, r3
 800f460:	898b      	ldrh	r3, [r1, #12]
 800f462:	05db      	lsls	r3, r3, #23
 800f464:	4605      	mov	r5, r0
 800f466:	460c      	mov	r4, r1
 800f468:	4616      	mov	r6, r2
 800f46a:	d505      	bpl.n	800f478 <__swrite+0x1e>
 800f46c:	2302      	movs	r3, #2
 800f46e:	2200      	movs	r2, #0
 800f470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f474:	f000 f868 	bl	800f548 <_lseek_r>
 800f478:	89a3      	ldrh	r3, [r4, #12]
 800f47a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f47e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f482:	81a3      	strh	r3, [r4, #12]
 800f484:	4632      	mov	r2, r6
 800f486:	463b      	mov	r3, r7
 800f488:	4628      	mov	r0, r5
 800f48a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f48e:	f000 b817 	b.w	800f4c0 <_write_r>

0800f492 <__sseek>:
 800f492:	b510      	push	{r4, lr}
 800f494:	460c      	mov	r4, r1
 800f496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f49a:	f000 f855 	bl	800f548 <_lseek_r>
 800f49e:	1c43      	adds	r3, r0, #1
 800f4a0:	89a3      	ldrh	r3, [r4, #12]
 800f4a2:	bf15      	itete	ne
 800f4a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f4a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f4aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f4ae:	81a3      	strheq	r3, [r4, #12]
 800f4b0:	bf18      	it	ne
 800f4b2:	81a3      	strhne	r3, [r4, #12]
 800f4b4:	bd10      	pop	{r4, pc}

0800f4b6 <__sclose>:
 800f4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4ba:	f000 b813 	b.w	800f4e4 <_close_r>
	...

0800f4c0 <_write_r>:
 800f4c0:	b538      	push	{r3, r4, r5, lr}
 800f4c2:	4c07      	ldr	r4, [pc, #28]	; (800f4e0 <_write_r+0x20>)
 800f4c4:	4605      	mov	r5, r0
 800f4c6:	4608      	mov	r0, r1
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	6022      	str	r2, [r4, #0]
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	f7f1 fcfd 	bl	8000ece <_write>
 800f4d4:	1c43      	adds	r3, r0, #1
 800f4d6:	d102      	bne.n	800f4de <_write_r+0x1e>
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	b103      	cbz	r3, 800f4de <_write_r+0x1e>
 800f4dc:	602b      	str	r3, [r5, #0]
 800f4de:	bd38      	pop	{r3, r4, r5, pc}
 800f4e0:	20007bac 	.word	0x20007bac

0800f4e4 <_close_r>:
 800f4e4:	b538      	push	{r3, r4, r5, lr}
 800f4e6:	4c06      	ldr	r4, [pc, #24]	; (800f500 <_close_r+0x1c>)
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	4605      	mov	r5, r0
 800f4ec:	4608      	mov	r0, r1
 800f4ee:	6023      	str	r3, [r4, #0]
 800f4f0:	f7f1 fd09 	bl	8000f06 <_close>
 800f4f4:	1c43      	adds	r3, r0, #1
 800f4f6:	d102      	bne.n	800f4fe <_close_r+0x1a>
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	b103      	cbz	r3, 800f4fe <_close_r+0x1a>
 800f4fc:	602b      	str	r3, [r5, #0]
 800f4fe:	bd38      	pop	{r3, r4, r5, pc}
 800f500:	20007bac 	.word	0x20007bac

0800f504 <_fstat_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4c07      	ldr	r4, [pc, #28]	; (800f524 <_fstat_r+0x20>)
 800f508:	2300      	movs	r3, #0
 800f50a:	4605      	mov	r5, r0
 800f50c:	4608      	mov	r0, r1
 800f50e:	4611      	mov	r1, r2
 800f510:	6023      	str	r3, [r4, #0]
 800f512:	f7f1 fd04 	bl	8000f1e <_fstat>
 800f516:	1c43      	adds	r3, r0, #1
 800f518:	d102      	bne.n	800f520 <_fstat_r+0x1c>
 800f51a:	6823      	ldr	r3, [r4, #0]
 800f51c:	b103      	cbz	r3, 800f520 <_fstat_r+0x1c>
 800f51e:	602b      	str	r3, [r5, #0]
 800f520:	bd38      	pop	{r3, r4, r5, pc}
 800f522:	bf00      	nop
 800f524:	20007bac 	.word	0x20007bac

0800f528 <_isatty_r>:
 800f528:	b538      	push	{r3, r4, r5, lr}
 800f52a:	4c06      	ldr	r4, [pc, #24]	; (800f544 <_isatty_r+0x1c>)
 800f52c:	2300      	movs	r3, #0
 800f52e:	4605      	mov	r5, r0
 800f530:	4608      	mov	r0, r1
 800f532:	6023      	str	r3, [r4, #0]
 800f534:	f7f1 fd03 	bl	8000f3e <_isatty>
 800f538:	1c43      	adds	r3, r0, #1
 800f53a:	d102      	bne.n	800f542 <_isatty_r+0x1a>
 800f53c:	6823      	ldr	r3, [r4, #0]
 800f53e:	b103      	cbz	r3, 800f542 <_isatty_r+0x1a>
 800f540:	602b      	str	r3, [r5, #0]
 800f542:	bd38      	pop	{r3, r4, r5, pc}
 800f544:	20007bac 	.word	0x20007bac

0800f548 <_lseek_r>:
 800f548:	b538      	push	{r3, r4, r5, lr}
 800f54a:	4c07      	ldr	r4, [pc, #28]	; (800f568 <_lseek_r+0x20>)
 800f54c:	4605      	mov	r5, r0
 800f54e:	4608      	mov	r0, r1
 800f550:	4611      	mov	r1, r2
 800f552:	2200      	movs	r2, #0
 800f554:	6022      	str	r2, [r4, #0]
 800f556:	461a      	mov	r2, r3
 800f558:	f7f1 fcfc 	bl	8000f54 <_lseek>
 800f55c:	1c43      	adds	r3, r0, #1
 800f55e:	d102      	bne.n	800f566 <_lseek_r+0x1e>
 800f560:	6823      	ldr	r3, [r4, #0]
 800f562:	b103      	cbz	r3, 800f566 <_lseek_r+0x1e>
 800f564:	602b      	str	r3, [r5, #0]
 800f566:	bd38      	pop	{r3, r4, r5, pc}
 800f568:	20007bac 	.word	0x20007bac

0800f56c <__malloc_lock>:
 800f56c:	4770      	bx	lr

0800f56e <__malloc_unlock>:
 800f56e:	4770      	bx	lr

0800f570 <_read_r>:
 800f570:	b538      	push	{r3, r4, r5, lr}
 800f572:	4c07      	ldr	r4, [pc, #28]	; (800f590 <_read_r+0x20>)
 800f574:	4605      	mov	r5, r0
 800f576:	4608      	mov	r0, r1
 800f578:	4611      	mov	r1, r2
 800f57a:	2200      	movs	r2, #0
 800f57c:	6022      	str	r2, [r4, #0]
 800f57e:	461a      	mov	r2, r3
 800f580:	f7f1 fc88 	bl	8000e94 <_read>
 800f584:	1c43      	adds	r3, r0, #1
 800f586:	d102      	bne.n	800f58e <_read_r+0x1e>
 800f588:	6823      	ldr	r3, [r4, #0]
 800f58a:	b103      	cbz	r3, 800f58e <_read_r+0x1e>
 800f58c:	602b      	str	r3, [r5, #0]
 800f58e:	bd38      	pop	{r3, r4, r5, pc}
 800f590:	20007bac 	.word	0x20007bac

0800f594 <_init>:
 800f594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f596:	bf00      	nop
 800f598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f59a:	bc08      	pop	{r3}
 800f59c:	469e      	mov	lr, r3
 800f59e:	4770      	bx	lr

0800f5a0 <_fini>:
 800f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5a2:	bf00      	nop
 800f5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5a6:	bc08      	pop	{r3}
 800f5a8:	469e      	mov	lr, r3
 800f5aa:	4770      	bx	lr
